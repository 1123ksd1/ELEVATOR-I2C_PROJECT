
13.ELEVATOR_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b654  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800b7f8  0800b7f8  0001b7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd8c  0800bd8c  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd94  0800bd94  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd98  0800bd98  0001bd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800bd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000513c  200002ac  0800c048  000202ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053e8  0800c048  000253e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fa1  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f1  00000000  00000000  0004427d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00048a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  0004a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001980b  00000000  00000000  0004b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac66  00000000  00000000  0006502b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009acb5  00000000  00000000  0007fc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e8  00000000  00000000  0011a99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002ac 	.word	0x200002ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7dc 	.word	0x0800b7dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b0 	.word	0x200002b0
 80001dc:	0800b7dc 	.word	0x0800b7dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_GPIO_EXTI_Callback>:
extern uint8_t stepmotor_state;

//move from stm32F4xx_HAL_Driver/src/stm32/stm32f4xx_hal_gpio.c to here
//external INT callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d002      	beq.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x16>
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	d010      	beq.n	8000ee6 <HAL_GPIO_EXTI_Callback+0x36>
	stepmotor_state =(stepmotor_state + 1 ) % 3;
	// printf("GPIO_PIN_0\n");
      break;
  }

}
 8000ec4:	e01f      	b.n	8000f06 <HAL_GPIO_EXTI_Callback+0x56>
	stepmotor_state =(stepmotor_state + 1 ) % 3;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ece:	fb83 3102 	smull	r3, r1, r3, r2
 8000ed2:	17d3      	asrs	r3, r2, #31
 8000ed4:	1ac9      	subs	r1, r1, r3
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	440b      	add	r3, r1
 8000edc:	1ad1      	subs	r1, r2, r3
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ee2:	701a      	strb	r2, [r3, #0]
       break;
 8000ee4:	e00f      	b.n	8000f06 <HAL_GPIO_EXTI_Callback+0x56>
	stepmotor_state =(stepmotor_state + 1 ) % 3;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x68>)
 8000eee:	fb83 3102 	smull	r3, r1, r3, r2
 8000ef2:	17d3      	asrs	r3, r2, #31
 8000ef4:	1ac9      	subs	r1, r1, r3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	440b      	add	r3, r1
 8000efc:	1ad1      	subs	r1, r2, r3
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f02:	701a      	strb	r2, [r3, #0]
      break;
 8000f04:	bf00      	nop
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200004a8 	.word	0x200004a8
 8000f18:	55555556 	.word	0x55555556

08000f1c <direct>:
uint8_t col[2] = {0, 0};


//shiftregister로 데이터 전송함수
void direct(uint8_t* data, uint8_t len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
    uint8_t temp;
    for (int j = 0; j < len; j++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e031      	b.n	8000f92 <direct+0x76>
    {
        for (int k = 0; k < 8; k++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	e028      	b.n	8000f86 <direct+0x6a>
        {
            temp = data[j];
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	73fb      	strb	r3, [r7, #15]
            if (temp & (1 << k))
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	fa42 f303 	asr.w	r3, r2, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <direct+0x40>
                HAL_GPIO_WritePin(GPIOB, SER_74HC595_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <direct+0x88>)
 8000f56:	f001 ff1d 	bl	8002d94 <HAL_GPIO_WritePin>
 8000f5a:	e005      	b.n	8000f68 <direct+0x4c>
            else
                HAL_GPIO_WritePin(GPIOB, SER_74HC595_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <direct+0x88>)
 8000f64:	f001 ff16 	bl	8002d94 <HAL_GPIO_WritePin>

            // CLK 펄스: 상승 -> 하강
            HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <direct+0x88>)
 8000f70:	f001 ff10 	bl	8002d94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <direct+0x88>)
 8000f7c:	f001 ff0a 	bl	8002d94 <HAL_GPIO_WritePin>
        for (int k = 0; k < 8; k++)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	ddd3      	ble.n	8000f34 <direct+0x18>
    for (int j = 0; j < len; j++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbc9      	blt.n	8000f2e <direct+0x12>
        }
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <init_dotmatrix>:
int number_of_character = 2;  // 출력할 문자 갯수 up and down



void init_dotmatrix(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
   for (int i=0; i < 8; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e00f      	b.n	8000fd4 <init_dotmatrix+0x2c>
   {
      display_data[i] = up_arrow_data[i];
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <init_dotmatrix+0x90>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2d9      	uxtb	r1, r3
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <init_dotmatrix+0x94>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	460a      	mov	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
   for (int i=0; i < 8; i++)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	ddec      	ble.n	8000fb4 <init_dotmatrix+0xc>
   }
   for (int i=1; i < number_of_character+1; i++)
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	e01e      	b.n	800101e <init_dotmatrix+0x76>
   {
      for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	e015      	b.n	8001012 <init_dotmatrix+0x6a>
      {
         scroll_buffer[i][j] = up_arrow_data[i-1][j];
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	4913      	ldr	r1, [pc, #76]	; (8001038 <init_dotmatrix+0x90>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	18ca      	adds	r2, r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <init_dotmatrix+0x98>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	441a      	add	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	460a      	mov	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
      for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b07      	cmp	r3, #7
 8001016:	dde6      	ble.n	8000fe6 <init_dotmatrix+0x3e>
   for (int i=1; i < number_of_character+1; i++)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3301      	adds	r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <init_dotmatrix+0x9c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	429a      	cmp	r2, r3
 8001026:	dddb      	ble.n	8000fe0 <init_dotmatrix+0x38>
      }
   }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000000 	.word	0x20000000
 800103c:	20004e90 	.word	0x20004e90
 8001040:	200002cc 	.word	0x200002cc
 8001044:	200000c8 	.word	0x200000c8

08001048 <dotmatrix_main_func>:

// scroll 문자 출력 프로그램
int dotmatrix_main_func(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    init_dotmatrix(); // 화살표 데이터 준비
 800104e:	f7ff ffab 	bl	8000fa8 <init_dotmatrix>

    // 8줄을 반복하며 dot 출력
    for (int i = 0; i < 8; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e024      	b.n	80010a2 <dotmatrix_main_func+0x5a>
    {
        col[0] = ~(1 << i);          // 현재 행 선택
 8001058:	2201      	movs	r2, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <dotmatrix_main_func+0x6c>)
 8001068:	701a      	strb	r2, [r3, #0]
        col[1] = display_data[i];    // 해당 행에 표시할 패턴
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <dotmatrix_main_func+0x70>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <dotmatrix_main_func+0x6c>)
 8001074:	705a      	strb	r2, [r3, #1]
        direct(col, 2);              // shift register로 전송
 8001076:	2102      	movs	r1, #2
 8001078:	480e      	ldr	r0, [pc, #56]	; (80010b4 <dotmatrix_main_func+0x6c>)
 800107a:	f7ff ff4f 	bl	8000f1c <direct>

        // LATCH 신호 (출력 적용)
        GPIOB->ODR &= ~GPIO_PIN_13;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <dotmatrix_main_func+0x74>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <dotmatrix_main_func+0x74>)
 8001084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001088:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= GPIO_PIN_13;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <dotmatrix_main_func+0x74>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <dotmatrix_main_func+0x74>)
 8001090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001094:	6153      	str	r3, [r2, #20]

        osDelay(1); // 잠깐 delay로 표시 유지
 8001096:	2001      	movs	r0, #1
 8001098:	f004 fb2a 	bl	80056f0 <osDelay>
    for (int i = 0; i < 8; i++)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3301      	adds	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	ddd7      	ble.n	8001058 <dotmatrix_main_func+0x10>
    }

    return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200002c8 	.word	0x200002c8
 80010b8:	20004e90 	.word	0x20004e90
 80010bc:	40020400 	.word	0x40020400

080010c0 <read_time_ds1302>:
	move_cursor(1,0);
	lcd_string(lcd_buff);
}

void read_time_ds1302(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	ds1302.seconds = read_ds1302(ADDR_SECONDS);
 80010c4:	2080      	movs	r0, #128	; 0x80
 80010c6:	f000 f839 	bl	800113c <read_ds1302>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <read_time_ds1302+0x34>)
 80010d0:	711a      	strb	r2, [r3, #4]
	ds1302.minutes = read_ds1302(ADDR_MINUTES);
 80010d2:	2082      	movs	r0, #130	; 0x82
 80010d4:	f000 f832 	bl	800113c <read_ds1302>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <read_time_ds1302+0x34>)
 80010de:	715a      	strb	r2, [r3, #5]
	ds1302.hours = read_ds1302(ADDR_HOURS);
 80010e0:	2084      	movs	r0, #132	; 0x84
 80010e2:	f000 f82b 	bl	800113c <read_ds1302>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <read_time_ds1302+0x34>)
 80010ec:	719a      	strb	r2, [r3, #6]
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20004e98 	.word	0x20004e98

080010f8 <read_date_ds1302>:

void read_date_ds1302(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	ds1302.date = read_ds1302(ADDR_DATE);
 80010fc:	2086      	movs	r0, #134	; 0x86
 80010fe:	f000 f81d 	bl	800113c <read_ds1302>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <read_date_ds1302+0x40>)
 8001108:	71da      	strb	r2, [r3, #7]
	ds1302.month = read_ds1302(ADDR_MONTH);
 800110a:	2088      	movs	r0, #136	; 0x88
 800110c:	f000 f816 	bl	800113c <read_ds1302>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <read_date_ds1302+0x40>)
 8001116:	721a      	strb	r2, [r3, #8]
	ds1302.dayofweek = read_ds1302(ADDR_DAYOFWEEK);
 8001118:	208a      	movs	r0, #138	; 0x8a
 800111a:	f000 f80f 	bl	800113c <read_ds1302>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <read_date_ds1302+0x40>)
 8001124:	725a      	strb	r2, [r3, #9]
	ds1302.year = read_ds1302(ADDR_YEAR);
 8001126:	208c      	movs	r0, #140	; 0x8c
 8001128:	f000 f808 	bl	800113c <read_ds1302>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b01      	ldr	r3, [pc, #4]	; (8001138 <read_date_ds1302+0x40>)
 8001132:	729a      	strb	r2, [r3, #10]
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20004e98 	.word	0x20004e98

0800113c <read_ds1302>:

uint8_t read_ds1302(uint8_t addr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	unsigned char data8bits=0;  // 1bit씩 넘어온것을 담을 그릇(변수)
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
	// 1. CE high
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <read_ds1302+0x50>)
 8001152:	f001 fe1f 	bl	8002d94 <HAL_GPIO_WritePin>
	// 2. addr 전송
	tx_ds1302(addr+1);   // read addr
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3301      	adds	r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f865 	bl	800122c <tx_ds1302>
	// 3. data를 읽어 들인다.
	rx_ds1302(&data8bits);
 8001162:	f107 030f 	add.w	r3, r7, #15
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f82e 	bl	80011c8 <rx_ds1302>
	// 4. CE low
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <read_ds1302+0x50>)
 8001174:	f001 fe0e 	bl	8002d94 <HAL_GPIO_WritePin>
	// 5. return (bcd to dec )
	return bcd2dec(data8bits);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f808 	bl	8001190 <bcd2dec>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020000 	.word	0x40020000

08001190 <bcd2dec>:
//       2   5
//     x10  X1
//  =============
//       25
uint8_t bcd2dec(uint8_t bcd)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	low = bcd & 0x0f;
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	73fb      	strb	r3, [r7, #15]
	high = (bcd >> 4) * 10;     // 00100101 bcd >> 4 ==> 0000010 x 10
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	73bb      	strb	r3, [r7, #14]

	return (high+low);
 80011b2:	7bba      	ldrb	r2, [r7, #14]
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	4413      	add	r3, r2
 80011b8:	b2db      	uxtb	r3, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <rx_ds1302>:

	return (high+low);
}

void rx_ds1302(unsigned char *pdata)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	unsigned char temp=0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
	// IO 포트를 입력 모드로 전환
	input_dataline_ds1302();
 80011d4:	f000 f858 	bl	8001288 <input_dataline_ds1302>
	// DS1302로 부터 들어온 bit를 LSB부터 8bit를 받아서 temp변수에 저장
	for (int i=0; i < 8; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	e019      	b.n	8001212 <rx_ds1302+0x4a>
	{
		// 1bit를 읽어 들인다.
		if (HAL_GPIO_ReadPin(GPIOA, IO_DS1302_Pin))
 80011de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <rx_ds1302+0x60>)
 80011e4:	f001 fdbe 	bl	8002d64 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <rx_ds1302+0x3a>
		{
			// 1의 조건만 set
			temp |= 1 << i;
 80011ee:	2201      	movs	r2, #1
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	b25a      	sxtb	r2, r3
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	73fb      	strb	r3, [r7, #15]
		}
		if (i != 7)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d001      	beq.n	800120c <rx_ds1302+0x44>
			clock_ds1302();
 8001208:	f000 f878 	bl	80012fc <clock_ds1302>
	for (int i=0; i < 8; i++)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b07      	cmp	r3, #7
 8001216:	dde2      	ble.n	80011de <rx_ds1302+0x16>
	}
	*pdata = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020000 	.word	0x40020000

0800122c <tx_ds1302>:
	// 4. CE high --> low
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
}

tx_ds1302(uint8_t value)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	output_dataline_ds1302();
 8001236:	f000 f843 	bl	80012c0 <output_dataline_ds1302>
   //     0000 0001 &
   //     0000 0000  ==> HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
   //     1000 0000  실제값  (B7를 전송시의 )
   //     1000 0000 &
	//    1000 0000  ==> HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);
	for (int i=0; i < 8; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e019      	b.n	8001274 <tx_ds1302+0x48>
	{
		if (value & (1 << i))
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	fa42 f303 	asr.w	r3, r2, r3
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <tx_ds1302+0x32>
		{
			HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <tx_ds1302+0x58>)
 8001258:	f001 fd9c 	bl	8002d94 <HAL_GPIO_WritePin>
 800125c:	e005      	b.n	800126a <tx_ds1302+0x3e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <tx_ds1302+0x58>)
 8001266:	f001 fd95 	bl	8002d94 <HAL_GPIO_WritePin>
		}
		clock_ds1302();
 800126a:	f000 f847 	bl	80012fc <clock_ds1302>
	for (int i=0; i < 8; i++)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b07      	cmp	r3, #7
 8001278:	dde2      	ble.n	8001240 <tx_ds1302+0x14>
	}

}
 800127a:	bf00      	nop
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020000 	.word	0x40020000

08001288 <input_dataline_ds1302>:

void input_dataline_ds1302()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_init = {0,};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

	GPIO_init.Pin = IO_DS1302_Pin;
 800129c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a0:	607b      	str	r3, [r7, #4]
	GPIO_init.Mode = GPIO_MODE_INPUT;  // input mode
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
	GPIO_init.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_init);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <input_dataline_ds1302+0x34>)
 80012b0:	f001 fbd4 	bl	8002a5c <HAL_GPIO_Init>
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40020000 	.word	0x40020000

080012c0 <output_dataline_ds1302>:

void output_dataline_ds1302()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_init = {0,};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]

	GPIO_init.Pin = IO_DS1302_Pin;
 80012d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012d8:	607b      	str	r3, [r7, #4]
	GPIO_init.Mode = GPIO_MODE_OUTPUT_PP;  // output mode
 80012da:	2301      	movs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
	GPIO_init.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	GPIO_init.Speed = GPIO_SPEED_FREQ_HIGH;   // LOW: 2M HIGHL 25~100MHz
 80012e2:	2302      	movs	r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_init);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <output_dataline_ds1302+0x38>)
 80012ec:	f001 fbb6 	bl	8002a5c <HAL_GPIO_Init>
}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020000 	.word	0x40020000

080012fc <clock_ds1302>:

void clock_ds1302(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <clock_ds1302+0x20>)
 8001308:	f001 fd44 	bl	8002d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001312:	4802      	ldr	r0, [pc, #8]	; (800131c <clock_ds1302+0x20>)
 8001314:	f001 fd3e 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40020000 	.word	0x40020000

08001320 <i2c_start>:

//HAL->I2C
//start->addr->data->stop

void i2c_start(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
    SDA_HIGH(); SCL_HIGH(); I2C_DELAY();
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <i2c_start+0x78>)
 800132e:	f001 fd31 	bl	8002d94 <HAL_GPIO_WritePin>
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001338:	4817      	ldr	r0, [pc, #92]	; (8001398 <i2c_start+0x78>)
 800133a:	f001 fd2b 	bl	8002d94 <HAL_GPIO_WritePin>
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e002      	b.n	800134a <i2c_start+0x2a>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b09      	cmp	r3, #9
 800134e:	ddf9      	ble.n	8001344 <i2c_start+0x24>
    SDA_LOW(); I2C_DELAY();
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001356:	4810      	ldr	r0, [pc, #64]	; (8001398 <i2c_start+0x78>)
 8001358:	f001 fd1c 	bl	8002d94 <HAL_GPIO_WritePin>
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	e002      	b.n	8001368 <i2c_start+0x48>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b09      	cmp	r3, #9
 800136c:	ddf9      	ble.n	8001362 <i2c_start+0x42>
    SCL_LOW(); I2C_DELAY();
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <i2c_start+0x78>)
 8001376:	f001 fd0d 	bl	8002d94 <HAL_GPIO_WritePin>
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e002      	b.n	8001386 <i2c_start+0x66>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b09      	cmp	r3, #9
 800138a:	ddf9      	ble.n	8001380 <i2c_start+0x60>
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40020400 	.word	0x40020400

0800139c <i2c_stop>:


void i2c_stop(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
    SCL_LOW(); SDA_LOW(); I2C_DELAY();
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a8:	481a      	ldr	r0, [pc, #104]	; (8001414 <i2c_stop+0x78>)
 80013aa:	f001 fcf3 	bl	8002d94 <HAL_GPIO_WritePin>
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	4817      	ldr	r0, [pc, #92]	; (8001414 <i2c_stop+0x78>)
 80013b6:	f001 fced 	bl	8002d94 <HAL_GPIO_WritePin>
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e002      	b.n	80013c6 <i2c_stop+0x2a>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	ddf9      	ble.n	80013c0 <i2c_stop+0x24>
    SCL_HIGH(); I2C_DELAY();
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <i2c_stop+0x78>)
 80013d4:	f001 fcde 	bl	8002d94 <HAL_GPIO_WritePin>
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	e002      	b.n	80013e4 <i2c_stop+0x48>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3301      	adds	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	ddf9      	ble.n	80013de <i2c_stop+0x42>
    SDA_HIGH(); I2C_DELAY();
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <i2c_stop+0x78>)
 80013f2:	f001 fccf 	bl	8002d94 <HAL_GPIO_WritePin>
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	e002      	b.n	8001402 <i2c_stop+0x66>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b09      	cmp	r3, #9
 8001406:	ddf9      	ble.n	80013fc <i2c_stop+0x60>
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020400 	.word	0x40020400

08001418 <i2c_write_bit>:

void i2c_write_bit(uint8_t bit) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
    if (bit) SDA_HIGH(); else SDA_LOW();
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <i2c_write_bit+0x1e>
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142e:	481b      	ldr	r0, [pc, #108]	; (800149c <i2c_write_bit+0x84>)
 8001430:	f001 fcb0 	bl	8002d94 <HAL_GPIO_WritePin>
 8001434:	e005      	b.n	8001442 <i2c_write_bit+0x2a>
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143c:	4817      	ldr	r0, [pc, #92]	; (800149c <i2c_write_bit+0x84>)
 800143e:	f001 fca9 	bl	8002d94 <HAL_GPIO_WritePin>
    I2C_DELAY();
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e002      	b.n	800144e <i2c_write_bit+0x36>
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b09      	cmp	r3, #9
 8001452:	ddf9      	ble.n	8001448 <i2c_write_bit+0x30>
    SCL_HIGH(); I2C_DELAY();
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <i2c_write_bit+0x84>)
 800145c:	f001 fc9a 	bl	8002d94 <HAL_GPIO_WritePin>
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	e002      	b.n	800146c <i2c_write_bit+0x54>
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b09      	cmp	r3, #9
 8001470:	ddf9      	ble.n	8001466 <i2c_write_bit+0x4e>
    SCL_LOW(); I2C_DELAY();
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <i2c_write_bit+0x84>)
 800147a:	f001 fc8b 	bl	8002d94 <HAL_GPIO_WritePin>
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e002      	b.n	800148a <i2c_write_bit+0x72>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b09      	cmp	r3, #9
 800148e:	ddf9      	ble.n	8001484 <i2c_write_bit+0x6c>
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40020400 	.word	0x40020400

080014a0 <i2c_write_byte>:

uint8_t i2c_write_byte(uint8_t byte) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e00c      	b.n	80014ca <i2c_write_byte+0x2a>
        i2c_write_bit(byte & 0x80);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ffad 	bl	8001418 <i2c_write_bit>
        byte <<= 1;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	ddef      	ble.n	80014b0 <i2c_write_byte+0x10>
    }

    // ACK 비트 읽기
    SDA_HIGH(); // 릴리즈
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <i2c_write_byte+0x88>)
 80014d8:	f001 fc5c 	bl	8002d94 <HAL_GPIO_WritePin>
    I2C_DELAY();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e002      	b.n	80014e8 <i2c_write_byte+0x48>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b09      	cmp	r3, #9
 80014ec:	ddf9      	ble.n	80014e2 <i2c_write_byte+0x42>
    SCL_HIGH();
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <i2c_write_byte+0x88>)
 80014f6:	f001 fc4d 	bl	8002d94 <HAL_GPIO_WritePin>
    uint8_t ack = HAL_GPIO_ReadPin(GPIO_SDA_GPIO_Port, GPIO_SDA_Pin);
 80014fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <i2c_write_byte+0x88>)
 8001500:	f001 fc30 	bl	8002d64 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	74fb      	strb	r3, [r7, #19]
    SCL_LOW();
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <i2c_write_byte+0x88>)
 8001510:	f001 fc40 	bl	8002d94 <HAL_GPIO_WritePin>
    return ack == 0; // 0이면 ACK 받은 것
 8001514:	7cfb      	ldrb	r3, [r7, #19]
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020400 	.word	0x40020400

0800152c <i2c_write_data>:

void i2c_write_data(uint8_t addr, uint8_t *data, uint8_t len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
    i2c_start();
 800153c:	f7ff fef0 	bl	8001320 <i2c_start>
    if (!i2c_write_byte(addr)) return; // 주소 전송 + ACK 확인
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ffac 	bl	80014a0 <i2c_write_byte>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <i2c_write_data+0x50>

    for (uint8_t i = 0; i < len; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e00c      	b.n	800156e <i2c_write_data+0x42>
        if (!i2c_write_byte(data[i])) return; // 데이터 전송 + ACK 확인
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff9f 	bl	80014a0 <i2c_write_byte>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <i2c_write_data+0x54>
    for (uint8_t i = 0; i < len; i++) {
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	3301      	adds	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3ee      	bcc.n	8001554 <i2c_write_data+0x28>
    }

    i2c_stop();
 8001576:	f7ff ff11 	bl	800139c <i2c_stop>
 800157a:	e002      	b.n	8001582 <i2c_write_data+0x56>
    if (!i2c_write_byte(addr)) return; // 주소 전송 + ACK 확인
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <i2c_write_data+0x56>
        if (!i2c_write_byte(data[i])) return; // 데이터 전송 + ACK 확인
 8001580:	bf00      	nop
}
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <i2c_lcd_dis_line0>:


void i2c_lcd_dis_line0(void)//mutex의 thread1
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af02      	add	r7, sp, #8
	static int value = 0;
    static char time_buf[32];

    if(line0_timer >= 1000)//1초마다
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <i2c_lcd_dis_line0+0x4c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001596:	db19      	blt.n	80015cc <i2c_lcd_dis_line0+0x44>
    {
    	line0_timer=0;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <i2c_lcd_dis_line0+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

    	read_time_ds1302(); //ds1302에서 현재 시간 읽어오기
 800159e:	f7ff fd8f 	bl	80010c0 <read_time_ds1302>

		move_cursor(0,0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f8bc 	bl	8001722 <move_cursor>
		sprintf(time_buf, "time:%02d-%02d-%02d", ds1302.hours, ds1302.minutes, ds1302.seconds);
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <i2c_lcd_dis_line0+0x50>)
 80015ac:	799b      	ldrb	r3, [r3, #6]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <i2c_lcd_dis_line0+0x50>)
 80015b2:	795b      	ldrb	r3, [r3, #5]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <i2c_lcd_dis_line0+0x50>)
 80015b8:	791b      	ldrb	r3, [r3, #4]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	4907      	ldr	r1, [pc, #28]	; (80015dc <i2c_lcd_dis_line0+0x54>)
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <i2c_lcd_dis_line0+0x58>)
 80015c2:	f008 f851 	bl	8009668 <siprintf>
		lcd_string(time_buf);
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <i2c_lcd_dis_line0+0x58>)
 80015c8:	f000 f896 	bl	80016f8 <lcd_string>
   /*lcd_data(value + '0');
		value++;
		if(value>9)value=0;*/
    }
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200004a0 	.word	0x200004a0
 80015d8:	20004e98 	.word	0x20004e98
 80015dc:	0800b7f8 	.word	0x0800b7f8
 80015e0:	2000045c 	.word	0x2000045c

080015e4 <i2c_lcd_dis_line1>:


void i2c_lcd_dis_line1(void)//mutex의 thread1
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	static int value = 0;
    static char date_buf[32];

    if(line1_timer >= 1000)//1초마다
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <i2c_lcd_dis_line1+0x34>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f0:	db0f      	blt.n	8001612 <i2c_lcd_dis_line1+0x2e>
    {
    	line1_timer=0;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <i2c_lcd_dis_line1+0x34>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

    	read_date_ds1302(); //ds1302에서 현재 날짜 읽어오기
 80015f8:	f7ff fd7e 	bl	80010f8 <read_date_ds1302>

		move_cursor(1,0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 f88f 	bl	8001722 <move_cursor>
		sprintf(date_buf, "Date:25-04-11");
 8001604:	4905      	ldr	r1, [pc, #20]	; (800161c <i2c_lcd_dis_line1+0x38>)
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <i2c_lcd_dis_line1+0x3c>)
 8001608:	f008 f82e 	bl	8009668 <siprintf>
		lcd_string(date_buf);
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <i2c_lcd_dis_line1+0x3c>)
 800160e:	f000 f873 	bl	80016f8 <lcd_string>
   /*lcd_data(value + '0');
		value++;
		if(value>9)value=0;*/
    }
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200004a4 	.word	0x200004a4
 800161c:	0800b80c 	.word	0x0800b80c
 8001620:	2000047c 	.word	0x2000047c

08001624 <lcd_command>:
	}
#endif
}
*/

void lcd_command(uint8_t command){
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f023 030f 	bic.w	r3, r3, #15
 8001634:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	f043 030c 	orr.w	r3, r3, #12
 8001642:	b2db      	uxtb	r3, r3
 8001644:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	b2db      	uxtb	r3, r3
 800164e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	f043 030c 	orr.w	r3, r3, #12
 8001656:	b2db      	uxtb	r3, r3
 8001658:	72bb      	strb	r3, [r7, #10]
	/*while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
				i2c_buffer, 4, 100)!=HAL_OK){*/
	i2c_write_data(I2C_LCD_ADDRESS,i2c_buffer,4);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2204      	movs	r2, #4
 8001660:	4619      	mov	r1, r3
 8001662:	204e      	movs	r0, #78	; 0x4e
 8001664:	f7ff ff62 	bl	800152c <i2c_write_data>
			//HAL_Delay(1);

	return;
 8001668:	bf00      	nop
}
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <lcd_data>:

void lcd_data(uint8_t data){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f023 030f 	bic.w	r3, r3, #15
 8001680:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f043 030d 	orr.w	r3, r3, #13
 800168e:	b2db      	uxtb	r3, r3
 8001690:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	f043 0309 	orr.w	r3, r3, #9
 8001698:	b2db      	uxtb	r3, r3
 800169a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	f043 030d 	orr.w	r3, r3, #13
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	f043 0309 	orr.w	r3, r3, #9
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	72fb      	strb	r3, [r7, #11]
	/*while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
			i2c_buffer, 4, 100)!=HAL_OK){*/
	i2c_write_data(I2C_LCD_ADDRESS,i2c_buffer,4);
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2204      	movs	r2, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	204e      	movs	r0, #78	; 0x4e
 80016ba:	f7ff ff37 	bl	800152c <i2c_write_data>
		//HAL_Delay(1);

	return;
 80016be:	bf00      	nop
}
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <i2c_lcd_init>:
void i2c_lcd_init(void){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0

	lcd_command(0x33);//초기화
 80016ca:	2033      	movs	r0, #51	; 0x33
 80016cc:	f7ff ffaa 	bl	8001624 <lcd_command>
	lcd_command(0x32);//4bit모드 설정
 80016d0:	2032      	movs	r0, #50	; 0x32
 80016d2:	f7ff ffa7 	bl	8001624 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode 2라인
 80016d6:	2028      	movs	r0, #40	; 0x28
 80016d8:	f7ff ffa4 	bl	8001624 <lcd_command>
	lcd_command(DISPLAY_ON);
 80016dc:	200c      	movs	r0, #12
 80016de:	f7ff ffa1 	bl	8001624 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80016e2:	2006      	movs	r0, #6
 80016e4:	f7ff ff9e 	bl	8001624 <lcd_command>
	lcd_command(CLEAR_DISPLAY);//화면 클리어
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ff9b 	bl	8001624 <lcd_command>
	HAL_Delay(2);
 80016ee:	2002      	movs	r0, #2
 80016f0:	f001 f81c 	bl	800272c <HAL_Delay>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <lcd_string>:
void lcd_string(uint8_t *str)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 8001700:	e006      	b.n	8001710 <lcd_string+0x18>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ffb0 	bl	8001670 <lcd_data>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f4      	bne.n	8001702 <lcd_string+0xa>

}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <move_cursor>:
void move_cursor(uint8_t row, uint8_t column)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	460a      	mov	r2, r1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4613      	mov	r3, r2
 8001730:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	b2da      	uxtb	r2, r3
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	4313      	orrs	r3, r2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff6d 	bl	8001624 <lcd_command>
	return;
 800174a:	bf00      	nop
}
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <led_all_off>:
			GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
#endif
}

void led_all_off(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
#if 1
	  // printf("int %d\n", sizeof(int));   // 4로 찍히는지 확인
	  *(unsigned int *) GPIOB_ODR = 0x00;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <led_all_off+0x14>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
#else  // org
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|
			GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
#endif
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40020414 	.word	0x40020414

0800176c <shift_left_keep_ledon>:
	}
}

// 7 6 5 4 3 <- 2 <-1 <-0  기존 on된것 끄지 말고 유지
void shift_left_keep_ledon()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e00f      	b.n	8001798 <shift_left_keep_ledon+0x2c>
	{
		HAL_GPIO_WritePin(GPIOB, 0x01 << i, 1);
 8001778:	2201      	movs	r2, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <shift_left_keep_ledon+0x44>)
 8001788:	f001 fb04 	bl	8002d94 <HAL_GPIO_WritePin>
		osDelay(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f003 ffaf 	bl	80056f0 <osDelay>
	for (int i=0; i < 8; i++)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3301      	adds	r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b07      	cmp	r3, #7
 800179c:	ddec      	ble.n	8001778 <shift_left_keep_ledon+0xc>
	}
	led_all_off();
 800179e:	f7ff ffd9 	bl	8001754 <led_all_off>
	osDelay(100);
 80017a2:	2064      	movs	r0, #100	; 0x64
 80017a4:	f003 ffa4 	bl	80056f0 <osDelay>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020400 	.word	0x40020400

080017b4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80017bc:	1d39      	adds	r1, r7, #4
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	2201      	movs	r2, #1
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <__io_putchar+0x20>)
 80017c6:	f002 fef8 	bl	80045ba <HAL_UART_Transmit>

  return ch;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20004fe0 	.word	0x20004fe0

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f000 ff64 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f884 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f000 fa74 	bl	8001cd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017e8:	f000 fa48 	bl	8001c7c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80017ec:	f000 fa22 	bl	8001c34 <MX_TIM11_Init>
  MX_TIM2_Init();
 80017f0:	f000 f8e6 	bl	80019c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017f4:	f000 f930 	bl	8001a58 <MX_TIM3_Init>
  MX_TIM5_Init();
 80017f8:	f000 f9a4 	bl	8001b44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  i2c_lcd_init();//lcd init
 80017fc:	f7ff ff63 	bl	80016c6 <i2c_lcd_init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_13 | GPIO_PIN_15, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 8001806:	4823      	ldr	r0, [pc, #140]	; (8001894 <main+0xbc>)
 8001808:	f001 fac4 	bl	8002d94 <HAL_GPIO_WritePin>
  HAL_Delay(10); //dot_matrix init
 800180c:	200a      	movs	r0, #10
 800180e:	f000 ff8d 	bl	800272c <HAL_Delay>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001812:	2201      	movs	r2, #1
 8001814:	4920      	ldr	r1, [pc, #128]	; (8001898 <main+0xc0>)
 8001816:	4821      	ldr	r0, [pc, #132]	; (800189c <main+0xc4>)
 8001818:	f002 ff61 	bl	80046de <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800181c:	4820      	ldr	r0, [pc, #128]	; (80018a0 <main+0xc8>)
 800181e:	f001 ffe1 	bl	80037e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);   // for make delay_us
 8001822:	4820      	ldr	r0, [pc, #128]	; (80018a4 <main+0xcc>)
 8001824:	f001 ffde 	bl	80037e4 <HAL_TIM_Base_Start_IT>
  //ds1302_main();
 //buzzer_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001828:	f003 fe86 	bl	8005538 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 800182c:	481e      	ldr	r0, [pc, #120]	; (80018a8 <main+0xd0>)
 800182e:	f003 ff7a 	bl	8005726 <osMutexNew>
 8001832:	4603      	mov	r3, r0
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <main+0xd4>)
 8001836:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001838:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <main+0xd8>)
 800183a:	2100      	movs	r1, #0
 800183c:	481d      	ldr	r0, [pc, #116]	; (80018b4 <main+0xdc>)
 800183e:	f003 fec5 	bl	80055cc <osThreadNew>
 8001842:	4603      	mov	r3, r0
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <main+0xe0>)
 8001846:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001848:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <main+0xe4>)
 800184a:	2100      	movs	r1, #0
 800184c:	481c      	ldr	r0, [pc, #112]	; (80018c0 <main+0xe8>)
 800184e:	f003 febd 	bl	80055cc <osThreadNew>
 8001852:	4603      	mov	r3, r0
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <main+0xec>)
 8001856:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <main+0xf0>)
 800185a:	2100      	movs	r1, #0
 800185c:	481b      	ldr	r0, [pc, #108]	; (80018cc <main+0xf4>)
 800185e:	f003 feb5 	bl	80055cc <osThreadNew>
 8001862:	4603      	mov	r3, r0
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <main+0xf8>)
 8001866:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <main+0xfc>)
 800186a:	2100      	movs	r1, #0
 800186c:	481a      	ldr	r0, [pc, #104]	; (80018d8 <main+0x100>)
 800186e:	f003 fead 	bl	80055cc <osThreadNew>
 8001872:	4603      	mov	r3, r0
 8001874:	4a19      	ldr	r2, [pc, #100]	; (80018dc <main+0x104>)
 8001876:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <main+0x108>)
 800187a:	2100      	movs	r1, #0
 800187c:	4819      	ldr	r0, [pc, #100]	; (80018e4 <main+0x10c>)
 800187e:	f003 fea5 	bl	80055cc <osThreadNew>
 8001882:	4603      	mov	r3, r0
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <main+0x110>)
 8001886:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001888:	f003 fe7a 	bl	8005580 <osKernelStart>
 800188c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40020400 	.word	0x40020400
 8001898:	20004f90 	.word	0x20004f90
 800189c:	20004fe0 	.word	0x20004fe0
 80018a0:	20004f44 	.word	0x20004f44
 80018a4:	20004f98 	.word	0x20004f98
 80018a8:	0800b980 	.word	0x0800b980
 80018ac:	20005024 	.word	0x20005024
 80018b0:	0800b8cc 	.word	0x0800b8cc
 80018b4:	08001e6d 	.word	0x08001e6d
 80018b8:	20004ea8 	.word	0x20004ea8
 80018bc:	0800b8f0 	.word	0x0800b8f0
 80018c0:	08001e7d 	.word	0x08001e7d
 80018c4:	20004f8c 	.word	0x20004f8c
 80018c8:	0800b914 	.word	0x0800b914
 80018cc:	08001ec1 	.word	0x08001ec1
 80018d0:	20004f94 	.word	0x20004f94
 80018d4:	0800b938 	.word	0x0800b938
 80018d8:	08001efd 	.word	0x08001efd
 80018dc:	20004ef8 	.word	0x20004ef8
 80018e0:	0800b95c 	.word	0x0800b95c
 80018e4:	08001f3d 	.word	0x08001f3d
 80018e8:	20004ef4 	.word	0x20004ef4

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	; 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	; 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 f8f7 	bl	8008aee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <SystemClock_Config+0xcc>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <SystemClock_Config+0xcc>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <SystemClock_Config+0xcc>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <SystemClock_Config+0xd0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <SystemClock_Config+0xd0>)
 8001936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <SystemClock_Config+0xd0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194c:	2301      	movs	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001950:	2310      	movs	r3, #16
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001954:	2302      	movs	r3, #2
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001958:	2300      	movs	r3, #0
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800195c:	2310      	movs	r3, #16
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001960:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001966:	2304      	movs	r3, #4
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800196a:	2304      	movs	r3, #4
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fa40 	bl	8002df8 <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800197e:	f000 fb2b 	bl	8001fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2102      	movs	r1, #2
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fca2 	bl	80032e8 <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019aa:	f000 fb15 	bl	8001fd8 <Error_Handler>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3750      	adds	r7, #80	; 0x50
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019e6:	2253      	movs	r2, #83	; 0x53
 80019e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a04:	4813      	ldr	r0, [pc, #76]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a06:	f001 fe9d 	bl	8003744 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a10:	f000 fae2 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a22:	f002 f965 	bl	8003cf0 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a2c:	f000 fad4 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a3e:	f002 fced 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a48:	f000 fac6 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20004f98 	.word	0x20004f98

08001a58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001a8a:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <MX_TIM3_Init+0xe8>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001a90:	2233      	movs	r2, #51	; 0x33
 8001a92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001a9c:	f240 128f 	movw	r2, #399	; 0x18f
 8001aa0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aae:	4823      	ldr	r0, [pc, #140]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001ab0:	f001 fe48 	bl	8003744 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001aba:	f000 fa8d 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001acc:	f002 f910 	bl	8003cf0 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ad6:	f000 fa7f 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ada:	4818      	ldr	r0, [pc, #96]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001adc:	f001 fee4 	bl	80038a8 <HAL_TIM_PWM_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ae6:	f000 fa77 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	4619      	mov	r1, r3
 8001af8:	4810      	ldr	r0, [pc, #64]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001afa:	f002 fc8f 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b04:	f000 fa68 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001b0c:	23c7      	movs	r3, #199	; 0xc7
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001b20:	f002 f824 	bl	8003b6c <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b2a:	f000 fa55 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM3_Init+0xe4>)
 8001b30:	f000 fafc 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3738      	adds	r7, #56	; 0x38
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20004efc 	.word	0x20004efc
 8001b40:	40000400 	.word	0x40000400

08001b44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <MX_TIM5_Init+0xec>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b7c:	f240 628f 	movw	r2, #1679	; 0x68f
 8001b80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b9c:	4823      	ldr	r0, [pc, #140]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001b9e:	f001 fdd1 	bl	8003744 <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001ba8:	f000 fa16 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481c      	ldr	r0, [pc, #112]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001bba:	f002 f899 	bl	8003cf0 <HAL_TIM_ConfigClockSource>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001bc4:	f000 fa08 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bc8:	4818      	ldr	r0, [pc, #96]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001bca:	f001 fe6d 	bl	80038a8 <HAL_TIM_PWM_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001bd4:	f000 fa00 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4619      	mov	r1, r3
 8001be6:	4811      	ldr	r0, [pc, #68]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001be8:	f002 fc18 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001bf2:	f000 f9f1 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf6:	2360      	movs	r3, #96	; 0x60
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001c0e:	f001 ffad 	bl	8003b6c <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001c18:	f000 f9de 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <MX_TIM5_Init+0xe8>)
 8001c1e:	f000 fa85 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001c22:	bf00      	nop
 8001c24:	3738      	adds	r7, #56	; 0x38
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20004eac 	.word	0x20004eac
 8001c30:	40000c00 	.word	0x40000c00

08001c34 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <MX_TIM11_Init+0x44>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c40:	2253      	movs	r2, #83	; 0x53
 8001c42:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c50:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_TIM11_Init+0x40>)
 8001c60:	f001 fd70 	bl	8003744 <HAL_TIM_Base_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c6a:	f000 f9b5 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004f44 	.word	0x20004f44
 8001c78:	40014800 	.word	0x40014800

08001c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_USART2_UART_Init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f002 fc34 	bl	8004520 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cbe:	f000 f98b 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20004fe0 	.word	0x20004fe0
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b52      	ldr	r3, [pc, #328]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <MX_GPIO_Init+0x18c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001d5c:	4840      	ldr	r0, [pc, #256]	; (8001e60 <MX_GPIO_Init+0x190>)
 8001d5e:	f001 f819 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CLK_74HC595_Pin
 8001d62:	2200      	movs	r2, #0
 8001d64:	f24a 71ff 	movw	r1, #43007	; 0xa7ff
 8001d68:	483e      	ldr	r0, [pc, #248]	; (8001e64 <MX_GPIO_Init+0x194>)
 8001d6a:	f001 f813 	bl	8002d94 <HAL_GPIO_WritePin>
                          |LATCH_74HC595_Pin|SER_74HC595_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_SCL_Pin
                          |GPIO_SDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001d74:	483c      	ldr	r0, [pc, #240]	; (8001e68 <MX_GPIO_Init+0x198>)
 8001d76:	f001 f80d 	bl	8002d94 <HAL_GPIO_WritePin>
                          |DOT3_Pin|DOT2_Pin|DOT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4835      	ldr	r0, [pc, #212]	; (8001e68 <MX_GPIO_Init+0x198>)
 8001d92:	f000 fe63 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001d96:	230f      	movs	r3, #15
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	482f      	ldr	r0, [pc, #188]	; (8001e68 <MX_GPIO_Init+0x198>)
 8001daa:	f000 fe57 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001dae:	2311      	movs	r3, #17
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4827      	ldr	r0, [pc, #156]	; (8001e60 <MX_GPIO_Init+0x190>)
 8001dc4:	f000 fe4a 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CE_DS1302_Pin IO_DS1302_Pin CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin;
 8001dc8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	481f      	ldr	r0, [pc, #124]	; (8001e60 <MX_GPIO_Init+0x190>)
 8001de2:	f000 fe3b 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 CLK_74HC595_Pin
                           LATCH_74HC595_Pin SER_74HC595_Pin PB3 PB4
                           PB5 PB6 PB7 GPIO_SCL_Pin
                           GPIO_SDA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CLK_74HC595_Pin
 8001de6:	f24a 73ff 	movw	r3, #43007	; 0xa7ff
 8001dea:	617b      	str	r3, [r7, #20]
                          |LATCH_74HC595_Pin|SER_74HC595_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_SCL_Pin
                          |GPIO_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <MX_GPIO_Init+0x194>)
 8001e00:	f000 fe2c 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           DOT3_Pin DOT2_Pin DOT1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001e04:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001e08:	617b      	str	r3, [r7, #20]
                          |DOT3_Pin|DOT2_Pin|DOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <MX_GPIO_Init+0x198>)
 8001e1e:	f000 fe1d 	bl	8002a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2105      	movs	r1, #5
 8001e26:	2006      	movs	r0, #6
 8001e28:	f000 fd5c 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e2c:	2006      	movs	r0, #6
 8001e2e:	f000 fd75 	bl	800291c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2105      	movs	r1, #5
 8001e36:	200a      	movs	r0, #10
 8001e38:	f000 fd54 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f000 fd6d 	bl	800291c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2105      	movs	r1, #5
 8001e46:	2028      	movs	r0, #40	; 0x28
 8001e48:	f000 fd4c 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e4c:	2028      	movs	r0, #40	; 0x28
 8001e4e:	f000 fd65 	bl	800291c <HAL_NVIC_EnableIRQ>

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800

08001e6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	 // printf(">> Task01 entered\n");
	  // led_main();
	   osDelay(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f003 fc3b 	bl	80056f0 <osDelay>
 8001e7a:	e7fb      	b.n	8001e74 <StartDefaultTask+0x8>

08001e7c <StartTask02>:



/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  printf(">> Task02 entered\n");
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <StartTask02+0x3c>)
 8001e86:	f007 fb6d 	bl	8009564 <puts>
 //  dotmatrix_main_test();
    if(osMutexWait(myMutex01Handle,1000)== osOK)//lock key
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <StartTask02+0x40>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fccd 	bl	8005832 <osMutexAcquire>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d108      	bne.n	8001eb0 <StartTask02+0x34>
    {
    	i2c_lcd_dis_line0();
 8001e9e:	f7ff fb73 	bl	8001588 <i2c_lcd_dis_line0>
    	i2c_lcd_dis_line1();
 8001ea2:	f7ff fb9f 	bl	80015e4 <i2c_lcd_dis_line1>
    	osMutexRelease(myMutex01Handle); //unlock
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <StartTask02+0x40>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fd0c 	bl	80058c8 <osMutexRelease>
    }
    osDelay(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f003 fc1d 	bl	80056f0 <osDelay>
  {
 8001eb6:	e7e5      	b.n	8001e84 <StartTask02+0x8>
 8001eb8:	0800b864 	.word	0x0800b864
 8001ebc:	20005024 	.word	0x20005024

08001ec0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  printf(">> Task03 entered\n");
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <StartTask03+0x34>)
 8001eca:	f007 fb4b 	bl	8009564 <puts>
    if(osMutexWait(myMutex01Handle,1000)== osOK)//lock key
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <StartTask03+0x38>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fcab 	bl	8005832 <osMutexAcquire>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <StartTask03+0x2c>
    {
    	//i2c_lcd_dis_line1();
    	osMutexRelease(myMutex01Handle); //unlock
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <StartTask03+0x38>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 fcee 	bl	80058c8 <osMutexRelease>
    }
	osDelay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f003 fbff 	bl	80056f0 <osDelay>
  {
 8001ef2:	e7e9      	b.n	8001ec8 <StartTask03+0x8>
 8001ef4:	0800b878 	.word	0x0800b878
 8001ef8:	20005024 	.word	0x20005024

08001efc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {

    if(osMutexWait(myMutex01Handle,1000)== osOK)//lock key
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <StartTask04+0x38>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fc90 	bl	8005832 <osMutexAcquire>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <StartTask04+0x30>
    {
    	printf(">> Task04 entered\n");
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <StartTask04+0x3c>)
 8001f1a:	f007 fb23 	bl	8009564 <puts>
    	shift_left_keep_ledon();
 8001f1e:	f7ff fc25 	bl	800176c <shift_left_keep_ledon>
    	osMutexRelease(myMutex01Handle); //unlock
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <StartTask04+0x38>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fcce 	bl	80058c8 <osMutexRelease>
    }
    osDelay(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f003 fbdf 	bl	80056f0 <osDelay>
    if(osMutexWait(myMutex01Handle,1000)== osOK)//lock key
 8001f32:	e7e7      	b.n	8001f04 <StartTask04+0x8>
 8001f34:	20005024 	.word	0x20005024
 8001f38:	0800b88c 	.word	0x0800b88c

08001f3c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {

	 if(osMutexWait(myMutex01Handle,1000)== osOK)//lock key
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <StartTask05+0x38>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fc70 	bl	8005832 <osMutexAcquire>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <StartTask05+0x30>
	 {
		  printf(">> Task05 entered\n");
 8001f58:	4807      	ldr	r0, [pc, #28]	; (8001f78 <StartTask05+0x3c>)
 8001f5a:	f007 fb03 	bl	8009564 <puts>
		  dotmatrix_main_func();
 8001f5e:	f7ff f873 	bl	8001048 <dotmatrix_main_func>
	    osMutexRelease(myMutex01Handle); //unlock
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <StartTask05+0x38>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fcae 	bl	80058c8 <osMutexRelease>
	 }
    osDelay(1);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f003 fbbf 	bl	80056f0 <osDelay>
	 if(osMutexWait(myMutex01Handle,1000)== osOK)//lock key
 8001f72:	e7e7      	b.n	8001f44 <StartTask05+0x8>
 8001f74:	20005024 	.word	0x20005024
 8001f78:	0800b8a0 	.word	0x0800b8a0

08001f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f8e:	f000 fbad 	bl	80026ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM11) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10e      	bne.n	8001fba <HAL_TIM_PeriodElapsedCallback+0x3e>
	  TIM11_1ms_counter++;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fa4:	6013      	str	r3, [r2, #0]
	  line0_timer++;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fae:	6013      	str	r3, [r2, #0]
	  line1_timer++;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001fb8:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	2000049c 	.word	0x2000049c
 8001fd0:	200004a0 	.word	0x200004a0
 8001fd4:	200004a4 	.word	0x200004a4

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <Error_Handler+0x8>
	...

08001fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_MspInit+0x54>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_MspInit+0x54>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_MspInit+0x54>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_MspInit+0x54>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_MspInit+0x54>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_MspInit+0x54>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	210f      	movs	r1, #15
 8002026:	f06f 0001 	mvn.w	r0, #1
 800202a:	f000 fc5b 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d10e      	bne.n	800206c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800206a:	e052      	b.n	8002112 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <HAL_TIM_Base_MspInit+0xe4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d116      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2105      	movs	r1, #5
 8002096:	201d      	movs	r0, #29
 8002098:	f000 fc24 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800209c:	201d      	movs	r0, #29
 800209e:	f000 fc3d 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 80020a2:	e036      	b.n	8002112 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <HAL_TIM_Base_MspInit+0xe8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d116      	bne.n	80020dc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	2032      	movs	r0, #50	; 0x32
 80020d0:	f000 fc08 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020d4:	2032      	movs	r0, #50	; 0x32
 80020d6:	f000 fc21 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 80020da:	e01a      	b.n	8002112 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_TIM_Base_MspInit+0xec>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d115      	bne.n	8002112 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_TIM_Base_MspInit+0xe0>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2105      	movs	r1, #5
 8002106:	201a      	movs	r0, #26
 8002108:	f000 fbec 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800210c:	201a      	movs	r0, #26
 800210e:	f000 fc05 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40000400 	.word	0x40000400
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40014800 	.word	0x40014800

0800212c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <HAL_TIM_MspPostInit+0xb0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11e      	bne.n	800218c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_TIM_MspPostInit+0xb4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <HAL_TIM_MspPostInit+0xb4>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_TIM_MspPostInit+0xb4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800216a:	2340      	movs	r3, #64	; 0x40
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800217a:	2302      	movs	r3, #2
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <HAL_TIM_MspPostInit+0xb8>)
 8002186:	f000 fc69 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800218a:	e022      	b.n	80021d2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_TIM_MspPostInit+0xbc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d11d      	bne.n	80021d2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_TIM_MspPostInit+0xb4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_TIM_MspPostInit+0xb4>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_TIM_MspPostInit+0xb4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80021b2:	2302      	movs	r3, #2
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021c2:	2302      	movs	r3, #2
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_TIM_MspPostInit+0xb8>)
 80021ce:	f000 fc45 	bl	8002a5c <HAL_GPIO_Init>
}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40000c00 	.word	0x40000c00

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_UART_MspInit+0x94>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d133      	bne.n	8002276 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_UART_MspInit+0x98>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_UART_MspInit+0x98>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_UART_MspInit+0x98>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_UART_MspInit+0x98>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_UART_MspInit+0x98>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_UART_MspInit+0x98>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002246:	230c      	movs	r3, #12
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002256:	2307      	movs	r3, #7
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <HAL_UART_MspInit+0x9c>)
 8002262:	f000 fbfb 	bl	8002a5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2105      	movs	r1, #5
 800226a:	2026      	movs	r0, #38	; 0x26
 800226c:	f000 fb3a 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002270:	2026      	movs	r0, #38	; 0x26
 8002272:	f000 fb53 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40004400 	.word	0x40004400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000

0800228c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	2019      	movs	r0, #25
 80022a2:	f000 fb1f 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022a6:	2019      	movs	r0, #25
 80022a8:	f000 fb38 	bl	800291c <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_InitTick+0xa0>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_InitTick+0xa0>)
 80022b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ba:	6453      	str	r3, [r2, #68]	; 0x44
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_InitTick+0xa0>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c8:	f107 0210 	add.w	r2, r7, #16
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 fa04 	bl	80036e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022d8:	f001 f9ee 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 80022dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_InitTick+0xa4>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0c9b      	lsrs	r3, r3, #18
 80022e8:	3b01      	subs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_InitTick+0xa8>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_InitTick+0xac>)
 80022f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_InitTick+0xa8>)
 80022f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_InitTick+0xa8>)
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_InitTick+0xa8>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_InitTick+0xa8>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800230c:	4809      	ldr	r0, [pc, #36]	; (8002334 <HAL_InitTick+0xa8>)
 800230e:	f001 fa19 	bl	8003744 <HAL_TIM_Base_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002318:	4806      	ldr	r0, [pc, #24]	; (8002334 <HAL_InitTick+0xa8>)
 800231a:	f001 fa63 	bl	80037e4 <HAL_TIM_Base_Start_IT>
 800231e:	4603      	mov	r3, r0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3730      	adds	r7, #48	; 0x30
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	431bde83 	.word	0x431bde83
 8002334:	20005028 	.word	0x20005028
 8002338:	40014400 	.word	0x40014400

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800236c:	2001      	movs	r0, #1
 800236e:	f000 fd2b 	bl	8002dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}

08002376 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800237a:	2010      	movs	r0, #16
 800237c:	f000 fd24 	bl	8002dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800238a:	f001 fae6 	bl	800395a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20005028 	.word	0x20005028

08002398 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800239e:	f001 fadc 	bl	800395a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20004f44 	.word	0x20004f44

080023ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <TIM3_IRQHandler+0x10>)
 80023b2:	f001 fad2 	bl	800395a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20004efc 	.word	0x20004efc

080023c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <USART2_IRQHandler+0x10>)
 80023c6:	f002 f9bb 	bl	8004740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20004fe0 	.word	0x20004fe0

080023d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023dc:	f000 fcf4 	bl	8002dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <TIM5_IRQHandler+0x10>)
 80023ea:	f001 fab6 	bl	800395a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20004eac 	.word	0x20004eac

080023f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	return 1;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_kill>:

int _kill(int pid, int sig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002412:	f006 fa3b 	bl	800888c <__errno>
 8002416:	4603      	mov	r3, r0
 8002418:	2216      	movs	r2, #22
 800241a:	601a      	str	r2, [r3, #0]
	return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_exit>:

void _exit (int status)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffe7 	bl	8002408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800243a:	e7fe      	b.n	800243a <_exit+0x12>

0800243c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e00a      	b.n	8002464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800244e:	f3af 8000 	nop.w
 8002452:	4601      	mov	r1, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf0      	blt.n	800244e <_read+0x12>
	}

return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e009      	b.n	800249c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f98f 	bl	80017b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf1      	blt.n	8002488 <_write+0x12>
	}
	return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_close>:

int _close(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	return -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d6:	605a      	str	r2, [r3, #4]
	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_isatty>:

int _isatty(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return 1;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f006 f9a0 	bl	800888c <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20020000 	.word	0x20020000
 8002578:	00000400 	.word	0x00000400
 800257c:	200004ac 	.word	0x200004ac
 8002580:	200053e8 	.word	0x200053e8

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <SystemInit+0x20>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <SystemInit+0x20>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <HAL_UART_RxCpltCallback>:
  * 예) comportmaster로 부터 1char를 수신하면 HAL_UART_RxCpltCallback으로 진입
  *    9600bps인 경우  HAL_UART_RxCpltCallback를 수행 후 1ms이내에는 빠져 나가야 한다.
  *   115200bps                                      86us
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	volatile static int i=0;

	if (huart == &huart2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_UART_RxCpltCallback+0x94>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d13d      	bne.n	8002634 <HAL_UART_RxCpltCallback+0x8c>
	{
		if (rx_data == '\n' )
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_UART_RxCpltCallback+0x98>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b0a      	cmp	r3, #10
 80025be:	d122      	bne.n	8002606 <HAL_UART_RxCpltCallback+0x5e>
		{
			rx_buff[rear++][i] = '\0';
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_UART_RxCpltCallback+0x9c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	1c53      	adds	r3, r2, #1
 80025c6:	491f      	ldr	r1, [pc, #124]	; (8002644 <HAL_UART_RxCpltCallback+0x9c>)
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_UART_RxCpltCallback+0xa0>)
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	481f      	ldr	r0, [pc, #124]	; (800264c <HAL_UART_RxCpltCallback+0xa4>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4403      	add	r3, r0
 80025da:	440b      	add	r3, r1
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
			rear %= COMMAND_NUMBER;  // rear : 0~9
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_UART_RxCpltCallback+0x9c>)
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_UART_RxCpltCallback+0xa8>)
 80025e6:	fb83 2301 	smull	r2, r3, r3, r1
 80025ea:	10da      	asrs	r2, r3, #3
 80025ec:	17cb      	asrs	r3, r1, #31
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	1aca      	subs	r2, r1, r3
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_UART_RxCpltCallback+0x9c>)
 80025fc:	601a      	str	r2, [r3, #0]
			i=0;   // 다음 string을 저장하기 위한 1차원 index값을 0으로
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_UART_RxCpltCallback+0xa0>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e011      	b.n	800262a <HAL_UART_RxCpltCallback+0x82>
			// !!!! rx_buff queue full check 하는 logic 추가
		}
		else
		{
			rx_buff[rear][i++] = rx_data;
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_UART_RxCpltCallback+0x9c>)
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_UART_RxCpltCallback+0xa0>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	1c53      	adds	r3, r2, #1
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <HAL_UART_RxCpltCallback+0xa0>)
 8002612:	6003      	str	r3, [r0, #0]
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_UART_RxCpltCallback+0x98>)
 8002616:	781c      	ldrb	r4, [r3, #0]
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <HAL_UART_RxCpltCallback+0xa4>)
 800261a:	460b      	mov	r3, r1
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4403      	add	r3, r0
 8002624:	4413      	add	r3, r2
 8002626:	4622      	mov	r2, r4
 8002628:	701a      	strb	r2, [r3, #0]
			// COMMAND_LENGTH 를 check하는 logic 추가
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);   // 주의: 반드시 집어 넣어야 다음 INT가 발생
 800262a:	2201      	movs	r2, #1
 800262c:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_UART_RxCpltCallback+0x98>)
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <HAL_UART_RxCpltCallback+0x94>)
 8002630:	f002 f855 	bl	80046de <HAL_UART_Receive_IT>
	}
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}
 800263c:	20004fe0 	.word	0x20004fe0
 8002640:	20004f90 	.word	0x20004f90
 8002644:	200004b0 	.word	0x200004b0
 8002648:	200004b4 	.word	0x200004b4
 800264c:	20005070 	.word	0x20005070
 8002650:	66666667 	.word	0x66666667

08002654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800268c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800265a:	490e      	ldr	r1, [pc, #56]	; (8002694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002670:	4c0b      	ldr	r4, [pc, #44]	; (80026a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800267e:	f7ff ff81 	bl	8002584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002682:	f006 f9ff 	bl	8008a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002686:	f7ff f8a7 	bl	80017d8 <main>
  bx  lr    
 800268a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800268c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	200002ac 	.word	0x200002ac
  ldr r2, =_sidata
 8002698:	0800bd9c 	.word	0x0800bd9c
  ldr r2, =_sbss
 800269c:	200002ac 	.word	0x200002ac
  ldr r4, =_ebss
 80026a0:	200053e8 	.word	0x200053e8

080026a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_Init+0x40>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_Init+0x40>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_Init+0x40>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f8fc 	bl	80028ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f7ff fdd8 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff fc82 	bl	8001fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	200000d4 	.word	0x200000d4
 8002710:	20005394 	.word	0x20005394

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20005394 	.word	0x20005394

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200000d4 	.word	0x200000d4

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff4c 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f6:	f7ff ff61 	bl	80027bc <__NVIC_GetPriorityGrouping>
 80028fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f7ff ffb1 	bl	8002868 <NVIC_EncodePriority>
 8002906:	4602      	mov	r2, r0
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff80 	bl	8002814 <__NVIC_SetPriority>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff54 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002946:	f7ff fee5 	bl	8002714 <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d008      	beq.n	800296a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e052      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0216 	bic.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_DMA_Abort+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	e013      	b.n	80029e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029bc:	f7ff feaa 	bl	8002714 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d90c      	bls.n	80029e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e015      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e4      	bne.n	80029bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00c      	b.n	8002a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2205      	movs	r2, #5
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e159      	b.n	8002d2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f040 8148 	bne.w	8002d26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d005      	beq.n	8002aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d130      	bne.n	8002b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a2 	beq.w	8002d26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfe:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <HAL_GPIO_Init+0x2f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x202>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_GPIO_Init+0x2f4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x1fe>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a47      	ldr	r2, [pc, #284]	; (8002d54 <HAL_GPIO_Init+0x2f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x1fa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <HAL_GPIO_Init+0x2fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x1f6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a45      	ldr	r2, [pc, #276]	; (8002d5c <HAL_GPIO_Init+0x300>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x1f2>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c4e:	2307      	movs	r3, #7
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f002 0203 	and.w	r2, r2, #3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	; (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	f67f aea2 	bls.w	8002a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe f862 	bl	8000eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40013c00 	.word	0x40013c00

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e264      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d075      	beq.n	8002f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e16:	4ba3      	ldr	r3, [pc, #652]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4ba0      	ldr	r3, [pc, #640]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d112      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b9d      	ldr	r3, [pc, #628]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	4b99      	ldr	r3, [pc, #612]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x108>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d157      	bne.n	8002f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e23f      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x74>
 8002e5e:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a90      	ldr	r2, [pc, #576]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a8a      	ldr	r2, [pc, #552]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e90:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a83      	ldr	r2, [pc, #524]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a80      	ldr	r2, [pc, #512]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fc30 	bl	8002714 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7ff fc2c 	bl	8002714 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e204      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xc0>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fc1c 	bl	8002714 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7ff fc18 	bl	8002714 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1f0      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xe8>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0e:	4b65      	ldr	r3, [pc, #404]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b62      	ldr	r3, [pc, #392]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1c4      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b56      	ldr	r3, [pc, #344]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4952      	ldr	r1, [pc, #328]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <HAL_RCC_OscConfig+0x2b0>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7ff fbd1 	bl	8002714 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f76:	f7ff fbcd 	bl	8002714 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1a5      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4940      	ldr	r1, [pc, #256]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_RCC_OscConfig+0x2b0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7ff fbb0 	bl	8002714 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7ff fbac 	bl	8002714 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e184      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d030      	beq.n	8003044 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCC_OscConfig+0x2b4>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7ff fb90 	bl	8002714 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7ff fb8c 	bl	8002714 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e164      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x200>
 8003016:	e015      	b.n	8003044 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_RCC_OscConfig+0x2b4>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7ff fb79 	bl	8002714 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7ff fb75 	bl	8002714 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e14d      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a0 	beq.w	8003192 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x2b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d121      	bne.n	80030d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_OscConfig+0x2b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_RCC_OscConfig+0x2b8>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7ff fb3b 	bl	8002714 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e011      	b.n	80030c6 <HAL_RCC_OscConfig+0x2ce>
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	42470000 	.word	0x42470000
 80030ac:	42470e80 	.word	0x42470e80
 80030b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7ff fb2e 	bl	8002714 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e106      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_OscConfig+0x4e4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d106      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
 80030da:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a80      	ldr	r2, [pc, #512]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	e01c      	b.n	8003122 <HAL_RCC_OscConfig+0x32a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d10c      	bne.n	800310a <HAL_RCC_OscConfig+0x312>
 80030f0:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	6713      	str	r3, [r2, #112]	; 0x70
 80030fc:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a77      	ldr	r2, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	e00b      	b.n	8003122 <HAL_RCC_OscConfig+0x32a>
 800310a:	4b75      	ldr	r3, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a74      	ldr	r2, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
 8003116:	4b72      	ldr	r3, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a71      	ldr	r2, [pc, #452]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d015      	beq.n	8003156 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7ff faf3 	bl	8002714 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7ff faef 	bl	8002714 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0c5      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ee      	beq.n	8003132 <HAL_RCC_OscConfig+0x33a>
 8003154:	e014      	b.n	8003180 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003156:	f7ff fadd 	bl	8002714 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7ff fad9 	bl	8002714 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0af      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003174:	4b5a      	ldr	r3, [pc, #360]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ee      	bne.n	800315e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a55      	ldr	r2, [pc, #340]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 800318c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 809b 	beq.w	80032d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d05c      	beq.n	8003262 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d141      	bne.n	8003234 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x4ec>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7ff faad 	bl	8002714 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031be:	f7ff faa9 	bl	8002714 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e081      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	019b      	lsls	r3, r3, #6
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	061b      	lsls	r3, r3, #24
 8003200:	4937      	ldr	r1, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x4ec>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7ff fa82 	bl	8002714 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7ff fa7e 	bl	8002714 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e056      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x41c>
 8003232:	e04e      	b.n	80032d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x4ec>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7ff fa6b 	bl	8002714 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003242:	f7ff fa67 	bl	8002714 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e03f      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003254:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x44a>
 8003260:	e037      	b.n	80032d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e032      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d028      	beq.n	80032ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d121      	bne.n	80032ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d11a      	bne.n	80032ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d111      	bne.n	80032ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40007000 	.word	0x40007000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470060 	.word	0x42470060

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90c      	bls.n	8003324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	494d      	ldr	r1, [pc, #308]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e067      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4934      	ldr	r1, [pc, #208]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7ff f99c 	bl	8002714 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7ff f998 	bl	8002714 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20c      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e032      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4916      	ldr	r1, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490e      	ldr	r1, [pc, #56]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f821 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003472:	4602      	mov	r2, r0
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	490a      	ldr	r1, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fefc 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	0800b990 	.word	0x0800b990
 80034ac:	200000cc 	.word	0x200000cc
 80034b0:	200000d0 	.word	0x200000d0

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x40>
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f200 80bd 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x34>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x3a>
 80034e6:	e0b7      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034ea:	60bb      	str	r3, [r7, #8]
       break;
 80034ec:	e0b7      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034f0:	60bb      	str	r3, [r7, #8]
      break;
 80034f2:	e0b4      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04d      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	461a      	mov	r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	ea02 0800 	and.w	r8, r2, r0
 8003522:	ea03 0901 	and.w	r9, r3, r1
 8003526:	4640      	mov	r0, r8
 8003528:	4649      	mov	r1, r9
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003538:	0142      	lsls	r2, r0, #5
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	ebb0 0008 	subs.w	r0, r0, r8
 8003542:	eb61 0109 	sbc.w	r1, r1, r9
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	018b      	lsls	r3, r1, #6
 8003550:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003554:	0182      	lsls	r2, r0, #6
 8003556:	1a12      	subs	r2, r2, r0
 8003558:	eb63 0301 	sbc.w	r3, r3, r1
 800355c:	f04f 0000 	mov.w	r0, #0
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	00d9      	lsls	r1, r3, #3
 8003566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800356a:	00d0      	lsls	r0, r2, #3
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	eb12 0208 	adds.w	r2, r2, r8
 8003574:	eb43 0309 	adc.w	r3, r3, r9
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0259      	lsls	r1, r3, #9
 8003582:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003586:	0250      	lsls	r0, r2, #9
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f7fd fb0e 	bl	8000bb8 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e04a      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	461a      	mov	r2, r3
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	ea02 0400 	and.w	r4, r2, r0
 80035be:	ea03 0501 	and.w	r5, r3, r1
 80035c2:	4620      	mov	r0, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	014b      	lsls	r3, r1, #5
 80035d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035d4:	0142      	lsls	r2, r0, #5
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	1b00      	subs	r0, r0, r4
 80035dc:	eb61 0105 	sbc.w	r1, r1, r5
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	018b      	lsls	r3, r1, #6
 80035ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ee:	0182      	lsls	r2, r0, #6
 80035f0:	1a12      	subs	r2, r2, r0
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	00d9      	lsls	r1, r3, #3
 8003600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003604:	00d0      	lsls	r0, r2, #3
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	1912      	adds	r2, r2, r4
 800360c:	eb45 0303 	adc.w	r3, r5, r3
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	0299      	lsls	r1, r3, #10
 800361a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800361e:	0290      	lsls	r0, r2, #10
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f7fd fac2 	bl	8000bb8 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	60bb      	str	r3, [r7, #8]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800365a:	60bb      	str	r3, [r7, #8]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	68bb      	ldr	r3, [r7, #8]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	200000cc 	.word	0x200000cc

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	0800b9a0 	.word	0x0800b9a0

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffdc 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0b5b      	lsrs	r3, r3, #13
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800b9a0 	.word	0x0800b9a0

080036e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	220f      	movs	r2, #15
 80036ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_RCC_GetClockConfig+0x5c>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCC_GetClockConfig+0x5c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_GetClockConfig+0x5c>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	08db      	lsrs	r3, r3, #3
 800371a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_RCC_GetClockConfig+0x60>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0207 	and.w	r2, r3, #7
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40023c00 	.word	0x40023c00

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fc66 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fba4 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e044      	b.n	8003886 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xb0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d013      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_TIM_Base_Start_IT+0xb4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_TIM_Base_Start_IT+0xb8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b06      	cmp	r3, #6
 8003860:	d010      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	e007      	b.n	8003884 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40014000 	.word	0x40014000

080038a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e041      	b.n	800393e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f839 	bl	8003946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 faf2 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d122      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d11b      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f06f 0202 	mvn.w	r2, #2
 8003986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa78 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 80039a2:	e005      	b.n	80039b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fa6a 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa7b 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d122      	bne.n	8003a0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d11b      	bne.n	8003a0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f06f 0204 	mvn.w	r2, #4
 80039da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa4e 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 80039f6:	e005      	b.n	8003a04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa40 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa51 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d122      	bne.n	8003a5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11b      	bne.n	8003a5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f06f 0208 	mvn.w	r2, #8
 8003a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2204      	movs	r2, #4
 8003a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa24 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003a4a:	e005      	b.n	8003a58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa16 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa27 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d122      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d11b      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0210 	mvn.w	r2, #16
 8003a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2208      	movs	r2, #8
 8003a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f9fa 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003a9e:	e005      	b.n	8003aac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9ec 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9fd 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10e      	bne.n	8003ade <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0201 	mvn.w	r2, #1
 8003ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fe fa4f 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d10e      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d107      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fd01 	bl	800450c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d10e      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d107      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f9c2 	bl	8003eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d10e      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d107      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0220 	mvn.w	r2, #32
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fccb 	bl	80044f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0ae      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	f200 809f 	bhi.w	8003cd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bd5 	.word	0x08003bd5
 8003ba4:	08003cd9 	.word	0x08003cd9
 8003ba8:	08003cd9 	.word	0x08003cd9
 8003bac:	08003cd9 	.word	0x08003cd9
 8003bb0:	08003c15 	.word	0x08003c15
 8003bb4:	08003cd9 	.word	0x08003cd9
 8003bb8:	08003cd9 	.word	0x08003cd9
 8003bbc:	08003cd9 	.word	0x08003cd9
 8003bc0:	08003c57 	.word	0x08003c57
 8003bc4:	08003cd9 	.word	0x08003cd9
 8003bc8:	08003cd9 	.word	0x08003cd9
 8003bcc:	08003cd9 	.word	0x08003cd9
 8003bd0:	08003c97 	.word	0x08003c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f9f8 	bl	8003fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0208 	orr.w	r2, r2, #8
 8003bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0204 	bic.w	r2, r2, #4
 8003bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6999      	ldr	r1, [r3, #24]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	619a      	str	r2, [r3, #24]
      break;
 8003c12:	e064      	b.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fa3e 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]
      break;
 8003c54:	e043      	b.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa89 	bl	8004174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0208 	orr.w	r2, r2, #8
 8003c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0204 	bic.w	r2, r2, #4
 8003c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
      break;
 8003c94:	e023      	b.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fad3 	bl	8004248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69d9      	ldr	r1, [r3, #28]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	021a      	lsls	r2, r3, #8
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	61da      	str	r2, [r3, #28]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x1c>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0b4      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x186>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d44:	d03e      	beq.n	8003dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4a:	f200 8087 	bhi.w	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	f000 8086 	beq.w	8003e62 <HAL_TIM_ConfigClockSource+0x172>
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d87f      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d5c:	2b70      	cmp	r3, #112	; 0x70
 8003d5e:	d01a      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0xa6>
 8003d60:	2b70      	cmp	r3, #112	; 0x70
 8003d62:	d87b      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d050      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x11a>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d877      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b50      	cmp	r3, #80	; 0x50
 8003d6e:	d03c      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0xfa>
 8003d70:	2b50      	cmp	r3, #80	; 0x50
 8003d72:	d873      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d058      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x13a>
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d86f      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b30      	cmp	r3, #48	; 0x30
 8003d7e:	d064      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x15a>
 8003d80:	2b30      	cmp	r3, #48	; 0x30
 8003d82:	d86b      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d060      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d867      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d05c      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d05a      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	e062      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f000 fb19 	bl	80043dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	609a      	str	r2, [r3, #8]
      break;
 8003dc2:	e04f      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f000 fb02 	bl	80043dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de6:	609a      	str	r2, [r3, #8]
      break;
 8003de8:	e03c      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f000 fa76 	bl	80042e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2150      	movs	r1, #80	; 0x50
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 facf 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e08:	e02c      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 fa95 	bl	8004346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2160      	movs	r1, #96	; 0x60
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fabf 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e28:	e01c      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 fa56 	bl	80042e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 faaf 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e48:	e00c      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f000 faa6 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e003      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e60:	e000      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <TIM_Base_SetConfig+0xe8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <TIM_Base_SetConfig+0xec>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <TIM_Base_SetConfig+0xf0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01b      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d017      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <TIM_Base_SetConfig+0xe8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <TIM_Base_SetConfig+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00f      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <TIM_Base_SetConfig+0xf0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <TIM_Base_SetConfig+0xf4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <TIM_Base_SetConfig+0xf8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <TIM_Base_SetConfig+0xfc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d108      	bne.n	8003f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10c      	bne.n	8004046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0308 	bic.w	r3, r3, #8
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40010000 	.word	0x40010000

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d113      	bne.n	8004148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000

08004174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d113      	bne.n	800421e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010000 	.word	0x40010000

08004248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <TIM_OC4_SetConfig+0x9c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000

080042e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004346:	b480      	push	{r7}
 8004348:	b087      	sub	sp, #28
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0210 	bic.w	r2, r3, #16
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	031b      	lsls	r3, r3, #12
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f043 0307 	orr.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	431a      	orrs	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4313      	orrs	r3, r2
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e050      	b.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d013      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a16      	ldr	r2, [pc, #88]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40014000 	.word	0x40014000

080044f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e03f      	b.n	80045b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fd fe50 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fddb 	bl	8005120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08a      	sub	sp, #40	; 0x28
 80045be:	af02      	add	r7, sp, #8
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d17c      	bne.n	80046d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_UART_Transmit+0x2c>
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e075      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Transmit+0x3e>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e06e      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2221      	movs	r2, #33	; 0x21
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800460e:	f7fe f881 	bl	8002714 <HAL_GetTick>
 8004612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d108      	bne.n	800463c <HAL_UART_Transmit+0x82>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e003      	b.n	8004644 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800464c:	e02a      	b.n	80046a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fb1f 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e036      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3302      	adds	r3, #2
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e007      	b.n	8004696 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	3301      	adds	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1cf      	bne.n	800464e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2140      	movs	r1, #64	; 0x40
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 faef 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e006      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d11d      	bne.n	8004734 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_UART_Receive_IT+0x26>
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e016      	b.n	8004736 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_UART_Receive_IT+0x38>
 8004712:	2302      	movs	r3, #2
 8004714:	e00f      	b.n	8004736 <HAL_UART_Receive_IT+0x58>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	461a      	mov	r2, r3
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fb24 	bl	8004d78 <UART_Start_Receive_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	e000      	b.n	8004736 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b0ba      	sub	sp, #232	; 0xe8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800477e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_UART_IRQHandler+0x66>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fc03 	bl	8004faa <UART_Receive_IT>
      return;
 80047a4:	e256      	b.n	8004c54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80de 	beq.w	800496c <HAL_UART_IRQHandler+0x22c>
 80047b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80d1 	beq.w	800496c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_UART_IRQHandler+0xae>
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_UART_IRQHandler+0xd2>
 80047fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0202 	orr.w	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <HAL_UART_IRQHandler+0xf6>
 800481e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f043 0204 	orr.w	r2, r3, #4
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d011      	beq.n	8004866 <HAL_UART_IRQHandler+0x126>
 8004842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800484e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0208 	orr.w	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 81ed 	beq.w	8004c4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_UART_IRQHandler+0x14e>
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fb8e 	bl	8004faa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <HAL_UART_IRQHandler+0x17a>
 80048b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d04f      	beq.n	800495a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa96 	bl	8004dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d141      	bne.n	8004952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1d9      	bne.n	80048ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d013      	beq.n	800494a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	4a7d      	ldr	r2, [pc, #500]	; (8004b1c <HAL_UART_IRQHandler+0x3dc>)
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe f872 	bl	8002a18 <HAL_DMA_Abort_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004944:	4610      	mov	r0, r2
 8004946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	e00e      	b.n	8004968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f990 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	e00a      	b.n	8004968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f98c 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	e006      	b.n	8004968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f988 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004966:	e170      	b.n	8004c4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	bf00      	nop
    return;
 800496a:	e16e      	b.n	8004c4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	2b01      	cmp	r3, #1
 8004972:	f040 814a 	bne.w	8004c0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8143 	beq.w	8004c0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 813c 	beq.w	8004c0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	f040 80b4 	bne.w	8004b20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8140 	beq.w	8004c4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049d6:	429a      	cmp	r2, r3
 80049d8:	f080 8139 	bcs.w	8004c4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ee:	f000 8088 	beq.w	8004b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1d9      	bne.n	80049f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e1      	bne.n	8004a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3314      	adds	r3, #20
 8004a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e3      	bne.n	8004a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad2:	f023 0310 	bic.w	r3, r3, #16
 8004ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ae4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e3      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd ff1b 	bl	8002938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8b6 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b18:	e099      	b.n	8004c4e <HAL_UART_IRQHandler+0x50e>
 8004b1a:	bf00      	nop
 8004b1c:	08004eb3 	.word	0x08004eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 808b 	beq.w	8004c52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8086 	beq.w	8004c52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e3      	bne.n	8004b46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004be8:	61fa      	str	r2, [r7, #28]
 8004bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	69b9      	ldr	r1, [r7, #24]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e3      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f83e 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c08:	e023      	b.n	8004c52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_UART_IRQHandler+0x4ea>
 8004c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f959 	bl	8004eda <UART_Transmit_IT>
    return;
 8004c28:	e014      	b.n	8004c54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <HAL_UART_IRQHandler+0x514>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f999 	bl	8004f7a <UART_EndTransmit_IT>
    return;
 8004c48:	e004      	b.n	8004c54 <HAL_UART_IRQHandler+0x514>
    return;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <HAL_UART_IRQHandler+0x514>
      return;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_UART_IRQHandler+0x514>
      return;
 8004c52:	bf00      	nop
  }
}
 8004c54:	37e8      	adds	r7, #232	; 0xe8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b090      	sub	sp, #64	; 0x40
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cac:	e050      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d04c      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cbc:	f7fd fd2a 	bl	8002714 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d241      	bcs.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cec:	637a      	str	r2, [r7, #52]	; 0x34
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d20:	623a      	str	r2, [r7, #32]
 8004d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e00f      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d09f      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3740      	adds	r7, #64	; 0x40
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2222      	movs	r2, #34	; 0x22
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dbc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0220 	orr.w	r2, r2, #32
 8004ddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b095      	sub	sp, #84	; 0x54
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e14:	643a      	str	r2, [r7, #64]	; 0x40
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d119      	bne.n	8004e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e84:	61ba      	str	r2, [r7, #24]
 8004e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ea6:	bf00      	nop
 8004ea8:	3754      	adds	r7, #84	; 0x54
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fecf 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b21      	cmp	r3, #33	; 0x21
 8004eec:	d13e      	bne.n	8004f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	d114      	bne.n	8004f22 <UART_Transmit_IT+0x48>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d110      	bne.n	8004f22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	621a      	str	r2, [r3, #32]
 8004f20:	e008      	b.n	8004f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6211      	str	r1, [r2, #32]
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4619      	mov	r1, r3
 8004f42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10f      	bne.n	8004f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
  }
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fe5e 	bl	8004c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08c      	sub	sp, #48	; 0x30
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b22      	cmp	r3, #34	; 0x22
 8004fbc:	f040 80ab 	bne.w	8005116 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc8:	d117      	bne.n	8004ffa <UART_Receive_IT+0x50>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d113      	bne.n	8004ffa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	1c9a      	adds	r2, r3, #2
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff8:	e026      	b.n	8005048 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500c:	d007      	beq.n	800501e <UART_Receive_IT+0x74>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <UART_Receive_IT+0x82>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e008      	b.n	800503e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005038:	b2da      	uxtb	r2, r3
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4619      	mov	r1, r3
 8005056:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005058:	2b00      	cmp	r3, #0
 800505a:	d15a      	bne.n	8005112 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0220 	bic.w	r2, r2, #32
 800506a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800507a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	2b01      	cmp	r3, #1
 800509a:	d135      	bne.n	8005108 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 0310 	bic.w	r3, r3, #16
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c2:	623a      	str	r2, [r7, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d10a      	bne.n	80050fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fdbf 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
 8005106:	e002      	b.n	800510e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fd fa4d 	bl	80025a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e002      	b.n	8005118 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3730      	adds	r7, #48	; 0x30
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	b09f      	sub	sp, #124	; 0x7c
 8005126:	af00      	add	r7, sp, #0
 8005128:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	68d9      	ldr	r1, [r3, #12]
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	ea40 0301 	orr.w	r3, r0, r1
 8005140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	431a      	orrs	r2, r3
 800514c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	431a      	orrs	r2, r3
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4313      	orrs	r3, r2
 8005158:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800515a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005164:	f021 010c 	bic.w	r1, r1, #12
 8005168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800516e:	430b      	orrs	r3, r1
 8005170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800517c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517e:	6999      	ldr	r1, [r3, #24]
 8005180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	ea40 0301 	orr.w	r3, r0, r1
 8005188:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800518a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4bc5      	ldr	r3, [pc, #788]	; (80054a4 <UART_SetConfig+0x384>)
 8005190:	429a      	cmp	r2, r3
 8005192:	d004      	beq.n	800519e <UART_SetConfig+0x7e>
 8005194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4bc3      	ldr	r3, [pc, #780]	; (80054a8 <UART_SetConfig+0x388>)
 800519a:	429a      	cmp	r2, r3
 800519c:	d103      	bne.n	80051a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800519e:	f7fe fa8b 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 80051a2:	6778      	str	r0, [r7, #116]	; 0x74
 80051a4:	e002      	b.n	80051ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051a6:	f7fe fa73 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80051aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b4:	f040 80b6 	bne.w	8005324 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ba:	461c      	mov	r4, r3
 80051bc:	f04f 0500 	mov.w	r5, #0
 80051c0:	4622      	mov	r2, r4
 80051c2:	462b      	mov	r3, r5
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	6439      	str	r1, [r7, #64]	; 0x40
 80051c8:	415b      	adcs	r3, r3
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
 80051cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051d0:	1912      	adds	r2, r2, r4
 80051d2:	eb45 0303 	adc.w	r3, r5, r3
 80051d6:	f04f 0000 	mov.w	r0, #0
 80051da:	f04f 0100 	mov.w	r1, #0
 80051de:	00d9      	lsls	r1, r3, #3
 80051e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e4:	00d0      	lsls	r0, r2, #3
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	1911      	adds	r1, r2, r4
 80051ec:	6639      	str	r1, [r7, #96]	; 0x60
 80051ee:	416b      	adcs	r3, r5
 80051f0:	667b      	str	r3, [r7, #100]	; 0x64
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005200:	415b      	adcs	r3, r3
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005208:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800520c:	f7fb fcd4 	bl	8000bb8 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4ba5      	ldr	r3, [pc, #660]	; (80054ac <UART_SetConfig+0x38c>)
 8005216:	fba3 2302 	umull	r2, r3, r3, r2
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	011e      	lsls	r6, r3, #4
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	461c      	mov	r4, r3
 8005222:	f04f 0500 	mov.w	r5, #0
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	1891      	adds	r1, r2, r2
 800522c:	6339      	str	r1, [r7, #48]	; 0x30
 800522e:	415b      	adcs	r3, r3
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
 8005232:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005236:	1912      	adds	r2, r2, r4
 8005238:	eb45 0303 	adc.w	r3, r5, r3
 800523c:	f04f 0000 	mov.w	r0, #0
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	00d9      	lsls	r1, r3, #3
 8005246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800524a:	00d0      	lsls	r0, r2, #3
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	1911      	adds	r1, r2, r4
 8005252:	65b9      	str	r1, [r7, #88]	; 0x58
 8005254:	416b      	adcs	r3, r5
 8005256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	461a      	mov	r2, r3
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	1891      	adds	r1, r2, r2
 8005264:	62b9      	str	r1, [r7, #40]	; 0x28
 8005266:	415b      	adcs	r3, r3
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800526e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005272:	f7fb fca1 	bl	8000bb8 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b8c      	ldr	r3, [pc, #560]	; (80054ac <UART_SetConfig+0x38c>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a87      	ldr	r2, [pc, #540]	; (80054ac <UART_SetConfig+0x38c>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800529c:	441e      	add	r6, r3
 800529e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a0:	4618      	mov	r0, r3
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	1894      	adds	r4, r2, r2
 80052ac:	623c      	str	r4, [r7, #32]
 80052ae:	415b      	adcs	r3, r3
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
 80052b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052b6:	1812      	adds	r2, r2, r0
 80052b8:	eb41 0303 	adc.w	r3, r1, r3
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	f04f 0500 	mov.w	r5, #0
 80052c4:	00dd      	lsls	r5, r3, #3
 80052c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052ca:	00d4      	lsls	r4, r2, #3
 80052cc:	4622      	mov	r2, r4
 80052ce:	462b      	mov	r3, r5
 80052d0:	1814      	adds	r4, r2, r0
 80052d2:	653c      	str	r4, [r7, #80]	; 0x50
 80052d4:	414b      	adcs	r3, r1
 80052d6:	657b      	str	r3, [r7, #84]	; 0x54
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	61b9      	str	r1, [r7, #24]
 80052e6:	415b      	adcs	r3, r3
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052f2:	f7fb fc61 	bl	8000bb8 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4b6c      	ldr	r3, [pc, #432]	; (80054ac <UART_SetConfig+0x38c>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	2164      	movs	r1, #100	; 0x64
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	3332      	adds	r3, #50	; 0x32
 800530e:	4a67      	ldr	r2, [pc, #412]	; (80054ac <UART_SetConfig+0x38c>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	f003 0207 	and.w	r2, r3, #7
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4432      	add	r2, r6
 8005320:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005322:	e0b9      	b.n	8005498 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005326:	461c      	mov	r4, r3
 8005328:	f04f 0500 	mov.w	r5, #0
 800532c:	4622      	mov	r2, r4
 800532e:	462b      	mov	r3, r5
 8005330:	1891      	adds	r1, r2, r2
 8005332:	6139      	str	r1, [r7, #16]
 8005334:	415b      	adcs	r3, r3
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800533c:	1912      	adds	r2, r2, r4
 800533e:	eb45 0303 	adc.w	r3, r5, r3
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	00d9      	lsls	r1, r3, #3
 800534c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005350:	00d0      	lsls	r0, r2, #3
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	eb12 0804 	adds.w	r8, r2, r4
 800535a:	eb43 0905 	adc.w	r9, r3, r5
 800535e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4618      	mov	r0, r3
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	008b      	lsls	r3, r1, #2
 8005372:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005376:	0082      	lsls	r2, r0, #2
 8005378:	4640      	mov	r0, r8
 800537a:	4649      	mov	r1, r9
 800537c:	f7fb fc1c 	bl	8000bb8 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4b49      	ldr	r3, [pc, #292]	; (80054ac <UART_SetConfig+0x38c>)
 8005386:	fba3 2302 	umull	r2, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	011e      	lsls	r6, r3, #4
 800538e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005390:	4618      	mov	r0, r3
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	1894      	adds	r4, r2, r2
 800539c:	60bc      	str	r4, [r7, #8]
 800539e:	415b      	adcs	r3, r3
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a6:	1812      	adds	r2, r2, r0
 80053a8:	eb41 0303 	adc.w	r3, r1, r3
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	f04f 0500 	mov.w	r5, #0
 80053b4:	00dd      	lsls	r5, r3, #3
 80053b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053ba:	00d4      	lsls	r4, r2, #3
 80053bc:	4622      	mov	r2, r4
 80053be:	462b      	mov	r3, r5
 80053c0:	1814      	adds	r4, r2, r0
 80053c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80053c4:	414b      	adcs	r3, r1
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	008b      	lsls	r3, r1, #2
 80053dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053e0:	0082      	lsls	r2, r0, #2
 80053e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053e6:	f7fb fbe7 	bl	8000bb8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <UART_SetConfig+0x38c>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <UART_SetConfig+0x38c>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540e:	441e      	add	r6, r3
 8005410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005412:	4618      	mov	r0, r3
 8005414:	f04f 0100 	mov.w	r1, #0
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	1894      	adds	r4, r2, r2
 800541e:	603c      	str	r4, [r7, #0]
 8005420:	415b      	adcs	r3, r3
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	1812      	adds	r2, r2, r0
 800542a:	eb41 0303 	adc.w	r3, r1, r3
 800542e:	f04f 0400 	mov.w	r4, #0
 8005432:	f04f 0500 	mov.w	r5, #0
 8005436:	00dd      	lsls	r5, r3, #3
 8005438:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800543c:	00d4      	lsls	r4, r2, #3
 800543e:	4622      	mov	r2, r4
 8005440:	462b      	mov	r3, r5
 8005442:	eb12 0a00 	adds.w	sl, r2, r0
 8005446:	eb43 0b01 	adc.w	fp, r3, r1
 800544a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4618      	mov	r0, r3
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	008b      	lsls	r3, r1, #2
 800545e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005462:	0082      	lsls	r2, r0, #2
 8005464:	4650      	mov	r0, sl
 8005466:	4659      	mov	r1, fp
 8005468:	f7fb fba6 	bl	8000bb8 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <UART_SetConfig+0x38c>)
 8005472:	fba3 1302 	umull	r1, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2164      	movs	r1, #100	; 0x64
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	; 0x32
 8005484:	4a09      	ldr	r2, [pc, #36]	; (80054ac <UART_SetConfig+0x38c>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4432      	add	r2, r6
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	377c      	adds	r7, #124	; 0x7c
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a2:	bf00      	nop
 80054a4:	40011000 	.word	0x40011000
 80054a8:	40011400 	.word	0x40011400
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <__NVIC_SetPriority>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	6039      	str	r1, [r7, #0]
 80054ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	db0a      	blt.n	80054da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	490c      	ldr	r1, [pc, #48]	; (80054fc <__NVIC_SetPriority+0x4c>)
 80054ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ce:	0112      	lsls	r2, r2, #4
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	440b      	add	r3, r1
 80054d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054d8:	e00a      	b.n	80054f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4908      	ldr	r1, [pc, #32]	; (8005500 <__NVIC_SetPriority+0x50>)
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	3b04      	subs	r3, #4
 80054e8:	0112      	lsls	r2, r2, #4
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	440b      	add	r3, r1
 80054ee:	761a      	strb	r2, [r3, #24]
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	e000e100 	.word	0xe000e100
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <SysTick_Handler+0x1c>)
 800550a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800550c:	f002 f85a 	bl	80075c4 <xTaskGetSchedulerState>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d001      	beq.n	800551a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005516:	f002 ff3f 	bl	8008398 <xPortSysTickHandler>
  }
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010

08005524 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005528:	2100      	movs	r1, #0
 800552a:	f06f 0004 	mvn.w	r0, #4
 800552e:	f7ff ffbf 	bl	80054b0 <__NVIC_SetPriority>
#endif
}
 8005532:	bf00      	nop
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	603b      	str	r3, [r7, #0]
  return(result);
 8005544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800554a:	f06f 0305 	mvn.w	r3, #5
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	e00c      	b.n	800556c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <osKernelInitialize+0x44>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <osKernelInitialize+0x44>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e002      	b.n	800556c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800556c:	687b      	ldr	r3, [r7, #4]
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	200004b8 	.word	0x200004b8

08005580 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005586:	f3ef 8305 	mrs	r3, IPSR
 800558a:	603b      	str	r3, [r7, #0]
  return(result);
 800558c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005592:	f06f 0305 	mvn.w	r3, #5
 8005596:	607b      	str	r3, [r7, #4]
 8005598:	e010      	b.n	80055bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <osKernelStart+0x48>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d109      	bne.n	80055b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055a2:	f7ff ffbf 	bl	8005524 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <osKernelStart+0x48>)
 80055a8:	2202      	movs	r2, #2
 80055aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055ac:	f001 fb9e 	bl	8006cec <vTaskStartScheduler>
      stat = osOK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e002      	b.n	80055bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055bc:	687b      	ldr	r3, [r7, #4]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	200004b8 	.word	0x200004b8

080055cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08e      	sub	sp, #56	; 0x38
 80055d0:	af04      	add	r7, sp, #16
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055dc:	f3ef 8305 	mrs	r3, IPSR
 80055e0:	617b      	str	r3, [r7, #20]
  return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d17e      	bne.n	80056e6 <osThreadNew+0x11a>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d07b      	beq.n	80056e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055f2:	2318      	movs	r3, #24
 80055f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d045      	beq.n	8005692 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <osThreadNew+0x48>
        name = attr->name;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <osThreadNew+0x6e>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b38      	cmp	r3, #56	; 0x38
 800562c:	d805      	bhi.n	800563a <osThreadNew+0x6e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <osThreadNew+0x72>
        return (NULL);
 800563a:	2300      	movs	r3, #0
 800563c:	e054      	b.n	80056e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	089b      	lsrs	r3, r3, #2
 800564c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <osThreadNew+0xa8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2bbb      	cmp	r3, #187	; 0xbb
 800565c:	d90a      	bls.n	8005674 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005662:	2b00      	cmp	r3, #0
 8005664:	d006      	beq.n	8005674 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <osThreadNew+0xa8>
        mem = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e010      	b.n	8005696 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10c      	bne.n	8005696 <osThreadNew+0xca>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d108      	bne.n	8005696 <osThreadNew+0xca>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <osThreadNew+0xca>
          mem = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e001      	b.n	8005696 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d110      	bne.n	80056be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056a4:	9202      	str	r2, [sp, #8]
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f001 f92e 	bl	8006914 <xTaskCreateStatic>
 80056b8:	4603      	mov	r3, r0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e013      	b.n	80056e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d110      	bne.n	80056e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f001 f979 	bl	80069ce <xTaskCreate>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d001      	beq.n	80056e6 <osThreadNew+0x11a>
            hTask = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056e6:	693b      	ldr	r3, [r7, #16]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	; 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f8:	f3ef 8305 	mrs	r3, IPSR
 80056fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <osDelay+0x1c>
    stat = osErrorISR;
 8005704:	f06f 0305 	mvn.w	r3, #5
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e007      	b.n	800571c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 fab4 	bl	8006c84 <vTaskDelay>
    }
  }

  return (stat);
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005726:	b580      	push	{r7, lr}
 8005728:	b088      	sub	sp, #32
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005732:	f3ef 8305 	mrs	r3, IPSR
 8005736:	60bb      	str	r3, [r7, #8]
  return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800573a:	2b00      	cmp	r3, #0
 800573c:	d174      	bne.n	8005828 <osMutexNew+0x102>
    if (attr != NULL) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	e001      	b.n	8005750 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <osMutexNew+0x3a>
      rmtx = 1U;
 800575a:	2301      	movs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e001      	b.n	8005764 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d15c      	bne.n	8005828 <osMutexNew+0x102>
      mem = -1;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d015      	beq.n	80057a6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d006      	beq.n	8005790 <osMutexNew+0x6a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b4f      	cmp	r3, #79	; 0x4f
 8005788:	d902      	bls.n	8005790 <osMutexNew+0x6a>
          mem = 1;
 800578a:	2301      	movs	r3, #1
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	e00c      	b.n	80057aa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <osMutexNew+0x84>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <osMutexNew+0x84>
            mem = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	e001      	b.n	80057aa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d112      	bne.n	80057d6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4619      	mov	r1, r3
 80057bc:	2004      	movs	r0, #4
 80057be:	f000 fb18 	bl	8005df2 <xQueueCreateMutexStatic>
 80057c2:	61f8      	str	r0, [r7, #28]
 80057c4:	e016      	b.n	80057f4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4619      	mov	r1, r3
 80057cc:	2001      	movs	r0, #1
 80057ce:	f000 fb10 	bl	8005df2 <xQueueCreateMutexStatic>
 80057d2:	61f8      	str	r0, [r7, #28]
 80057d4:	e00e      	b.n	80057f4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80057e2:	2004      	movs	r0, #4
 80057e4:	f000 faed 	bl	8005dc2 <xQueueCreateMutex>
 80057e8:	61f8      	str	r0, [r7, #28]
 80057ea:	e003      	b.n	80057f4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80057ec:	2001      	movs	r0, #1
 80057ee:	f000 fae8 	bl	8005dc2 <xQueueCreateMutex>
 80057f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <osMutexNew+0xee>
        if (attr != NULL) {
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <osMutexNew+0xe2>
          name = attr->name;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e001      	b.n	800580c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	69f8      	ldr	r0, [r7, #28]
 8005810:	f001 f822 	bl	8006858 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <osMutexNew+0x102>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005828:	69fb      	ldr	r3, [r7, #28]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005850:	f3ef 8305 	mrs	r3, IPSR
 8005854:	60bb      	str	r3, [r7, #8]
  return(result);
 8005856:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800585c:	f06f 0305 	mvn.w	r3, #5
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e02c      	b.n	80058be <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800586a:	f06f 0303 	mvn.w	r3, #3
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e025      	b.n	80058be <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d011      	beq.n	800589c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6938      	ldr	r0, [r7, #16]
 800587c:	f000 fb08 	bl	8005e90 <xQueueTakeMutexRecursive>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d01b      	beq.n	80058be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800588c:	f06f 0301 	mvn.w	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e014      	b.n	80058be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005894:	f06f 0302 	mvn.w	r3, #2
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e010      	b.n	80058be <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6938      	ldr	r0, [r7, #16]
 80058a0:	f000 fda6 	bl	80063f0 <xQueueSemaphoreTake>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d009      	beq.n	80058be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80058b0:	f06f 0301 	mvn.w	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e002      	b.n	80058be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80058b8:	f06f 0302 	mvn.w	r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80058be:	697b      	ldr	r3, [r7, #20]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e4:	f3ef 8305 	mrs	r3, IPSR
 80058e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80058f0:	f06f 0305 	mvn.w	r3, #5
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e01f      	b.n	8005938 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80058fe:	f06f 0303 	mvn.w	r3, #3
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e018      	b.n	8005938 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f000 fa8b 	bl	8005e28 <xQueueGiveMutexRecursive>
 8005912:	4603      	mov	r3, r0
 8005914:	2b01      	cmp	r3, #1
 8005916:	d00f      	beq.n	8005938 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005918:	f06f 0302 	mvn.w	r3, #2
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e00b      	b.n	8005938 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005920:	2300      	movs	r3, #0
 8005922:	2200      	movs	r2, #0
 8005924:	2100      	movs	r1, #0
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f000 fae8 	bl	8005efc <xQueueGenericSend>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d002      	beq.n	8005938 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005932:	f06f 0302 	mvn.w	r3, #2
 8005936:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005938:	697b      	ldr	r3, [r7, #20]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a07      	ldr	r2, [pc, #28]	; (8005970 <vApplicationGetIdleTaskMemory+0x2c>)
 8005954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a06      	ldr	r2, [pc, #24]	; (8005974 <vApplicationGetIdleTaskMemory+0x30>)
 800595a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2280      	movs	r2, #128	; 0x80
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	200004bc 	.word	0x200004bc
 8005974:	20000578 	.word	0x20000578

08005978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a06      	ldr	r2, [pc, #24]	; (80059a8 <vApplicationGetTimerTaskMemory+0x30>)
 800598e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	20000778 	.word	0x20000778
 80059a8:	20000834 	.word	0x20000834

080059ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f103 0208 	add.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295
 80059c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 0208 	add.w	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f103 0208 	add.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d103      	bne.n	8005a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e00c      	b.n	8005a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3308      	adds	r3, #8
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e002      	b.n	8005a7c <vListInsert+0x2e>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d2f6      	bcs.n	8005a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6892      	ldr	r2, [r2, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6852      	ldr	r2, [r2, #4]
 8005ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d103      	bne.n	8005af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b3e:	f002 fb99 	bl	8008274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	22ff      	movs	r2, #255	; 0xff
 8005b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	22ff      	movs	r2, #255	; 0xff
 8005b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d114      	bne.n	8005bbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01a      	beq.n	8005bd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3310      	adds	r3, #16
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fb3d 	bl	8007220 <xTaskRemoveFromEventList>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d012      	beq.n	8005bd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <xQueueGenericReset+0xcc>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	e009      	b.n	8005bd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fef2 	bl	80059ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff feed 	bl	80059ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bd2:	f002 fb7f 	bl	80082d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bd6:	2301      	movs	r3, #1
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08e      	sub	sp, #56	; 0x38
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <xQueueGenericCreateStatic+0x52>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <xQueueGenericCreateStatic+0x56>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueGenericCreateStatic+0x58>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	623b      	str	r3, [r7, #32]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <xQueueGenericCreateStatic+0x7e>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericCreateStatic+0x82>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericCreateStatic+0x84>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	61fb      	str	r3, [r7, #28]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c82:	2350      	movs	r3, #80	; 0x50
 8005c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d00a      	beq.n	8005ca2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61bb      	str	r3, [r7, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ca2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f83f 	bl	8005d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3730      	adds	r7, #48	; 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	613b      	str	r3, [r7, #16]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	3350      	adds	r3, #80	; 0x50
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f002 fbd3 	bl	80084b8 <pvPortMalloc>
 8005d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d011      	beq.n	8005d3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	3350      	adds	r3, #80	; 0x50
 8005d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d2c:	79fa      	ldrb	r2, [r7, #7]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	4613      	mov	r3, r2
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f805 	bl	8005d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d76:	2101      	movs	r1, #1
 8005d78:	69b8      	ldr	r0, [r7, #24]
 8005d7a:	f7ff fecb 	bl	8005b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00e      	beq.n	8005dba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005dae:	2300      	movs	r3, #0
 8005db0:	2200      	movs	r2, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8a1 	bl	8005efc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	4603      	mov	r3, r0
 8005dca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	6978      	ldr	r0, [r7, #20]
 8005ddc:	f7ff ff7a 	bl	8005cd4 <xQueueGenericCreate>
 8005de0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff ffd3 	bl	8005d8e <prvInitialiseMutex>

		return xNewQueue;
 8005de8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af02      	add	r7, sp, #8
 8005df8:	4603      	mov	r3, r0
 8005dfa:	6039      	str	r1, [r7, #0]
 8005dfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	6939      	ldr	r1, [r7, #16]
 8005e10:	6978      	ldr	r0, [r7, #20]
 8005e12:	f7ff fee7 	bl	8005be4 <xQueueGenericCreateStatic>
 8005e16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff ffb8 	bl	8005d8e <prvInitialiseMutex>

		return xNewQueue;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	60fb      	str	r3, [r7, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	689c      	ldr	r4, [r3, #8]
 8005e54:	f001 fba6 	bl	80075a4 <xTaskGetCurrentTaskHandle>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	d111      	bne.n	8005e82 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005e70:	2300      	movs	r3, #0
 8005e72:	2200      	movs	r2, #0
 8005e74:	2100      	movs	r1, #0
 8005e76:	6938      	ldr	r0, [r7, #16]
 8005e78:	f000 f840 	bl	8005efc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e001      	b.n	8005e86 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005e86:	697b      	ldr	r3, [r7, #20]
	}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd90      	pop	{r4, r7, pc}

08005e90 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	689c      	ldr	r4, [r3, #8]
 8005ebe:	f001 fb71 	bl	80075a4 <xTaskGetCurrentTaskHandle>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d107      	bne.n	8005ed8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e00c      	b.n	8005ef2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6938      	ldr	r0, [r7, #16]
 8005edc:	f000 fa88 	bl	80063f0 <xQueueSemaphoreTake>
 8005ee0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005ef2:	697b      	ldr	r3, [r7, #20]
	}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd90      	pop	{r4, r7, pc}

08005efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueGenericSend+0x32>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <xQueueGenericSend+0x40>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <xQueueGenericSend+0x44>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <xQueueGenericSend+0x46>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xQueueGenericSend+0x60>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d103      	bne.n	8005f6a <xQueueGenericSend+0x6e>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <xQueueGenericSend+0x72>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <xQueueGenericSend+0x74>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	623b      	str	r3, [r7, #32]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f8a:	f001 fb1b 	bl	80075c4 <xTaskGetSchedulerState>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <xQueueGenericSend+0x9e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <xQueueGenericSend+0xa2>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGenericSend+0xa4>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericSend+0xbe>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fba:	f002 f95b 	bl	8008274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <xQueueGenericSend+0xd4>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d129      	bne.n	8006024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd6:	f000 fb2f 	bl	8006638 <prvCopyDataToQueue>
 8005fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f919 	bl	8007220 <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d013      	beq.n	800601c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <xQueueGenericSend+0x1f8>)
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	e00a      	b.n	800601c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800600c:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <xQueueGenericSend+0x1f8>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800601c:	f002 f95a 	bl	80082d4 <vPortExitCritical>
				return pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	e063      	b.n	80060ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d103      	bne.n	8006032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800602a:	f002 f953 	bl	80082d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800602e:	2300      	movs	r3, #0
 8006030:	e05c      	b.n	80060ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f953 	bl	80072e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006046:	f002 f945 	bl	80082d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604a:	f000 febf 	bl	8006dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800604e:	f002 f911 	bl	8008274 <vPortEnterCritical>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006058:	b25b      	sxtb	r3, r3
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d103      	bne.n	8006068 <xQueueGenericSend+0x16c>
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606e:	b25b      	sxtb	r3, r3
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d103      	bne.n	800607e <xQueueGenericSend+0x182>
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607e:	f002 f929 	bl	80082d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006082:	1d3a      	adds	r2, r7, #4
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f942 	bl	8007314 <xTaskCheckForTimeOut>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d124      	bne.n	80060e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006098:	f000 fbc6 	bl	8006828 <prvIsQueueFull>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d018      	beq.n	80060d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	3310      	adds	r3, #16
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f868 	bl	8007180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b2:	f000 fb51 	bl	8006758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060b6:	f000 fe97 	bl	8006de8 <xTaskResumeAll>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f47f af7c 	bne.w	8005fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <xQueueGenericSend+0x1f8>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	e772      	b.n	8005fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d6:	f000 fb3f 	bl	8006758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060da:	f000 fe85 	bl	8006de8 <xTaskResumeAll>
 80060de:	e76c      	b.n	8005fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e2:	f000 fb39 	bl	8006758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e6:	f000 fe7f 	bl	8006de8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3738      	adds	r7, #56	; 0x38
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b090      	sub	sp, #64	; 0x40
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <xQueueGenericSendFromISR+0x3c>
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <xQueueGenericSendFromISR+0x40>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <xQueueGenericSendFromISR+0x42>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d103      	bne.n	8006162 <xQueueGenericSendFromISR+0x6a>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <xQueueGenericSendFromISR+0x6e>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <xQueueGenericSendFromISR+0x70>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	623b      	str	r3, [r7, #32]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006182:	f002 f959 	bl	8008438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006186:	f3ef 8211 	mrs	r2, BASEPRI
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fa      	str	r2, [r7, #28]
 800619c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800619e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <xQueueGenericSendFromISR+0xbc>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d12f      	bne.n	8006214 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061ca:	f000 fa35 	bl	8006638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d112      	bne.n	80061fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d016      	beq.n	800620e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	3324      	adds	r3, #36	; 0x24
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f81b 	bl	8007220 <xTaskRemoveFromEventList>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e007      	b.n	800620e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006202:	3301      	adds	r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	b25a      	sxtb	r2, r3
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800620e:	2301      	movs	r3, #1
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006212:	e001      	b.n	8006218 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006226:	4618      	mov	r0, r3
 8006228:	3740      	adds	r7, #64	; 0x40
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <xQueueReceive+0x30>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	623b      	str	r3, [r7, #32]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <xQueueReceive+0x3e>
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueReceive+0x42>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueReceive+0x44>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueReceive+0x5e>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800628e:	f001 f999 	bl	80075c4 <xTaskGetSchedulerState>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <xQueueReceive+0x6e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <xQueueReceive+0x72>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <xQueueReceive+0x74>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xQueueReceive+0x8e>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61bb      	str	r3, [r7, #24]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062be:	f001 ffd9 	bl	8008274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01f      	beq.n	800630e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d2:	f000 fa1b 	bl	800670c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1e5a      	subs	r2, r3, #1
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00f      	beq.n	8006306 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	3310      	adds	r3, #16
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 ff98 	bl	8007220 <xTaskRemoveFromEventList>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062f6:	4b3d      	ldr	r3, [pc, #244]	; (80063ec <xQueueReceive+0x1bc>)
 80062f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006306:	f001 ffe5 	bl	80082d4 <vPortExitCritical>
				return pdPASS;
 800630a:	2301      	movs	r3, #1
 800630c:	e069      	b.n	80063e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006314:	f001 ffde 	bl	80082d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006318:	2300      	movs	r3, #0
 800631a:	e062      	b.n	80063e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006322:	f107 0310 	add.w	r3, r7, #16
 8006326:	4618      	mov	r0, r3
 8006328:	f000 ffde 	bl	80072e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006330:	f001 ffd0 	bl	80082d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006334:	f000 fd4a 	bl	8006dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006338:	f001 ff9c 	bl	8008274 <vPortEnterCritical>
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006342:	b25b      	sxtb	r3, r3
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d103      	bne.n	8006352 <xQueueReceive+0x122>
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006358:	b25b      	sxtb	r3, r3
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d103      	bne.n	8006368 <xQueueReceive+0x138>
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006368:	f001 ffb4 	bl	80082d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800636c:	1d3a      	adds	r2, r7, #4
 800636e:	f107 0310 	add.w	r3, r7, #16
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 ffcd 	bl	8007314 <xTaskCheckForTimeOut>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d123      	bne.n	80063c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006382:	f000 fa3b 	bl	80067fc <prvIsQueueEmpty>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d017      	beq.n	80063bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fef3 	bl	8007180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800639a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639c:	f000 f9dc 	bl	8006758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063a0:	f000 fd22 	bl	8006de8 <xTaskResumeAll>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d189      	bne.n	80062be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <xQueueReceive+0x1bc>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	e780      	b.n	80062be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063be:	f000 f9cb 	bl	8006758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063c2:	f000 fd11 	bl	8006de8 <xTaskResumeAll>
 80063c6:	e77a      	b.n	80062be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ca:	f000 f9c5 	bl	8006758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ce:	f000 fd0b 	bl	8006de8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d4:	f000 fa12 	bl	80067fc <prvIsQueueEmpty>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f43f af6f 	beq.w	80062be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3730      	adds	r7, #48	; 0x30
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	623b      	str	r3, [r7, #32]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006440:	f001 f8c0 	bl	80075c4 <xTaskGetSchedulerState>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <xQueueSemaphoreTake+0x60>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <xQueueSemaphoreTake+0x64>
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <xQueueSemaphoreTake+0x66>
 8006454:	2300      	movs	r3, #0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61bb      	str	r3, [r7, #24]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006470:	f001 ff00 	bl	8008274 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d024      	beq.n	80064ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006490:	f001 fa0e 	bl	80078b0 <pvTaskIncrementMutexHeldCount>
 8006494:	4602      	mov	r2, r0
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00f      	beq.n	80064c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	3310      	adds	r3, #16
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 feba 	bl	8007220 <xTaskRemoveFromEventList>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064b2:	4b54      	ldr	r3, [pc, #336]	; (8006604 <xQueueSemaphoreTake+0x214>)
 80064b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064c2:	f001 ff07 	bl	80082d4 <vPortExitCritical>
				return pdPASS;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e097      	b.n	80065fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d111      	bne.n	80064f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	617b      	str	r3, [r7, #20]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064ec:	f001 fef2 	bl	80082d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e082      	b.n	80065fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fef2 	bl	80072e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006508:	f001 fee4 	bl	80082d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800650c:	f000 fc5e 	bl	8006dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006510:	f001 feb0 	bl	8008274 <vPortEnterCritical>
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800651a:	b25b      	sxtb	r3, r3
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d103      	bne.n	800652a <xQueueSemaphoreTake+0x13a>
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006530:	b25b      	sxtb	r3, r3
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d103      	bne.n	8006540 <xQueueSemaphoreTake+0x150>
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006540:	f001 fec8 	bl	80082d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006544:	463a      	mov	r2, r7
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fee1 	bl	8007314 <xTaskCheckForTimeOut>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d132      	bne.n	80065be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800655a:	f000 f94f 	bl	80067fc <prvIsQueueEmpty>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d026      	beq.n	80065b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800656c:	f001 fe82 	bl	8008274 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f843 	bl	8007600 <xTaskPriorityInherit>
 800657a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800657c:	f001 feaa 	bl	80082d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fdf9 	bl	8007180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800658e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006590:	f000 f8e2 	bl	8006758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006594:	f000 fc28 	bl	8006de8 <xTaskResumeAll>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f af68 	bne.w	8006470 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80065a0:	4b18      	ldr	r3, [pc, #96]	; (8006604 <xQueueSemaphoreTake+0x214>)
 80065a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	e75e      	b.n	8006470 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b4:	f000 f8d0 	bl	8006758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b8:	f000 fc16 	bl	8006de8 <xTaskResumeAll>
 80065bc:	e758      	b.n	8006470 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065c0:	f000 f8ca 	bl	8006758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065c4:	f000 fc10 	bl	8006de8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065ca:	f000 f917 	bl	80067fc <prvIsQueueEmpty>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f43f af4d 	beq.w	8006470 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80065dc:	f001 fe4a 	bl	8008274 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e2:	f000 f811 	bl	8006608 <prvGetDisinheritPriorityAfterTimeout>
 80065e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 f8dc 	bl	80077ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065f4:	f001 fe6e 	bl	80082d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3738      	adds	r7, #56	; 0x38
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e001      	b.n	800662a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800662a:	68fb      	ldr	r3, [r7, #12]
	}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d14d      	bne.n	80066fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	4618      	mov	r0, r3
 8006664:	f001 f834 	bl	80076d0 <xTaskPriorityDisinherit>
 8006668:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	e043      	b.n	80066fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d119      	bne.n	80066ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6858      	ldr	r0, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	461a      	mov	r2, r3
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	f002 fa25 	bl	8008ad2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d32b      	bcc.n	80066fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	e026      	b.n	80066fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68d8      	ldr	r0, [r3, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	461a      	mov	r2, r3
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	f002 fa0b 	bl	8008ad2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	425b      	negs	r3, r3
 80066c6:	441a      	add	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d207      	bcs.n	80066e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	425b      	negs	r3, r3
 80066e2:	441a      	add	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d105      	bne.n	80066fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d018      	beq.n	8006750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	441a      	add	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d303      	bcc.n	8006740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68d9      	ldr	r1, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	461a      	mov	r2, r3
 800674a:	6838      	ldr	r0, [r7, #0]
 800674c:	f002 f9c1 	bl	8008ad2 <memcpy>
	}
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006760:	f001 fd88 	bl	8008274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800676a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800676c:	e011      	b.n	8006792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d012      	beq.n	800679c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3324      	adds	r3, #36	; 0x24
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fd50 	bl	8007220 <xTaskRemoveFromEventList>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006786:	f000 fe27 	bl	80073d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	3b01      	subs	r3, #1
 800678e:	b2db      	uxtb	r3, r3
 8006790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	dce9      	bgt.n	800676e <prvUnlockQueue+0x16>
 800679a:	e000      	b.n	800679e <prvUnlockQueue+0x46>
					break;
 800679c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067a6:	f001 fd95 	bl	80082d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067aa:	f001 fd63 	bl	8008274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b6:	e011      	b.n	80067dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d012      	beq.n	80067e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3310      	adds	r3, #16
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fd2b 	bl	8007220 <xTaskRemoveFromEventList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067d0:	f000 fe02 	bl	80073d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dce9      	bgt.n	80067b8 <prvUnlockQueue+0x60>
 80067e4:	e000      	b.n	80067e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	22ff      	movs	r2, #255	; 0xff
 80067ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067f0:	f001 fd70 	bl	80082d4 <vPortExitCritical>
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006804:	f001 fd36 	bl	8008274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006810:	2301      	movs	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e001      	b.n	800681a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800681a:	f001 fd5b 	bl	80082d4 <vPortExitCritical>

	return xReturn;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006830:	f001 fd20 	bl	8008274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683c:	429a      	cmp	r2, r3
 800683e:	d102      	bne.n	8006846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e001      	b.n	800684a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800684a:	f001 fd43 	bl	80082d4 <vPortExitCritical>

	return xReturn;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e014      	b.n	8006892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006868:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <vQueueAddToRegistry+0x50>)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006874:	490c      	ldr	r1, [pc, #48]	; (80068a8 <vQueueAddToRegistry+0x50>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800687e:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <vQueueAddToRegistry+0x50>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800688a:	e006      	b.n	800689a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b07      	cmp	r3, #7
 8006896:	d9e7      	bls.n	8006868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20005398 	.word	0x20005398

080068ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068bc:	f001 fcda 	bl	8008274 <vPortEnterCritical>
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c6:	b25b      	sxtb	r3, r3
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d103      	bne.n	80068d6 <vQueueWaitForMessageRestricted+0x2a>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d103      	bne.n	80068ec <vQueueWaitForMessageRestricted+0x40>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ec:	f001 fcf2 	bl	80082d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fc61 	bl	80071c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006906:	6978      	ldr	r0, [r7, #20]
 8006908:	f7ff ff26 	bl	8006758 <prvUnlockQueue>
	}
 800690c:	bf00      	nop
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08e      	sub	sp, #56	; 0x38
 8006918:	af04      	add	r7, sp, #16
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	623b      	str	r3, [r7, #32]
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xTaskCreateStatic+0x46>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	61fb      	str	r3, [r7, #28]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800695a:	23bc      	movs	r3, #188	; 0xbc
 800695c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2bbc      	cmp	r3, #188	; 0xbc
 8006962:	d00a      	beq.n	800697a <xTaskCreateStatic+0x66>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	61bb      	str	r3, [r7, #24]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800697a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01e      	beq.n	80069c0 <xTaskCreateStatic+0xac>
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01b      	beq.n	80069c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006990:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	2202      	movs	r2, #2
 8006996:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800699a:	2300      	movs	r3, #0
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	9302      	str	r3, [sp, #8]
 80069a2:	f107 0314 	add.w	r3, r7, #20
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f850 	bl	8006a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ba:	f000 f8f3 	bl	8006ba4 <prvAddNewTaskToReadyList>
 80069be:	e001      	b.n	80069c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069c4:	697b      	ldr	r3, [r7, #20]
	}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3728      	adds	r7, #40	; 0x28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b08c      	sub	sp, #48	; 0x30
 80069d2:	af04      	add	r7, sp, #16
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f001 fd68 	bl	80084b8 <pvPortMalloc>
 80069e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00e      	beq.n	8006a0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069f0:	20bc      	movs	r0, #188	; 0xbc
 80069f2:	f001 fd61 	bl	80084b8 <pvPortMalloc>
 80069f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
 8006a04:	e005      	b.n	8006a12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a06:	6978      	ldr	r0, [r7, #20]
 8006a08:	f001 fe22 	bl	8008650 <vPortFree>
 8006a0c:	e001      	b.n	8006a12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d017      	beq.n	8006a48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f80e 	bl	8006a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a3c:	69f8      	ldr	r0, [r7, #28]
 8006a3e:	f000 f8b1 	bl	8006ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a42:	2301      	movs	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	e002      	b.n	8006a4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	461a      	mov	r2, r3
 8006a70:	21a5      	movs	r1, #165	; 0xa5
 8006a72:	f002 f83c 	bl	8008aee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	3b01      	subs	r3, #1
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	617b      	str	r3, [r7, #20]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01f      	beq.n	8006af6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	e012      	b.n	8006ae2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	7819      	ldrb	r1, [r3, #0]
 8006ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	3334      	adds	r3, #52	; 0x34
 8006acc:	460a      	mov	r2, r1
 8006ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	2b0f      	cmp	r3, #15
 8006ae6:	d9e9      	bls.n	8006abc <prvInitialiseNewTask+0x64>
 8006ae8:	e000      	b.n	8006aec <prvInitialiseNewTask+0x94>
			{
				break;
 8006aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af4:	e003      	b.n	8006afe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	2b37      	cmp	r3, #55	; 0x37
 8006b02:	d901      	bls.n	8006b08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b04:	2337      	movs	r3, #55	; 0x37
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	2200      	movs	r2, #0
 8006b18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe ff64 	bl	80059ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	3318      	adds	r3, #24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fe ff5f 	bl	80059ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	3354      	adds	r3, #84	; 0x54
 8006b58:	2260      	movs	r2, #96	; 0x60
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 ffc6 	bl	8008aee <memset>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <prvInitialiseNewTask+0x140>)
 8006b66:	659a      	str	r2, [r3, #88]	; 0x58
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <prvInitialiseNewTask+0x144>)
 8006b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <prvInitialiseNewTask+0x148>)
 8006b72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	69b8      	ldr	r0, [r7, #24]
 8006b7a:	f001 fa4f 	bl	800801c <pxPortInitialiseStack>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b90:	bf00      	nop
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	0800b9c8 	.word	0x0800b9c8
 8006b9c:	0800b9e8 	.word	0x0800b9e8
 8006ba0:	0800b9a8 	.word	0x0800b9a8

08006ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bac:	f001 fb62 	bl	8008274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bc8:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d110      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bd0:	f000 fc26 	bl	8007420 <prvInitialiseTaskLists>
 8006bd4:	e00d      	b.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bde:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d802      	bhi.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bec:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bf2:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <prvAddNewTaskToReadyList+0xd4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d903      	bls.n	8006c18 <prvAddNewTaskToReadyList+0x74>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <prvAddNewTaskToReadyList+0xd4>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <prvAddNewTaskToReadyList+0xd8>)
 8006c26:	441a      	add	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7fe fee9 	bl	8005a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c34:	f001 fb4e 	bl	80082d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00e      	beq.n	8006c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d207      	bcs.n	8006c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <prvAddNewTaskToReadyList+0xdc>)
 8006c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20001108 	.word	0x20001108
 8006c6c:	20000c34 	.word	0x20000c34
 8006c70:	20001114 	.word	0x20001114
 8006c74:	20001124 	.word	0x20001124
 8006c78:	20001110 	.word	0x20001110
 8006c7c:	20000c38 	.word	0x20000c38
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c96:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <vTaskDelay+0x60>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <vTaskDelay+0x30>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60bb      	str	r3, [r7, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cb4:	f000 f88a 	bl	8006dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fe0c 	bl	80078d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cc0:	f000 f892 	bl	8006de8 <xTaskResumeAll>
 8006cc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d107      	bne.n	8006cdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <vTaskDelay+0x64>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20001130 	.word	0x20001130
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cfa:	463a      	mov	r2, r7
 8006cfc:	1d39      	adds	r1, r7, #4
 8006cfe:	f107 0308 	add.w	r3, r7, #8
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fe1e 	bl	8005944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	9202      	str	r2, [sp, #8]
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	2300      	movs	r3, #0
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	2300      	movs	r3, #0
 8006d18:	460a      	mov	r2, r1
 8006d1a:	4924      	ldr	r1, [pc, #144]	; (8006dac <vTaskStartScheduler+0xc0>)
 8006d1c:	4824      	ldr	r0, [pc, #144]	; (8006db0 <vTaskStartScheduler+0xc4>)
 8006d1e:	f7ff fdf9 	bl	8006914 <xTaskCreateStatic>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4a23      	ldr	r2, [pc, #140]	; (8006db4 <vTaskStartScheduler+0xc8>)
 8006d26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d28:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <vTaskStartScheduler+0xc8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e001      	b.n	8006d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d102      	bne.n	8006d46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d40:	f000 fe1e 	bl	8007980 <xTimerCreateTimerTask>
 8006d44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d11b      	bne.n	8006d84 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	613b      	str	r3, [r7, #16]
}
 8006d5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d60:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <vTaskStartScheduler+0xcc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3354      	adds	r3, #84	; 0x54
 8006d66:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <vTaskStartScheduler+0xd0>)
 8006d68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <vTaskStartScheduler+0xd4>)
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <vTaskStartScheduler+0xd8>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d78:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <vTaskStartScheduler+0xdc>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d7e:	f001 f9d7 	bl	8008130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d82:	e00e      	b.n	8006da2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d10a      	bne.n	8006da2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60fb      	str	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <vTaskStartScheduler+0xb4>
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	0800b8b4 	.word	0x0800b8b4
 8006db0:	080073f1 	.word	0x080073f1
 8006db4:	2000112c 	.word	0x2000112c
 8006db8:	20000c34 	.word	0x20000c34
 8006dbc:	200000dc 	.word	0x200000dc
 8006dc0:	20001128 	.word	0x20001128
 8006dc4:	20001114 	.word	0x20001114
 8006dc8:	2000110c 	.word	0x2000110c

08006dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <vTaskSuspendAll+0x18>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a03      	ldr	r2, [pc, #12]	; (8006de4 <vTaskSuspendAll+0x18>)
 8006dd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20001130 	.word	0x20001130

08006de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006df6:	4b42      	ldr	r3, [pc, #264]	; (8006f00 <xTaskResumeAll+0x118>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	603b      	str	r3, [r7, #0]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e14:	f001 fa2e 	bl	8008274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e18:	4b39      	ldr	r3, [pc, #228]	; (8006f00 <xTaskResumeAll+0x118>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	4a38      	ldr	r2, [pc, #224]	; (8006f00 <xTaskResumeAll+0x118>)
 8006e20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e22:	4b37      	ldr	r3, [pc, #220]	; (8006f00 <xTaskResumeAll+0x118>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d162      	bne.n	8006ef0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e2a:	4b36      	ldr	r3, [pc, #216]	; (8006f04 <xTaskResumeAll+0x11c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05e      	beq.n	8006ef0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e32:	e02f      	b.n	8006e94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e34:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <xTaskResumeAll+0x120>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3318      	adds	r3, #24
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe fe3d 	bl	8005ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fe38 	bl	8005ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <xTaskResumeAll+0x124>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <xTaskResumeAll+0x7c>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <xTaskResumeAll+0x124>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a27      	ldr	r2, [pc, #156]	; (8006f10 <xTaskResumeAll+0x128>)
 8006e72:	441a      	add	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fdc3 	bl	8005a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <xTaskResumeAll+0x12c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e8e:	4b22      	ldr	r3, [pc, #136]	; (8006f18 <xTaskResumeAll+0x130>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e94:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <xTaskResumeAll+0x120>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1cb      	bne.n	8006e34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ea2:	f000 fb5f 	bl	8007564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ea6:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <xTaskResumeAll+0x134>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d010      	beq.n	8006ed4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f000 f847 	bl	8006f44 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ebc:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <xTaskResumeAll+0x130>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f1      	bne.n	8006eb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <xTaskResumeAll+0x134>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ed4:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <xTaskResumeAll+0x130>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <xTaskResumeAll+0x138>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ef0:	f001 f9f0 	bl	80082d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20001130 	.word	0x20001130
 8006f04:	20001108 	.word	0x20001108
 8006f08:	200010c8 	.word	0x200010c8
 8006f0c:	20001110 	.word	0x20001110
 8006f10:	20000c38 	.word	0x20000c38
 8006f14:	20000c34 	.word	0x20000c34
 8006f18:	2000111c 	.word	0x2000111c
 8006f1c:	20001118 	.word	0x20001118
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <xTaskGetTickCount+0x1c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f30:	687b      	ldr	r3, [r7, #4]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	2000110c 	.word	0x2000110c

08006f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4e:	4b4f      	ldr	r3, [pc, #316]	; (800708c <xTaskIncrementTick+0x148>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 808f 	bne.w	8007076 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f58:	4b4d      	ldr	r3, [pc, #308]	; (8007090 <xTaskIncrementTick+0x14c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f60:	4a4b      	ldr	r2, [pc, #300]	; (8007090 <xTaskIncrementTick+0x14c>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d120      	bne.n	8006fae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f6c:	4b49      	ldr	r3, [pc, #292]	; (8007094 <xTaskIncrementTick+0x150>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <xTaskIncrementTick+0x48>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	603b      	str	r3, [r7, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xTaskIncrementTick+0x46>
 8006f8c:	4b41      	ldr	r3, [pc, #260]	; (8007094 <xTaskIncrementTick+0x150>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	4b41      	ldr	r3, [pc, #260]	; (8007098 <xTaskIncrementTick+0x154>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a3f      	ldr	r2, [pc, #252]	; (8007094 <xTaskIncrementTick+0x150>)
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	4a3f      	ldr	r2, [pc, #252]	; (8007098 <xTaskIncrementTick+0x154>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	4b3e      	ldr	r3, [pc, #248]	; (800709c <xTaskIncrementTick+0x158>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	4a3d      	ldr	r2, [pc, #244]	; (800709c <xTaskIncrementTick+0x158>)
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	f000 fadb 	bl	8007564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fae:	4b3c      	ldr	r3, [pc, #240]	; (80070a0 <xTaskIncrementTick+0x15c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d349      	bcc.n	800704c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb8:	4b36      	ldr	r3, [pc, #216]	; (8007094 <xTaskIncrementTick+0x150>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc2:	4b37      	ldr	r3, [pc, #220]	; (80070a0 <xTaskIncrementTick+0x15c>)
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	601a      	str	r2, [r3, #0]
					break;
 8006fca:	e03f      	b.n	800704c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fcc:	4b31      	ldr	r3, [pc, #196]	; (8007094 <xTaskIncrementTick+0x150>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d203      	bcs.n	8006fec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fe4:	4a2e      	ldr	r2, [pc, #184]	; (80070a0 <xTaskIncrementTick+0x15c>)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fea:	e02f      	b.n	800704c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fd65 	bl	8005ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	3318      	adds	r3, #24
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fd5c 	bl	8005ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <xTaskIncrementTick+0x160>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d903      	bls.n	800701c <xTaskIncrementTick+0xd8>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	4a22      	ldr	r2, [pc, #136]	; (80070a4 <xTaskIncrementTick+0x160>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a1f      	ldr	r2, [pc, #124]	; (80070a8 <xTaskIncrementTick+0x164>)
 800702a:	441a      	add	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f7fe fce7 	bl	8005a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <xTaskIncrementTick+0x168>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	429a      	cmp	r2, r3
 8007044:	d3b8      	bcc.n	8006fb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007046:	2301      	movs	r3, #1
 8007048:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704a:	e7b5      	b.n	8006fb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <xTaskIncrementTick+0x168>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007052:	4915      	ldr	r1, [pc, #84]	; (80070a8 <xTaskIncrementTick+0x164>)
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d901      	bls.n	8007068 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007064:	2301      	movs	r3, #1
 8007066:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <xTaskIncrementTick+0x16c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007070:	2301      	movs	r3, #1
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	e004      	b.n	8007080 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <xTaskIncrementTick+0x170>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <xTaskIncrementTick+0x170>)
 800707e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007080:	697b      	ldr	r3, [r7, #20]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20001130 	.word	0x20001130
 8007090:	2000110c 	.word	0x2000110c
 8007094:	200010c0 	.word	0x200010c0
 8007098:	200010c4 	.word	0x200010c4
 800709c:	20001120 	.word	0x20001120
 80070a0:	20001128 	.word	0x20001128
 80070a4:	20001110 	.word	0x20001110
 80070a8:	20000c38 	.word	0x20000c38
 80070ac:	20000c34 	.word	0x20000c34
 80070b0:	2000111c 	.word	0x2000111c
 80070b4:	20001118 	.word	0x20001118

080070b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070be:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <vTaskSwitchContext+0xb0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070c6:	4b29      	ldr	r3, [pc, #164]	; (800716c <vTaskSwitchContext+0xb4>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070cc:	e046      	b.n	800715c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <vTaskSwitchContext+0xb4>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d4:	4b26      	ldr	r3, [pc, #152]	; (8007170 <vTaskSwitchContext+0xb8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e010      	b.n	80070fe <vTaskSwitchContext+0x46>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	607b      	str	r3, [r7, #4]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <vTaskSwitchContext+0x3e>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	491d      	ldr	r1, [pc, #116]	; (8007174 <vTaskSwitchContext+0xbc>)
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0e4      	beq.n	80070dc <vTaskSwitchContext+0x24>
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4a15      	ldr	r2, [pc, #84]	; (8007174 <vTaskSwitchContext+0xbc>)
 800711e:	4413      	add	r3, r2
 8007120:	60bb      	str	r3, [r7, #8]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	3308      	adds	r3, #8
 8007134:	429a      	cmp	r2, r3
 8007136:	d104      	bne.n	8007142 <vTaskSwitchContext+0x8a>
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a0b      	ldr	r2, [pc, #44]	; (8007178 <vTaskSwitchContext+0xc0>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	4a08      	ldr	r2, [pc, #32]	; (8007170 <vTaskSwitchContext+0xb8>)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <vTaskSwitchContext+0xc0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3354      	adds	r3, #84	; 0x54
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <vTaskSwitchContext+0xc4>)
 800715a:	6013      	str	r3, [r2, #0]
}
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20001130 	.word	0x20001130
 800716c:	2000111c 	.word	0x2000111c
 8007170:	20001110 	.word	0x20001110
 8007174:	20000c38 	.word	0x20000c38
 8007178:	20000c34 	.word	0x20000c34
 800717c:	200000dc 	.word	0x200000dc

08007180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	60fb      	str	r3, [r7, #12]
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <vTaskPlaceOnEventList+0x44>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3318      	adds	r3, #24
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fe fc4d 	bl	8005a4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071b4:	2101      	movs	r1, #1
 80071b6:	6838      	ldr	r0, [r7, #0]
 80071b8:	f000 fb8e 	bl	80078d8 <prvAddCurrentTaskToDelayedList>
}
 80071bc:	bf00      	nop
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000c34 	.word	0x20000c34

080071c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	617b      	str	r3, [r7, #20]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <vTaskPlaceOnEventListRestricted+0x54>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3318      	adds	r3, #24
 80071f6:	4619      	mov	r1, r3
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7fe fc04 	bl	8005a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007204:	f04f 33ff 	mov.w	r3, #4294967295
 8007208:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	68b8      	ldr	r0, [r7, #8]
 800720e:	f000 fb63 	bl	80078d8 <prvAddCurrentTaskToDelayedList>
	}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000c34 	.word	0x20000c34

08007220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60fb      	str	r3, [r7, #12]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3318      	adds	r3, #24
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe fc35 	bl	8005ac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007256:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <xTaskRemoveFromEventList+0xb0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d11d      	bne.n	800729a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	3304      	adds	r3, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fc2c 	bl	8005ac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726c:	4b19      	ldr	r3, [pc, #100]	; (80072d4 <xTaskRemoveFromEventList+0xb4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <xTaskRemoveFromEventList+0x5c>
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	4a16      	ldr	r2, [pc, #88]	; (80072d4 <xTaskRemoveFromEventList+0xb4>)
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <xTaskRemoveFromEventList+0xb8>)
 800728a:	441a      	add	r2, r3
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7fe fbb7 	bl	8005a06 <vListInsertEnd>
 8007298:	e005      	b.n	80072a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3318      	adds	r3, #24
 800729e:	4619      	mov	r1, r3
 80072a0:	480e      	ldr	r0, [pc, #56]	; (80072dc <xTaskRemoveFromEventList+0xbc>)
 80072a2:	f7fe fbb0 	bl	8005a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <xTaskRemoveFromEventList+0xc0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d905      	bls.n	80072c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <xTaskRemoveFromEventList+0xc4>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e001      	b.n	80072c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072c4:	697b      	ldr	r3, [r7, #20]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20001130 	.word	0x20001130
 80072d4:	20001110 	.word	0x20001110
 80072d8:	20000c38 	.word	0x20000c38
 80072dc:	200010c8 	.word	0x200010c8
 80072e0:	20000c34 	.word	0x20000c34
 80072e4:	2000111c 	.word	0x2000111c

080072e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <vTaskInternalSetTimeOutState+0x24>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <vTaskInternalSetTimeOutState+0x28>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20001120 	.word	0x20001120
 8007310:	2000110c 	.word	0x2000110c

08007314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	613b      	str	r3, [r7, #16]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007356:	f000 ff8d 	bl	8008274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800735a:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <xTaskCheckForTimeOut+0xbc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d102      	bne.n	800737a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	e023      	b.n	80073c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <xTaskCheckForTimeOut+0xc0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d007      	beq.n	8007396 <xTaskCheckForTimeOut+0x82>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	429a      	cmp	r2, r3
 800738e:	d302      	bcc.n	8007396 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	e015      	b.n	80073c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	429a      	cmp	r2, r3
 800739e:	d20b      	bcs.n	80073b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ff9b 	bl	80072e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e004      	b.n	80073c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073be:	2301      	movs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073c2:	f000 ff87 	bl	80082d4 <vPortExitCritical>

	return xReturn;
 80073c6:	69fb      	ldr	r3, [r7, #28]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	2000110c 	.word	0x2000110c
 80073d4:	20001120 	.word	0x20001120

080073d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <vTaskMissedYield+0x14>)
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
}
 80073e2:	bf00      	nop
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	2000111c 	.word	0x2000111c

080073f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073f8:	f000 f852 	bl	80074a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <prvIdleTask+0x28>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d9f9      	bls.n	80073f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <prvIdleTask+0x2c>)
 8007406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007414:	e7f0      	b.n	80073f8 <prvIdleTask+0x8>
 8007416:	bf00      	nop
 8007418:	20000c38 	.word	0x20000c38
 800741c:	e000ed04 	.word	0xe000ed04

08007420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007426:	2300      	movs	r3, #0
 8007428:	607b      	str	r3, [r7, #4]
 800742a:	e00c      	b.n	8007446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <prvInitialiseTaskLists+0x60>)
 8007438:	4413      	add	r3, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fab6 	bl	80059ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3301      	adds	r3, #1
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b37      	cmp	r3, #55	; 0x37
 800744a:	d9ef      	bls.n	800742c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800744c:	480d      	ldr	r0, [pc, #52]	; (8007484 <prvInitialiseTaskLists+0x64>)
 800744e:	f7fe faad 	bl	80059ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007452:	480d      	ldr	r0, [pc, #52]	; (8007488 <prvInitialiseTaskLists+0x68>)
 8007454:	f7fe faaa 	bl	80059ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007458:	480c      	ldr	r0, [pc, #48]	; (800748c <prvInitialiseTaskLists+0x6c>)
 800745a:	f7fe faa7 	bl	80059ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800745e:	480c      	ldr	r0, [pc, #48]	; (8007490 <prvInitialiseTaskLists+0x70>)
 8007460:	f7fe faa4 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007464:	480b      	ldr	r0, [pc, #44]	; (8007494 <prvInitialiseTaskLists+0x74>)
 8007466:	f7fe faa1 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <prvInitialiseTaskLists+0x78>)
 800746c:	4a05      	ldr	r2, [pc, #20]	; (8007484 <prvInitialiseTaskLists+0x64>)
 800746e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <prvInitialiseTaskLists+0x7c>)
 8007472:	4a05      	ldr	r2, [pc, #20]	; (8007488 <prvInitialiseTaskLists+0x68>)
 8007474:	601a      	str	r2, [r3, #0]
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000c38 	.word	0x20000c38
 8007484:	20001098 	.word	0x20001098
 8007488:	200010ac 	.word	0x200010ac
 800748c:	200010c8 	.word	0x200010c8
 8007490:	200010dc 	.word	0x200010dc
 8007494:	200010f4 	.word	0x200010f4
 8007498:	200010c0 	.word	0x200010c0
 800749c:	200010c4 	.word	0x200010c4

080074a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074a6:	e019      	b.n	80074dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074a8:	f000 fee4 	bl	8008274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <prvCheckTasksWaitingTermination+0x50>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fb01 	bl	8005ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074be:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <prvCheckTasksWaitingTermination+0x54>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	4a0b      	ldr	r2, [pc, #44]	; (80074f4 <prvCheckTasksWaitingTermination+0x54>)
 80074c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <prvCheckTasksWaitingTermination+0x58>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <prvCheckTasksWaitingTermination+0x58>)
 80074d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074d2:	f000 feff 	bl	80082d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f810 	bl	80074fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <prvCheckTasksWaitingTermination+0x58>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e1      	bne.n	80074a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200010dc 	.word	0x200010dc
 80074f4:	20001108 	.word	0x20001108
 80074f8:	200010f0 	.word	0x200010f0

080074fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3354      	adds	r3, #84	; 0x54
 8007508:	4618      	mov	r0, r3
 800750a:	f002 f841 	bl	8009590 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	4618      	mov	r0, r3
 800751e:	f001 f897 	bl	8008650 <vPortFree>
				vPortFree( pxTCB );
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f894 	bl	8008650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007528:	e018      	b.n	800755c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007530:	2b01      	cmp	r3, #1
 8007532:	d103      	bne.n	800753c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 f88b 	bl	8008650 <vPortFree>
	}
 800753a:	e00f      	b.n	800755c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007542:	2b02      	cmp	r3, #2
 8007544:	d00a      	beq.n	800755c <prvDeleteTCB+0x60>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60fb      	str	r3, [r7, #12]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <prvDeleteTCB+0x5e>
	}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756a:	4b0c      	ldr	r3, [pc, #48]	; (800759c <prvResetNextTaskUnblockTime+0x38>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800757c:	e008      	b.n	8007590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <prvResetNextTaskUnblockTime+0x38>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a04      	ldr	r2, [pc, #16]	; (80075a0 <prvResetNextTaskUnblockTime+0x3c>)
 800758e:	6013      	str	r3, [r2, #0]
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	200010c0 	.word	0x200010c0
 80075a0:	20001128 	.word	0x20001128

080075a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80075b0:	687b      	ldr	r3, [r7, #4]
	}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000c34 	.word	0x20000c34

080075c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <xTaskGetSchedulerState+0x34>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075d2:	2301      	movs	r3, #1
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	e008      	b.n	80075ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d8:	4b08      	ldr	r3, [pc, #32]	; (80075fc <xTaskGetSchedulerState+0x38>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075e0:	2302      	movs	r3, #2
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	e001      	b.n	80075ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ea:	687b      	ldr	r3, [r7, #4]
	}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20001114 	.word	0x20001114
 80075fc:	20001130 	.word	0x20001130

08007600 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d051      	beq.n	80076ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <xTaskPriorityInherit+0xc4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	429a      	cmp	r2, r3
 8007622:	d241      	bcs.n	80076a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	db06      	blt.n	800763a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762c:	4b25      	ldr	r3, [pc, #148]	; (80076c4 <xTaskPriorityInherit+0xc4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6959      	ldr	r1, [r3, #20]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <xTaskPriorityInherit+0xc8>)
 800764c:	4413      	add	r3, r2
 800764e:	4299      	cmp	r1, r3
 8007650:	d122      	bne.n	8007698 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3304      	adds	r3, #4
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fa32 	bl	8005ac0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800765c:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <xTaskPriorityInherit+0xc4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <xTaskPriorityInherit+0xcc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d903      	bls.n	800767a <xTaskPriorityInherit+0x7a>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	4a15      	ldr	r2, [pc, #84]	; (80076cc <xTaskPriorityInherit+0xcc>)
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <xTaskPriorityInherit+0xc8>)
 8007688:	441a      	add	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7fe f9b8 	bl	8005a06 <vListInsertEnd>
 8007696:	e004      	b.n	80076a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <xTaskPriorityInherit+0xc4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e008      	b.n	80076ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <xTaskPriorityInherit+0xc4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d201      	bcs.n	80076ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076ba:	68fb      	ldr	r3, [r7, #12]
	}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000c34 	.word	0x20000c34
 80076c8:	20000c38 	.word	0x20000c38
 80076cc:	20001110 	.word	0x20001110

080076d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d056      	beq.n	8007794 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076e6:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <xTaskPriorityDisinherit+0xd0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00a      	beq.n	8007706 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60bb      	str	r3, [r7, #8]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	429a      	cmp	r2, r3
 8007738:	d02c      	beq.n	8007794 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d128      	bne.n	8007794 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe f9ba 	bl	8005ac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <xTaskPriorityDisinherit+0xd4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d903      	bls.n	8007774 <xTaskPriorityDisinherit+0xa4>
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <xTaskPriorityDisinherit+0xd4>)
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <xTaskPriorityDisinherit+0xd8>)
 8007782:	441a      	add	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7fe f93b 	bl	8005a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007794:	697b      	ldr	r3, [r7, #20]
	}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000c34 	.word	0x20000c34
 80077a4:	20001110 	.word	0x20001110
 80077a8:	20000c38 	.word	0x20000c38

080077ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d06a      	beq.n	800789a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d902      	bls.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	e002      	b.n	80077f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d04b      	beq.n	800789a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	429a      	cmp	r2, r3
 800780a:	d146      	bne.n	800789a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800780c:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	429a      	cmp	r2, r3
 8007814:	d10a      	bne.n	800782c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	db04      	blt.n	800784a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	6959      	ldr	r1, [r3, #20]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800785a:	4413      	add	r3, r2
 800785c:	4299      	cmp	r1, r3
 800785e:	d11c      	bne.n	800789a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	3304      	adds	r3, #4
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe f92b 	bl	8005ac0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d903      	bls.n	800787e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4a07      	ldr	r2, [pc, #28]	; (80078a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800788c:	441a      	add	r2, r3
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7fe f8b6 	bl	8005a06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800789a:	bf00      	nop
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000c34 	.word	0x20000c34
 80078a8:	20000c38 	.word	0x20000c38
 80078ac:	20001110 	.word	0x20001110

080078b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078c2:	3201      	adds	r2, #1
 80078c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80078c6:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078c8:	681b      	ldr	r3, [r3, #0]
	}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	20000c34 	.word	0x20000c34

080078d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078e2:	4b21      	ldr	r3, [pc, #132]	; (8007968 <prvAddCurrentTaskToDelayedList+0x90>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e8:	4b20      	ldr	r3, [pc, #128]	; (800796c <prvAddCurrentTaskToDelayedList+0x94>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3304      	adds	r3, #4
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe f8e6 	bl	8005ac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d10a      	bne.n	8007912 <prvAddCurrentTaskToDelayedList+0x3a>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007902:	4b1a      	ldr	r3, [pc, #104]	; (800796c <prvAddCurrentTaskToDelayedList+0x94>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3304      	adds	r3, #4
 8007908:	4619      	mov	r1, r3
 800790a:	4819      	ldr	r0, [pc, #100]	; (8007970 <prvAddCurrentTaskToDelayedList+0x98>)
 800790c:	f7fe f87b 	bl	8005a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007910:	e026      	b.n	8007960 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4413      	add	r3, r2
 8007918:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <prvAddCurrentTaskToDelayedList+0x94>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	429a      	cmp	r2, r3
 8007928:	d209      	bcs.n	800793e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <prvAddCurrentTaskToDelayedList+0x9c>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <prvAddCurrentTaskToDelayedList+0x94>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7fe f889 	bl	8005a4e <vListInsert>
}
 800793c:	e010      	b.n	8007960 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	4b0a      	ldr	r3, [pc, #40]	; (800796c <prvAddCurrentTaskToDelayedList+0x94>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7fe f87f 	bl	8005a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d202      	bcs.n	8007960 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800795a:	4a08      	ldr	r2, [pc, #32]	; (800797c <prvAddCurrentTaskToDelayedList+0xa4>)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6013      	str	r3, [r2, #0]
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	2000110c 	.word	0x2000110c
 800796c:	20000c34 	.word	0x20000c34
 8007970:	200010f4 	.word	0x200010f4
 8007974:	200010c4 	.word	0x200010c4
 8007978:	200010c0 	.word	0x200010c0
 800797c:	20001128 	.word	0x20001128

08007980 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800798a:	f000 fb07 	bl	8007f9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800798e:	4b1c      	ldr	r3, [pc, #112]	; (8007a00 <xTimerCreateTimerTask+0x80>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d021      	beq.n	80079da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800799e:	1d3a      	adds	r2, r7, #4
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fd ffe5 	bl	8005978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	9202      	str	r2, [sp, #8]
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	2302      	movs	r3, #2
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2300      	movs	r3, #0
 80079be:	460a      	mov	r2, r1
 80079c0:	4910      	ldr	r1, [pc, #64]	; (8007a04 <xTimerCreateTimerTask+0x84>)
 80079c2:	4811      	ldr	r0, [pc, #68]	; (8007a08 <xTimerCreateTimerTask+0x88>)
 80079c4:	f7fe ffa6 	bl	8006914 <xTaskCreateStatic>
 80079c8:	4603      	mov	r3, r0
 80079ca:	4a10      	ldr	r2, [pc, #64]	; (8007a0c <xTimerCreateTimerTask+0x8c>)
 80079cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <xTimerCreateTimerTask+0x8c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079d6:	2301      	movs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613b      	str	r3, [r7, #16]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079f6:	697b      	ldr	r3, [r7, #20]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20001164 	.word	0x20001164
 8007a04:	0800b8bc 	.word	0x0800b8bc
 8007a08:	08007b45 	.word	0x08007b45
 8007a0c:	20001168 	.word	0x20001168

08007a10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	623b      	str	r3, [r7, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02a      	beq.n	8007a9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b05      	cmp	r3, #5
 8007a56:	dc18      	bgt.n	8007a8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a58:	f7ff fdb4 	bl	80075c4 <xTaskGetSchedulerState>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d109      	bne.n	8007a76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a62:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	f107 0110 	add.w	r1, r7, #16
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	f7fe fa45 	bl	8005efc <xQueueGenericSend>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24
 8007a74:	e012      	b.n	8007a9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a76:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f107 0110 	add.w	r1, r7, #16
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7fe fa3b 	bl	8005efc <xQueueGenericSend>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24
 8007a88:	e008      	b.n	8007a9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f107 0110 	add.w	r1, r7, #16
 8007a92:	2300      	movs	r3, #0
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	f7fe fb2f 	bl	80060f8 <xQueueGenericSendFromISR>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3728      	adds	r7, #40	; 0x28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20001164 	.word	0x20001164

08007aac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab6:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <prvProcessExpiredTimer+0x94>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fffb 	bl	8005ac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d022      	beq.n	8007b1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	699a      	ldr	r2, [r3, #24]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	18d1      	adds	r1, r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	6978      	ldr	r0, [r7, #20]
 8007ae6:	f000 f8d1 	bl	8007c8c <prvInsertTimerInActiveList>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01f      	beq.n	8007b30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	2100      	movs	r1, #0
 8007afa:	6978      	ldr	r0, [r7, #20]
 8007afc:	f7ff ff88 	bl	8007a10 <xTimerGenericCommand>
 8007b00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d113      	bne.n	8007b30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	6978      	ldr	r0, [r7, #20]
 8007b36:	4798      	blx	r3
}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	2000115c 	.word	0x2000115c

08007b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f857 	bl	8007c04 <prvGetNextExpireTime>
 8007b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f803 	bl	8007b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b62:	f000 f8d5 	bl	8007d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b66:	e7f1      	b.n	8007b4c <prvTimerTask+0x8>

08007b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b72:	f7ff f92b 	bl	8006dcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f866 	bl	8007c4c <prvSampleTimeNow>
 8007b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d130      	bne.n	8007bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <prvProcessTimerOrBlockTask+0x3c>
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d806      	bhi.n	8007ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b96:	f7ff f927 	bl	8006de8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff ff85 	bl	8007aac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ba2:	e024      	b.n	8007bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <prvProcessTimerOrBlockTask+0x90>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <prvProcessTimerOrBlockTask+0x50>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <prvProcessTimerOrBlockTask+0x52>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <prvProcessTimerOrBlockTask+0x94>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f7fe fe6f 	bl	80068ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bce:	f7ff f90b 	bl	8006de8 <xTaskResumeAll>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bd8:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <prvProcessTimerOrBlockTask+0x98>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
}
 8007be8:	e001      	b.n	8007bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bea:	f7ff f8fd 	bl	8006de8 <xTaskResumeAll>
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20001160 	.word	0x20001160
 8007bfc:	20001164 	.word	0x20001164
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <prvGetNextExpireTime+0x44>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <prvGetNextExpireTime+0x16>
 8007c16:	2201      	movs	r2, #1
 8007c18:	e000      	b.n	8007c1c <prvGetNextExpireTime+0x18>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d105      	bne.n	8007c34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvGetNextExpireTime+0x44>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e001      	b.n	8007c38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	2000115c 	.word	0x2000115c

08007c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c54:	f7ff f966 	bl	8006f24 <xTaskGetTickCount>
 8007c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <prvSampleTimeNow+0x3c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d205      	bcs.n	8007c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c64:	f000 f936 	bl	8007ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <prvSampleTimeNow+0x3c>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	2000116c 	.word	0x2000116c

08007c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d812      	bhi.n	8007cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e01b      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <prvInsertTimerInActiveList+0x7c>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fd febc 	bl	8005a4e <vListInsert>
 8007cd6:	e012      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d206      	bcs.n	8007cee <prvInsertTimerInActiveList+0x62>
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d302      	bcc.n	8007cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e007      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <prvInsertTimerInActiveList+0x80>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fd fea8 	bl	8005a4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cfe:	697b      	ldr	r3, [r7, #20]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20001160 	.word	0x20001160
 8007d0c:	2000115c 	.word	0x2000115c

08007d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d16:	e0ca      	b.n	8007eae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da18      	bge.n	8007d50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	3304      	adds	r3, #4
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	61fb      	str	r3, [r7, #28]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d46:	6850      	ldr	r0, [r2, #4]
 8007d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4a:	6892      	ldr	r2, [r2, #8]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f2c0 80aa 	blt.w	8007eac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	3304      	adds	r3, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd fea9 	bl	8005ac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d6e:	463b      	mov	r3, r7
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ff6b 	bl	8007c4c <prvSampleTimeNow>
 8007d76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	f200 8097 	bhi.w	8007eae <prvProcessReceivedCommands+0x19e>
 8007d80:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <prvProcessReceivedCommands+0x78>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007db1 	.word	0x08007db1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007e25 	.word	0x08007e25
 8007d98:	08007e39 	.word	0x08007e39
 8007d9c:	08007e83 	.word	0x08007e83
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007db1 	.word	0x08007db1
 8007da8:	08007e25 	.word	0x08007e25
 8007dac:	08007e39 	.word	0x08007e39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	18d1      	adds	r1, r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd0:	f7ff ff5c 	bl	8007c8c <prvInsertTimerInActiveList>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d069      	beq.n	8007eae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d05e      	beq.n	8007eae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	441a      	add	r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e02:	f7ff fe05 	bl	8007a10 <xTimerGenericCommand>
 8007e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d14f      	bne.n	8007eae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61bb      	str	r3, [r7, #24]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e36:	e03a      	b.n	8007eae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	617b      	str	r3, [r7, #20]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	18d1      	adds	r1, r2, r3
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7c:	f7ff ff06 	bl	8007c8c <prvInsertTimerInActiveList>
					break;
 8007e80:	e015      	b.n	8007eae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e92:	f000 fbdd 	bl	8008650 <vPortFree>
 8007e96:	e00a      	b.n	8007eae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007eaa:	e000      	b.n	8007eae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007eac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eae:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <prvProcessReceivedCommands+0x1c0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1d39      	adds	r1, r7, #4
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe f9ba 	bl	8006230 <xQueueReceive>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f47f af2a 	bne.w	8007d18 <prvProcessReceivedCommands+0x8>
	}
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	3730      	adds	r7, #48	; 0x30
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001164 	.word	0x20001164

08007ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eda:	e048      	b.n	8007f6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007edc:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee6:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fd fde3 	bl	8005ac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02e      	beq.n	8007f6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d90e      	bls.n	8007f40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f2e:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4619      	mov	r1, r3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f7fd fd88 	bl	8005a4e <vListInsert>
 8007f3e:	e016      	b.n	8007f6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f40:	2300      	movs	r3, #0
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fd60 	bl	8007a10 <xTimerGenericCommand>
 8007f50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	603b      	str	r3, [r7, #0]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f6e:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1b1      	bne.n	8007edc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f78:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <prvSwitchTimerLists+0xc4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f86:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <prvSwitchTimerLists+0xc4>)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	6013      	str	r3, [r2, #0]
}
 8007f8c:	bf00      	nop
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	2000115c 	.word	0x2000115c
 8007f98:	20001160 	.word	0x20001160

08007f9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fa2:	f000 f967 	bl	8008274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fa6:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d120      	bne.n	8007ff0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fae:	4814      	ldr	r0, [pc, #80]	; (8008000 <prvCheckForValidListAndQueue+0x64>)
 8007fb0:	f7fd fcfc 	bl	80059ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fb4:	4813      	ldr	r0, [pc, #76]	; (8008004 <prvCheckForValidListAndQueue+0x68>)
 8007fb6:	f7fd fcf9 	bl	80059ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <prvCheckForValidListAndQueue+0x6c>)
 8007fbc:	4a10      	ldr	r2, [pc, #64]	; (8008000 <prvCheckForValidListAndQueue+0x64>)
 8007fbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fc0:	4b12      	ldr	r3, [pc, #72]	; (800800c <prvCheckForValidListAndQueue+0x70>)
 8007fc2:	4a10      	ldr	r2, [pc, #64]	; (8008004 <prvCheckForValidListAndQueue+0x68>)
 8007fc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <prvCheckForValidListAndQueue+0x74>)
 8007fcc:	4a11      	ldr	r2, [pc, #68]	; (8008014 <prvCheckForValidListAndQueue+0x78>)
 8007fce:	2110      	movs	r1, #16
 8007fd0:	200a      	movs	r0, #10
 8007fd2:	f7fd fe07 	bl	8005be4 <xQueueGenericCreateStatic>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4a08      	ldr	r2, [pc, #32]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fdc:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	490b      	ldr	r1, [pc, #44]	; (8008018 <prvCheckForValidListAndQueue+0x7c>)
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fc34 	bl	8006858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ff0:	f000 f970 	bl	80082d4 <vPortExitCritical>
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001164 	.word	0x20001164
 8008000:	20001134 	.word	0x20001134
 8008004:	20001148 	.word	0x20001148
 8008008:	2000115c 	.word	0x2000115c
 800800c:	20001160 	.word	0x20001160
 8008010:	20001210 	.word	0x20001210
 8008014:	20001170 	.word	0x20001170
 8008018:	0800b8c4 	.word	0x0800b8c4

0800801c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3b04      	subs	r3, #4
 800802c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3b04      	subs	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f023 0201 	bic.w	r2, r3, #1
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3b04      	subs	r3, #4
 800804a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800804c:	4a0c      	ldr	r2, [pc, #48]	; (8008080 <pxPortInitialiseStack+0x64>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3b14      	subs	r3, #20
 8008056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3b04      	subs	r3, #4
 8008062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f06f 0202 	mvn.w	r2, #2
 800806a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3b20      	subs	r3, #32
 8008070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008072:	68fb      	ldr	r3, [r7, #12]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	08008085 	.word	0x08008085

08008084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800808e:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <prvTaskExitError+0x54>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d00a      	beq.n	80080ae <prvTaskExitError+0x2a>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	60fb      	str	r3, [r7, #12]
}
 80080aa:	bf00      	nop
 80080ac:	e7fe      	b.n	80080ac <prvTaskExitError+0x28>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60bb      	str	r3, [r7, #8]
}
 80080c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080c2:	bf00      	nop
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0fc      	beq.n	80080c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	200000d8 	.word	0x200000d8
 80080dc:	00000000 	.word	0x00000000

080080e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <pxCurrentTCBConst2>)
 80080e2:	6819      	ldr	r1, [r3, #0]
 80080e4:	6808      	ldr	r0, [r1, #0]
 80080e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	f380 8809 	msr	PSP, r0
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f380 8811 	msr	BASEPRI, r0
 80080fa:	4770      	bx	lr
 80080fc:	f3af 8000 	nop.w

08008100 <pxCurrentTCBConst2>:
 8008100:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop

08008108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008108:	4808      	ldr	r0, [pc, #32]	; (800812c <prvPortStartFirstTask+0x24>)
 800810a:	6800      	ldr	r0, [r0, #0]
 800810c:	6800      	ldr	r0, [r0, #0]
 800810e:	f380 8808 	msr	MSP, r0
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8814 	msr	CONTROL, r0
 800811a:	b662      	cpsie	i
 800811c:	b661      	cpsie	f
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	df00      	svc	0
 8008128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800812a:	bf00      	nop
 800812c:	e000ed08 	.word	0xe000ed08

08008130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008136:	4b46      	ldr	r3, [pc, #280]	; (8008250 <xPortStartScheduler+0x120>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a46      	ldr	r2, [pc, #280]	; (8008254 <xPortStartScheduler+0x124>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10a      	bne.n	8008156 <xPortStartScheduler+0x26>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	613b      	str	r3, [r7, #16]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008156:	4b3e      	ldr	r3, [pc, #248]	; (8008250 <xPortStartScheduler+0x120>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a3f      	ldr	r2, [pc, #252]	; (8008258 <xPortStartScheduler+0x128>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d10a      	bne.n	8008176 <xPortStartScheduler+0x46>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008176:	4b39      	ldr	r3, [pc, #228]	; (800825c <xPortStartScheduler+0x12c>)
 8008178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008198:	b2da      	uxtb	r2, r3
 800819a:	4b31      	ldr	r3, [pc, #196]	; (8008260 <xPortStartScheduler+0x130>)
 800819c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800819e:	4b31      	ldr	r3, [pc, #196]	; (8008264 <xPortStartScheduler+0x134>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081a4:	e009      	b.n	80081ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081a6:	4b2f      	ldr	r3, [pc, #188]	; (8008264 <xPortStartScheduler+0x134>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a2d      	ldr	r2, [pc, #180]	; (8008264 <xPortStartScheduler+0x134>)
 80081ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c2:	2b80      	cmp	r3, #128	; 0x80
 80081c4:	d0ef      	beq.n	80081a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081c6:	4b27      	ldr	r3, [pc, #156]	; (8008264 <xPortStartScheduler+0x134>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1c3 0307 	rsb	r3, r3, #7
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d00a      	beq.n	80081e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60bb      	str	r3, [r7, #8]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081e8:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <xPortStartScheduler+0x134>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <xPortStartScheduler+0x134>)
 80081f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081f2:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <xPortStartScheduler+0x134>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081fa:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <xPortStartScheduler+0x134>)
 80081fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	b2da      	uxtb	r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008206:	4b18      	ldr	r3, [pc, #96]	; (8008268 <xPortStartScheduler+0x138>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a17      	ldr	r2, [pc, #92]	; (8008268 <xPortStartScheduler+0x138>)
 800820c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008212:	4b15      	ldr	r3, [pc, #84]	; (8008268 <xPortStartScheduler+0x138>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a14      	ldr	r2, [pc, #80]	; (8008268 <xPortStartScheduler+0x138>)
 8008218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800821c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800821e:	f000 f8dd 	bl	80083dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008222:	4b12      	ldr	r3, [pc, #72]	; (800826c <xPortStartScheduler+0x13c>)
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008228:	f000 f8fc 	bl	8008424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800822c:	4b10      	ldr	r3, [pc, #64]	; (8008270 <xPortStartScheduler+0x140>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a0f      	ldr	r2, [pc, #60]	; (8008270 <xPortStartScheduler+0x140>)
 8008232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008238:	f7ff ff66 	bl	8008108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800823c:	f7fe ff3c 	bl	80070b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008240:	f7ff ff20 	bl	8008084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	e000ed00 	.word	0xe000ed00
 8008254:	410fc271 	.word	0x410fc271
 8008258:	410fc270 	.word	0x410fc270
 800825c:	e000e400 	.word	0xe000e400
 8008260:	20001260 	.word	0x20001260
 8008264:	20001264 	.word	0x20001264
 8008268:	e000ed20 	.word	0xe000ed20
 800826c:	200000d8 	.word	0x200000d8
 8008270:	e000ef34 	.word	0xe000ef34

08008274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	607b      	str	r3, [r7, #4]
}
 800828c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <vPortEnterCritical+0x58>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	4a0d      	ldr	r2, [pc, #52]	; (80082cc <vPortEnterCritical+0x58>)
 8008296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008298:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <vPortEnterCritical+0x58>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10f      	bne.n	80082c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <vPortEnterCritical+0x5c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	603b      	str	r3, [r7, #0]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <vPortEnterCritical+0x4a>
	}
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	200000d8 	.word	0x200000d8
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082da:	4b12      	ldr	r3, [pc, #72]	; (8008324 <vPortExitCritical+0x50>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10a      	bne.n	80082f8 <vPortExitCritical+0x24>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	607b      	str	r3, [r7, #4]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <vPortExitCritical+0x50>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	4a09      	ldr	r2, [pc, #36]	; (8008324 <vPortExitCritical+0x50>)
 8008300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008302:	4b08      	ldr	r3, [pc, #32]	; (8008324 <vPortExitCritical+0x50>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d105      	bne.n	8008316 <vPortExitCritical+0x42>
 800830a:	2300      	movs	r3, #0
 800830c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	f383 8811 	msr	BASEPRI, r3
}
 8008314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	200000d8 	.word	0x200000d8
	...

08008330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008330:	f3ef 8009 	mrs	r0, PSP
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4b15      	ldr	r3, [pc, #84]	; (8008390 <pxCurrentTCBConst>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f01e 0f10 	tst.w	lr, #16
 8008340:	bf08      	it	eq
 8008342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	6010      	str	r0, [r2, #0]
 800834c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008354:	f380 8811 	msr	BASEPRI, r0
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f7fe feaa 	bl	80070b8 <vTaskSwitchContext>
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	f380 8811 	msr	BASEPRI, r0
 800836c:	bc09      	pop	{r0, r3}
 800836e:	6819      	ldr	r1, [r3, #0]
 8008370:	6808      	ldr	r0, [r1, #0]
 8008372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008376:	f01e 0f10 	tst.w	lr, #16
 800837a:	bf08      	it	eq
 800837c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008380:	f380 8809 	msr	PSP, r0
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w

08008390 <pxCurrentTCBConst>:
 8008390:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	607b      	str	r3, [r7, #4]
}
 80083b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083b2:	f7fe fdc7 	bl	8006f44 <xTaskIncrementTick>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <xPortSysTickHandler+0x40>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083e0:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <vPortSetupTimerInterrupt+0x34>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <vPortSetupTimerInterrupt+0x38>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <vPortSetupTimerInterrupt+0x3c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0a      	ldr	r2, [pc, #40]	; (800841c <vPortSetupTimerInterrupt+0x40>)
 80083f2:	fba2 2303 	umull	r2, r3, r2, r3
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	4a09      	ldr	r2, [pc, #36]	; (8008420 <vPortSetupTimerInterrupt+0x44>)
 80083fa:	3b01      	subs	r3, #1
 80083fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083fe:	4b04      	ldr	r3, [pc, #16]	; (8008410 <vPortSetupTimerInterrupt+0x34>)
 8008400:	2207      	movs	r2, #7
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	e000e010 	.word	0xe000e010
 8008414:	e000e018 	.word	0xe000e018
 8008418:	200000cc 	.word	0x200000cc
 800841c:	10624dd3 	.word	0x10624dd3
 8008420:	e000e014 	.word	0xe000e014

08008424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008434 <vPortEnableVFP+0x10>
 8008428:	6801      	ldr	r1, [r0, #0]
 800842a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800842e:	6001      	str	r1, [r0, #0]
 8008430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008432:	bf00      	nop
 8008434:	e000ed88 	.word	0xe000ed88

08008438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800843e:	f3ef 8305 	mrs	r3, IPSR
 8008442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d914      	bls.n	8008474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800844a:	4a17      	ldr	r2, [pc, #92]	; (80084a8 <vPortValidateInterruptPriority+0x70>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <vPortValidateInterruptPriority+0x74>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	7afa      	ldrb	r2, [r7, #11]
 800845a:	429a      	cmp	r2, r3
 800845c:	d20a      	bcs.n	8008474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	607b      	str	r3, [r7, #4]
}
 8008470:	bf00      	nop
 8008472:	e7fe      	b.n	8008472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <vPortValidateInterruptPriority+0x78>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800847c:	4b0d      	ldr	r3, [pc, #52]	; (80084b4 <vPortValidateInterruptPriority+0x7c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d90a      	bls.n	800849a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	603b      	str	r3, [r7, #0]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <vPortValidateInterruptPriority+0x60>
	}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	e000e3f0 	.word	0xe000e3f0
 80084ac:	20001260 	.word	0x20001260
 80084b0:	e000ed0c 	.word	0xe000ed0c
 80084b4:	20001264 	.word	0x20001264

080084b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	; 0x28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084c4:	f7fe fc82 	bl	8006dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084c8:	4b5b      	ldr	r3, [pc, #364]	; (8008638 <pvPortMalloc+0x180>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084d0:	f000 f920 	bl	8008714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084d4:	4b59      	ldr	r3, [pc, #356]	; (800863c <pvPortMalloc+0x184>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4013      	ands	r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 8093 	bne.w	8008608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01d      	beq.n	8008524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084e8:	2208      	movs	r2, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d014      	beq.n	8008524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f023 0307 	bic.w	r3, r3, #7
 8008500:	3308      	adds	r3, #8
 8008502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <pvPortMalloc+0x6c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	617b      	str	r3, [r7, #20]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d06e      	beq.n	8008608 <pvPortMalloc+0x150>
 800852a:	4b45      	ldr	r3, [pc, #276]	; (8008640 <pvPortMalloc+0x188>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d869      	bhi.n	8008608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008534:	4b43      	ldr	r3, [pc, #268]	; (8008644 <pvPortMalloc+0x18c>)
 8008536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008538:	4b42      	ldr	r3, [pc, #264]	; (8008644 <pvPortMalloc+0x18c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853e:	e004      	b.n	800854a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d903      	bls.n	800855c <pvPortMalloc+0xa4>
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1f1      	bne.n	8008540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800855c:	4b36      	ldr	r3, [pc, #216]	; (8008638 <pvPortMalloc+0x180>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008562:	429a      	cmp	r2, r3
 8008564:	d050      	beq.n	8008608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2208      	movs	r2, #8
 800856c:	4413      	add	r3, r2
 800856e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	2308      	movs	r3, #8
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	429a      	cmp	r2, r3
 8008586:	d91f      	bls.n	80085c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <pvPortMalloc+0xf8>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	613b      	str	r3, [r7, #16]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	1ad2      	subs	r2, r2, r3
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085c2:	69b8      	ldr	r0, [r7, #24]
 80085c4:	f000 f908 	bl	80087d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085c8:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <pvPortMalloc+0x188>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	4a1b      	ldr	r2, [pc, #108]	; (8008640 <pvPortMalloc+0x188>)
 80085d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <pvPortMalloc+0x188>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <pvPortMalloc+0x190>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d203      	bcs.n	80085ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085e2:	4b17      	ldr	r3, [pc, #92]	; (8008640 <pvPortMalloc+0x188>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a18      	ldr	r2, [pc, #96]	; (8008648 <pvPortMalloc+0x190>)
 80085e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <pvPortMalloc+0x184>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <pvPortMalloc+0x194>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3301      	adds	r3, #1
 8008604:	4a11      	ldr	r2, [pc, #68]	; (800864c <pvPortMalloc+0x194>)
 8008606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008608:	f7fe fbee 	bl	8006de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f003 0307 	and.w	r3, r3, #7
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <pvPortMalloc+0x174>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	60fb      	str	r3, [r7, #12]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <pvPortMalloc+0x172>
	return pvReturn;
 800862c:	69fb      	ldr	r3, [r7, #28]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3728      	adds	r7, #40	; 0x28
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20004e70 	.word	0x20004e70
 800863c:	20004e84 	.word	0x20004e84
 8008640:	20004e74 	.word	0x20004e74
 8008644:	20004e68 	.word	0x20004e68
 8008648:	20004e78 	.word	0x20004e78
 800864c:	20004e7c 	.word	0x20004e7c

08008650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d04d      	beq.n	80086fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008662:	2308      	movs	r3, #8
 8008664:	425b      	negs	r3, r3
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4413      	add	r3, r2
 800866a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	4b24      	ldr	r3, [pc, #144]	; (8008708 <vPortFree+0xb8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4013      	ands	r3, r2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <vPortFree+0x44>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	60fb      	str	r3, [r7, #12]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <vPortFree+0x62>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	60bb      	str	r3, [r7, #8]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <vPortFree+0xb8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4013      	ands	r3, r2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01e      	beq.n	80086fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d11a      	bne.n	80086fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <vPortFree+0xb8>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	43db      	mvns	r3, r3
 80086d2:	401a      	ands	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086d8:	f7fe fb78 	bl	8006dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <vPortFree+0xbc>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4413      	add	r3, r2
 80086e6:	4a09      	ldr	r2, [pc, #36]	; (800870c <vPortFree+0xbc>)
 80086e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086ea:	6938      	ldr	r0, [r7, #16]
 80086ec:	f000 f874 	bl	80087d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <vPortFree+0xc0>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	4a06      	ldr	r2, [pc, #24]	; (8008710 <vPortFree+0xc0>)
 80086f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086fa:	f7fe fb75 	bl	8006de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086fe:	bf00      	nop
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20004e84 	.word	0x20004e84
 800870c:	20004e74 	.word	0x20004e74
 8008710:	20004e80 	.word	0x20004e80

08008714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800871a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800871e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008720:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <prvHeapInit+0xac>)
 8008722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3307      	adds	r3, #7
 8008732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <prvHeapInit+0xac>)
 8008744:	4413      	add	r3, r2
 8008746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800874c:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <prvHeapInit+0xb0>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <prvHeapInit+0xb0>)
 8008754:	2200      	movs	r2, #0
 8008756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008760:	2208      	movs	r2, #8
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <prvHeapInit+0xb4>)
 8008774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <prvHeapInit+0xb4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <prvHeapInit+0xb4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <prvHeapInit+0xb4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	4a0a      	ldr	r2, [pc, #40]	; (80087cc <prvHeapInit+0xb8>)
 80087a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <prvHeapInit+0xbc>)
 80087aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <prvHeapInit+0xc0>)
 80087ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087b2:	601a      	str	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	20001268 	.word	0x20001268
 80087c4:	20004e68 	.word	0x20004e68
 80087c8:	20004e70 	.word	0x20004e70
 80087cc:	20004e78 	.word	0x20004e78
 80087d0:	20004e74 	.word	0x20004e74
 80087d4:	20004e84 	.word	0x20004e84

080087d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e0:	4b28      	ldr	r3, [pc, #160]	; (8008884 <prvInsertBlockIntoFreeList+0xac>)
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e002      	b.n	80087ec <prvInsertBlockIntoFreeList+0x14>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d8f7      	bhi.n	80087e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d108      	bne.n	800881a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	441a      	add	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d118      	bne.n	8008860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <prvInsertBlockIntoFreeList+0xb0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d00d      	beq.n	8008856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e008      	b.n	8008868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008856:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <prvInsertBlockIntoFreeList+0xb0>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	e003      	b.n	8008868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d002      	beq.n	8008876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	20004e68 	.word	0x20004e68
 8008888:	20004e70 	.word	0x20004e70

0800888c <__errno>:
 800888c:	4b01      	ldr	r3, [pc, #4]	; (8008894 <__errno+0x8>)
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	200000dc 	.word	0x200000dc

08008898 <std>:
 8008898:	2300      	movs	r3, #0
 800889a:	b510      	push	{r4, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	e9c0 3300 	strd	r3, r3, [r0]
 80088a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088a6:	6083      	str	r3, [r0, #8]
 80088a8:	8181      	strh	r1, [r0, #12]
 80088aa:	6643      	str	r3, [r0, #100]	; 0x64
 80088ac:	81c2      	strh	r2, [r0, #14]
 80088ae:	6183      	str	r3, [r0, #24]
 80088b0:	4619      	mov	r1, r3
 80088b2:	2208      	movs	r2, #8
 80088b4:	305c      	adds	r0, #92	; 0x5c
 80088b6:	f000 f91a 	bl	8008aee <memset>
 80088ba:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <std+0x38>)
 80088bc:	6263      	str	r3, [r4, #36]	; 0x24
 80088be:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <std+0x3c>)
 80088c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <std+0x40>)
 80088c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <std+0x44>)
 80088c8:	6224      	str	r4, [r4, #32]
 80088ca:	6323      	str	r3, [r4, #48]	; 0x30
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	bf00      	nop
 80088d0:	080096a9 	.word	0x080096a9
 80088d4:	080096cb 	.word	0x080096cb
 80088d8:	08009703 	.word	0x08009703
 80088dc:	08009727 	.word	0x08009727

080088e0 <_cleanup_r>:
 80088e0:	4901      	ldr	r1, [pc, #4]	; (80088e8 <_cleanup_r+0x8>)
 80088e2:	f000 b8af 	b.w	8008a44 <_fwalk_reent>
 80088e6:	bf00      	nop
 80088e8:	0800a6f5 	.word	0x0800a6f5

080088ec <__sfmoreglue>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	1e4a      	subs	r2, r1, #1
 80088f0:	2568      	movs	r5, #104	; 0x68
 80088f2:	4355      	muls	r5, r2
 80088f4:	460e      	mov	r6, r1
 80088f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088fa:	f000 f901 	bl	8008b00 <_malloc_r>
 80088fe:	4604      	mov	r4, r0
 8008900:	b140      	cbz	r0, 8008914 <__sfmoreglue+0x28>
 8008902:	2100      	movs	r1, #0
 8008904:	e9c0 1600 	strd	r1, r6, [r0]
 8008908:	300c      	adds	r0, #12
 800890a:	60a0      	str	r0, [r4, #8]
 800890c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008910:	f000 f8ed 	bl	8008aee <memset>
 8008914:	4620      	mov	r0, r4
 8008916:	bd70      	pop	{r4, r5, r6, pc}

08008918 <__sfp_lock_acquire>:
 8008918:	4801      	ldr	r0, [pc, #4]	; (8008920 <__sfp_lock_acquire+0x8>)
 800891a:	f000 b8d8 	b.w	8008ace <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	200053e0 	.word	0x200053e0

08008924 <__sfp_lock_release>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__sfp_lock_release+0x8>)
 8008926:	f000 b8d3 	b.w	8008ad0 <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	200053e0 	.word	0x200053e0

08008930 <__sinit_lock_acquire>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sinit_lock_acquire+0x8>)
 8008932:	f000 b8cc 	b.w	8008ace <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	200053db 	.word	0x200053db

0800893c <__sinit_lock_release>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__sinit_lock_release+0x8>)
 800893e:	f000 b8c7 	b.w	8008ad0 <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	200053db 	.word	0x200053db

08008948 <__sinit>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	f7ff fff0 	bl	8008930 <__sinit_lock_acquire>
 8008950:	69a3      	ldr	r3, [r4, #24]
 8008952:	b11b      	cbz	r3, 800895c <__sinit+0x14>
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008958:	f7ff bff0 	b.w	800893c <__sinit_lock_release>
 800895c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008960:	6523      	str	r3, [r4, #80]	; 0x50
 8008962:	4b13      	ldr	r3, [pc, #76]	; (80089b0 <__sinit+0x68>)
 8008964:	4a13      	ldr	r2, [pc, #76]	; (80089b4 <__sinit+0x6c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	62a2      	str	r2, [r4, #40]	; 0x28
 800896a:	42a3      	cmp	r3, r4
 800896c:	bf04      	itt	eq
 800896e:	2301      	moveq	r3, #1
 8008970:	61a3      	streq	r3, [r4, #24]
 8008972:	4620      	mov	r0, r4
 8008974:	f000 f820 	bl	80089b8 <__sfp>
 8008978:	6060      	str	r0, [r4, #4]
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f81c 	bl	80089b8 <__sfp>
 8008980:	60a0      	str	r0, [r4, #8]
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f818 	bl	80089b8 <__sfp>
 8008988:	2200      	movs	r2, #0
 800898a:	60e0      	str	r0, [r4, #12]
 800898c:	2104      	movs	r1, #4
 800898e:	6860      	ldr	r0, [r4, #4]
 8008990:	f7ff ff82 	bl	8008898 <std>
 8008994:	68a0      	ldr	r0, [r4, #8]
 8008996:	2201      	movs	r2, #1
 8008998:	2109      	movs	r1, #9
 800899a:	f7ff ff7d 	bl	8008898 <std>
 800899e:	68e0      	ldr	r0, [r4, #12]
 80089a0:	2202      	movs	r2, #2
 80089a2:	2112      	movs	r1, #18
 80089a4:	f7ff ff78 	bl	8008898 <std>
 80089a8:	2301      	movs	r3, #1
 80089aa:	61a3      	str	r3, [r4, #24]
 80089ac:	e7d2      	b.n	8008954 <__sinit+0xc>
 80089ae:	bf00      	nop
 80089b0:	0800ba08 	.word	0x0800ba08
 80089b4:	080088e1 	.word	0x080088e1

080089b8 <__sfp>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	4607      	mov	r7, r0
 80089bc:	f7ff ffac 	bl	8008918 <__sfp_lock_acquire>
 80089c0:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <__sfp+0x84>)
 80089c2:	681e      	ldr	r6, [r3, #0]
 80089c4:	69b3      	ldr	r3, [r6, #24]
 80089c6:	b913      	cbnz	r3, 80089ce <__sfp+0x16>
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff ffbd 	bl	8008948 <__sinit>
 80089ce:	3648      	adds	r6, #72	; 0x48
 80089d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	d503      	bpl.n	80089e0 <__sfp+0x28>
 80089d8:	6833      	ldr	r3, [r6, #0]
 80089da:	b30b      	cbz	r3, 8008a20 <__sfp+0x68>
 80089dc:	6836      	ldr	r6, [r6, #0]
 80089de:	e7f7      	b.n	80089d0 <__sfp+0x18>
 80089e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089e4:	b9d5      	cbnz	r5, 8008a1c <__sfp+0x64>
 80089e6:	4b16      	ldr	r3, [pc, #88]	; (8008a40 <__sfp+0x88>)
 80089e8:	60e3      	str	r3, [r4, #12]
 80089ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089ee:	6665      	str	r5, [r4, #100]	; 0x64
 80089f0:	f000 f86c 	bl	8008acc <__retarget_lock_init_recursive>
 80089f4:	f7ff ff96 	bl	8008924 <__sfp_lock_release>
 80089f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a00:	6025      	str	r5, [r4, #0]
 8008a02:	61a5      	str	r5, [r4, #24]
 8008a04:	2208      	movs	r2, #8
 8008a06:	4629      	mov	r1, r5
 8008a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a0c:	f000 f86f 	bl	8008aee <memset>
 8008a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a18:	4620      	mov	r0, r4
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1c:	3468      	adds	r4, #104	; 0x68
 8008a1e:	e7d9      	b.n	80089d4 <__sfp+0x1c>
 8008a20:	2104      	movs	r1, #4
 8008a22:	4638      	mov	r0, r7
 8008a24:	f7ff ff62 	bl	80088ec <__sfmoreglue>
 8008a28:	4604      	mov	r4, r0
 8008a2a:	6030      	str	r0, [r6, #0]
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d1d5      	bne.n	80089dc <__sfp+0x24>
 8008a30:	f7ff ff78 	bl	8008924 <__sfp_lock_release>
 8008a34:	230c      	movs	r3, #12
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	e7ee      	b.n	8008a18 <__sfp+0x60>
 8008a3a:	bf00      	nop
 8008a3c:	0800ba08 	.word	0x0800ba08
 8008a40:	ffff0001 	.word	0xffff0001

08008a44 <_fwalk_reent>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	4606      	mov	r6, r0
 8008a4a:	4688      	mov	r8, r1
 8008a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a50:	2700      	movs	r7, #0
 8008a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a56:	f1b9 0901 	subs.w	r9, r9, #1
 8008a5a:	d505      	bpl.n	8008a68 <_fwalk_reent+0x24>
 8008a5c:	6824      	ldr	r4, [r4, #0]
 8008a5e:	2c00      	cmp	r4, #0
 8008a60:	d1f7      	bne.n	8008a52 <_fwalk_reent+0xe>
 8008a62:	4638      	mov	r0, r7
 8008a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a68:	89ab      	ldrh	r3, [r5, #12]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d907      	bls.n	8008a7e <_fwalk_reent+0x3a>
 8008a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a72:	3301      	adds	r3, #1
 8008a74:	d003      	beq.n	8008a7e <_fwalk_reent+0x3a>
 8008a76:	4629      	mov	r1, r5
 8008a78:	4630      	mov	r0, r6
 8008a7a:	47c0      	blx	r8
 8008a7c:	4307      	orrs	r7, r0
 8008a7e:	3568      	adds	r5, #104	; 0x68
 8008a80:	e7e9      	b.n	8008a56 <_fwalk_reent+0x12>
	...

08008a84 <__libc_init_array>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4d0d      	ldr	r5, [pc, #52]	; (8008abc <__libc_init_array+0x38>)
 8008a88:	4c0d      	ldr	r4, [pc, #52]	; (8008ac0 <__libc_init_array+0x3c>)
 8008a8a:	1b64      	subs	r4, r4, r5
 8008a8c:	10a4      	asrs	r4, r4, #2
 8008a8e:	2600      	movs	r6, #0
 8008a90:	42a6      	cmp	r6, r4
 8008a92:	d109      	bne.n	8008aa8 <__libc_init_array+0x24>
 8008a94:	4d0b      	ldr	r5, [pc, #44]	; (8008ac4 <__libc_init_array+0x40>)
 8008a96:	4c0c      	ldr	r4, [pc, #48]	; (8008ac8 <__libc_init_array+0x44>)
 8008a98:	f002 fea0 	bl	800b7dc <_init>
 8008a9c:	1b64      	subs	r4, r4, r5
 8008a9e:	10a4      	asrs	r4, r4, #2
 8008aa0:	2600      	movs	r6, #0
 8008aa2:	42a6      	cmp	r6, r4
 8008aa4:	d105      	bne.n	8008ab2 <__libc_init_array+0x2e>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aac:	4798      	blx	r3
 8008aae:	3601      	adds	r6, #1
 8008ab0:	e7ee      	b.n	8008a90 <__libc_init_array+0xc>
 8008ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab6:	4798      	blx	r3
 8008ab8:	3601      	adds	r6, #1
 8008aba:	e7f2      	b.n	8008aa2 <__libc_init_array+0x1e>
 8008abc:	0800bd94 	.word	0x0800bd94
 8008ac0:	0800bd94 	.word	0x0800bd94
 8008ac4:	0800bd94 	.word	0x0800bd94
 8008ac8:	0800bd98 	.word	0x0800bd98

08008acc <__retarget_lock_init_recursive>:
 8008acc:	4770      	bx	lr

08008ace <__retarget_lock_acquire_recursive>:
 8008ace:	4770      	bx	lr

08008ad0 <__retarget_lock_release_recursive>:
 8008ad0:	4770      	bx	lr

08008ad2 <memcpy>:
 8008ad2:	440a      	add	r2, r1
 8008ad4:	4291      	cmp	r1, r2
 8008ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ada:	d100      	bne.n	8008ade <memcpy+0xc>
 8008adc:	4770      	bx	lr
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ae8:	4291      	cmp	r1, r2
 8008aea:	d1f9      	bne.n	8008ae0 <memcpy+0xe>
 8008aec:	bd10      	pop	{r4, pc}

08008aee <memset>:
 8008aee:	4402      	add	r2, r0
 8008af0:	4603      	mov	r3, r0
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d100      	bne.n	8008af8 <memset+0xa>
 8008af6:	4770      	bx	lr
 8008af8:	f803 1b01 	strb.w	r1, [r3], #1
 8008afc:	e7f9      	b.n	8008af2 <memset+0x4>
	...

08008b00 <_malloc_r>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	1ccd      	adds	r5, r1, #3
 8008b04:	f025 0503 	bic.w	r5, r5, #3
 8008b08:	3508      	adds	r5, #8
 8008b0a:	2d0c      	cmp	r5, #12
 8008b0c:	bf38      	it	cc
 8008b0e:	250c      	movcc	r5, #12
 8008b10:	2d00      	cmp	r5, #0
 8008b12:	4606      	mov	r6, r0
 8008b14:	db01      	blt.n	8008b1a <_malloc_r+0x1a>
 8008b16:	42a9      	cmp	r1, r5
 8008b18:	d903      	bls.n	8008b22 <_malloc_r+0x22>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	2000      	movs	r0, #0
 8008b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b22:	f001 fea5 	bl	800a870 <__malloc_lock>
 8008b26:	4921      	ldr	r1, [pc, #132]	; (8008bac <_malloc_r+0xac>)
 8008b28:	680a      	ldr	r2, [r1, #0]
 8008b2a:	4614      	mov	r4, r2
 8008b2c:	b99c      	cbnz	r4, 8008b56 <_malloc_r+0x56>
 8008b2e:	4f20      	ldr	r7, [pc, #128]	; (8008bb0 <_malloc_r+0xb0>)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	b923      	cbnz	r3, 8008b3e <_malloc_r+0x3e>
 8008b34:	4621      	mov	r1, r4
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 fd86 	bl	8009648 <_sbrk_r>
 8008b3c:	6038      	str	r0, [r7, #0]
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 fd81 	bl	8009648 <_sbrk_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d123      	bne.n	8008b92 <_malloc_r+0x92>
 8008b4a:	230c      	movs	r3, #12
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f001 fe94 	bl	800a87c <__malloc_unlock>
 8008b54:	e7e3      	b.n	8008b1e <_malloc_r+0x1e>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	1b5b      	subs	r3, r3, r5
 8008b5a:	d417      	bmi.n	8008b8c <_malloc_r+0x8c>
 8008b5c:	2b0b      	cmp	r3, #11
 8008b5e:	d903      	bls.n	8008b68 <_malloc_r+0x68>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	441c      	add	r4, r3
 8008b64:	6025      	str	r5, [r4, #0]
 8008b66:	e004      	b.n	8008b72 <_malloc_r+0x72>
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	42a2      	cmp	r2, r4
 8008b6c:	bf0c      	ite	eq
 8008b6e:	600b      	streq	r3, [r1, #0]
 8008b70:	6053      	strne	r3, [r2, #4]
 8008b72:	4630      	mov	r0, r6
 8008b74:	f001 fe82 	bl	800a87c <__malloc_unlock>
 8008b78:	f104 000b 	add.w	r0, r4, #11
 8008b7c:	1d23      	adds	r3, r4, #4
 8008b7e:	f020 0007 	bic.w	r0, r0, #7
 8008b82:	1ac2      	subs	r2, r0, r3
 8008b84:	d0cc      	beq.n	8008b20 <_malloc_r+0x20>
 8008b86:	1a1b      	subs	r3, r3, r0
 8008b88:	50a3      	str	r3, [r4, r2]
 8008b8a:	e7c9      	b.n	8008b20 <_malloc_r+0x20>
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	6864      	ldr	r4, [r4, #4]
 8008b90:	e7cc      	b.n	8008b2c <_malloc_r+0x2c>
 8008b92:	1cc4      	adds	r4, r0, #3
 8008b94:	f024 0403 	bic.w	r4, r4, #3
 8008b98:	42a0      	cmp	r0, r4
 8008b9a:	d0e3      	beq.n	8008b64 <_malloc_r+0x64>
 8008b9c:	1a21      	subs	r1, r4, r0
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f000 fd52 	bl	8009648 <_sbrk_r>
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d1dd      	bne.n	8008b64 <_malloc_r+0x64>
 8008ba8:	e7cf      	b.n	8008b4a <_malloc_r+0x4a>
 8008baa:	bf00      	nop
 8008bac:	20004e88 	.word	0x20004e88
 8008bb0:	20004e8c 	.word	0x20004e8c

08008bb4 <__cvt>:
 8008bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	ec55 4b10 	vmov	r4, r5, d0
 8008bbc:	2d00      	cmp	r5, #0
 8008bbe:	460e      	mov	r6, r1
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	462b      	mov	r3, r5
 8008bc4:	bfbb      	ittet	lt
 8008bc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008bca:	461d      	movlt	r5, r3
 8008bcc:	2300      	movge	r3, #0
 8008bce:	232d      	movlt	r3, #45	; 0x2d
 8008bd0:	700b      	strb	r3, [r1, #0]
 8008bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008bd8:	4691      	mov	r9, r2
 8008bda:	f023 0820 	bic.w	r8, r3, #32
 8008bde:	bfbc      	itt	lt
 8008be0:	4622      	movlt	r2, r4
 8008be2:	4614      	movlt	r4, r2
 8008be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008be8:	d005      	beq.n	8008bf6 <__cvt+0x42>
 8008bea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bee:	d100      	bne.n	8008bf2 <__cvt+0x3e>
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	2102      	movs	r1, #2
 8008bf4:	e000      	b.n	8008bf8 <__cvt+0x44>
 8008bf6:	2103      	movs	r1, #3
 8008bf8:	ab03      	add	r3, sp, #12
 8008bfa:	9301      	str	r3, [sp, #4]
 8008bfc:	ab02      	add	r3, sp, #8
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	ec45 4b10 	vmov	d0, r4, r5
 8008c04:	4653      	mov	r3, sl
 8008c06:	4632      	mov	r2, r6
 8008c08:	f000 ff02 	bl	8009a10 <_dtoa_r>
 8008c0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c10:	4607      	mov	r7, r0
 8008c12:	d102      	bne.n	8008c1a <__cvt+0x66>
 8008c14:	f019 0f01 	tst.w	r9, #1
 8008c18:	d022      	beq.n	8008c60 <__cvt+0xac>
 8008c1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c1e:	eb07 0906 	add.w	r9, r7, r6
 8008c22:	d110      	bne.n	8008c46 <__cvt+0x92>
 8008c24:	783b      	ldrb	r3, [r7, #0]
 8008c26:	2b30      	cmp	r3, #48	; 0x30
 8008c28:	d10a      	bne.n	8008c40 <__cvt+0x8c>
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c36:	b918      	cbnz	r0, 8008c40 <__cvt+0x8c>
 8008c38:	f1c6 0601 	rsb	r6, r6, #1
 8008c3c:	f8ca 6000 	str.w	r6, [sl]
 8008c40:	f8da 3000 	ldr.w	r3, [sl]
 8008c44:	4499      	add	r9, r3
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c52:	b108      	cbz	r0, 8008c58 <__cvt+0xa4>
 8008c54:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c58:	2230      	movs	r2, #48	; 0x30
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	454b      	cmp	r3, r9
 8008c5e:	d307      	bcc.n	8008c70 <__cvt+0xbc>
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c64:	1bdb      	subs	r3, r3, r7
 8008c66:	4638      	mov	r0, r7
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	b004      	add	sp, #16
 8008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c70:	1c59      	adds	r1, r3, #1
 8008c72:	9103      	str	r1, [sp, #12]
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	e7f0      	b.n	8008c5a <__cvt+0xa6>

08008c78 <__exponent>:
 8008c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	bfb8      	it	lt
 8008c80:	4249      	neglt	r1, r1
 8008c82:	f803 2b02 	strb.w	r2, [r3], #2
 8008c86:	bfb4      	ite	lt
 8008c88:	222d      	movlt	r2, #45	; 0x2d
 8008c8a:	222b      	movge	r2, #43	; 0x2b
 8008c8c:	2909      	cmp	r1, #9
 8008c8e:	7042      	strb	r2, [r0, #1]
 8008c90:	dd2a      	ble.n	8008ce8 <__exponent+0x70>
 8008c92:	f10d 0407 	add.w	r4, sp, #7
 8008c96:	46a4      	mov	ip, r4
 8008c98:	270a      	movs	r7, #10
 8008c9a:	46a6      	mov	lr, r4
 8008c9c:	460a      	mov	r2, r1
 8008c9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ca2:	fb07 1516 	mls	r5, r7, r6, r1
 8008ca6:	3530      	adds	r5, #48	; 0x30
 8008ca8:	2a63      	cmp	r2, #99	; 0x63
 8008caa:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	dcf1      	bgt.n	8008c9a <__exponent+0x22>
 8008cb6:	3130      	adds	r1, #48	; 0x30
 8008cb8:	f1ae 0502 	sub.w	r5, lr, #2
 8008cbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cc0:	1c44      	adds	r4, r0, #1
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4561      	cmp	r1, ip
 8008cc6:	d30a      	bcc.n	8008cde <__exponent+0x66>
 8008cc8:	f10d 0209 	add.w	r2, sp, #9
 8008ccc:	eba2 020e 	sub.w	r2, r2, lr
 8008cd0:	4565      	cmp	r5, ip
 8008cd2:	bf88      	it	hi
 8008cd4:	2200      	movhi	r2, #0
 8008cd6:	4413      	add	r3, r2
 8008cd8:	1a18      	subs	r0, r3, r0
 8008cda:	b003      	add	sp, #12
 8008cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ce6:	e7ed      	b.n	8008cc4 <__exponent+0x4c>
 8008ce8:	2330      	movs	r3, #48	; 0x30
 8008cea:	3130      	adds	r1, #48	; 0x30
 8008cec:	7083      	strb	r3, [r0, #2]
 8008cee:	70c1      	strb	r1, [r0, #3]
 8008cf0:	1d03      	adds	r3, r0, #4
 8008cf2:	e7f1      	b.n	8008cd8 <__exponent+0x60>

08008cf4 <_printf_float>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	ed2d 8b02 	vpush	{d8}
 8008cfc:	b08d      	sub	sp, #52	; 0x34
 8008cfe:	460c      	mov	r4, r1
 8008d00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d04:	4616      	mov	r6, r2
 8008d06:	461f      	mov	r7, r3
 8008d08:	4605      	mov	r5, r0
 8008d0a:	f001 fd2f 	bl	800a76c <_localeconv_r>
 8008d0e:	f8d0 a000 	ldr.w	sl, [r0]
 8008d12:	4650      	mov	r0, sl
 8008d14:	f7f7 fa64 	bl	80001e0 <strlen>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	9305      	str	r3, [sp, #20]
 8008d20:	f8d8 3000 	ldr.w	r3, [r8]
 8008d24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008d28:	3307      	adds	r3, #7
 8008d2a:	f023 0307 	bic.w	r3, r3, #7
 8008d2e:	f103 0208 	add.w	r2, r3, #8
 8008d32:	f8c8 2000 	str.w	r2, [r8]
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d46:	9307      	str	r3, [sp, #28]
 8008d48:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d4c:	ee08 0a10 	vmov	s16, r0
 8008d50:	4b9f      	ldr	r3, [pc, #636]	; (8008fd0 <_printf_float+0x2dc>)
 8008d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	f7f7 feef 	bl	8000b3c <__aeabi_dcmpun>
 8008d5e:	bb88      	cbnz	r0, 8008dc4 <_printf_float+0xd0>
 8008d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d64:	4b9a      	ldr	r3, [pc, #616]	; (8008fd0 <_printf_float+0x2dc>)
 8008d66:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6a:	f7f7 fec9 	bl	8000b00 <__aeabi_dcmple>
 8008d6e:	bb48      	cbnz	r0, 8008dc4 <_printf_float+0xd0>
 8008d70:	2200      	movs	r2, #0
 8008d72:	2300      	movs	r3, #0
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 feb8 	bl	8000aec <__aeabi_dcmplt>
 8008d7c:	b110      	cbz	r0, 8008d84 <_printf_float+0x90>
 8008d7e:	232d      	movs	r3, #45	; 0x2d
 8008d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d84:	4b93      	ldr	r3, [pc, #588]	; (8008fd4 <_printf_float+0x2e0>)
 8008d86:	4894      	ldr	r0, [pc, #592]	; (8008fd8 <_printf_float+0x2e4>)
 8008d88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d8c:	bf94      	ite	ls
 8008d8e:	4698      	movls	r8, r3
 8008d90:	4680      	movhi	r8, r0
 8008d92:	2303      	movs	r3, #3
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	9b05      	ldr	r3, [sp, #20]
 8008d98:	f023 0204 	bic.w	r2, r3, #4
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	f04f 0900 	mov.w	r9, #0
 8008da2:	9700      	str	r7, [sp, #0]
 8008da4:	4633      	mov	r3, r6
 8008da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008da8:	4621      	mov	r1, r4
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 f9d8 	bl	8009160 <_printf_common>
 8008db0:	3001      	adds	r0, #1
 8008db2:	f040 8090 	bne.w	8008ed6 <_printf_float+0x1e2>
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	b00d      	add	sp, #52	; 0x34
 8008dbc:	ecbd 8b02 	vpop	{d8}
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	f7f7 feb6 	bl	8000b3c <__aeabi_dcmpun>
 8008dd0:	b140      	cbz	r0, 8008de4 <_printf_float+0xf0>
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bfbc      	itt	lt
 8008dd8:	232d      	movlt	r3, #45	; 0x2d
 8008dda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008dde:	487f      	ldr	r0, [pc, #508]	; (8008fdc <_printf_float+0x2e8>)
 8008de0:	4b7f      	ldr	r3, [pc, #508]	; (8008fe0 <_printf_float+0x2ec>)
 8008de2:	e7d1      	b.n	8008d88 <_printf_float+0x94>
 8008de4:	6863      	ldr	r3, [r4, #4]
 8008de6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008dea:	9206      	str	r2, [sp, #24]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	d13f      	bne.n	8008e70 <_printf_float+0x17c>
 8008df0:	2306      	movs	r3, #6
 8008df2:	6063      	str	r3, [r4, #4]
 8008df4:	9b05      	ldr	r3, [sp, #20]
 8008df6:	6861      	ldr	r1, [r4, #4]
 8008df8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9303      	str	r3, [sp, #12]
 8008e00:	ab0a      	add	r3, sp, #40	; 0x28
 8008e02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e06:	ab09      	add	r3, sp, #36	; 0x24
 8008e08:	ec49 8b10 	vmov	d0, r8, r9
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	6022      	str	r2, [r4, #0]
 8008e10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e14:	4628      	mov	r0, r5
 8008e16:	f7ff fecd 	bl	8008bb4 <__cvt>
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1e:	2b47      	cmp	r3, #71	; 0x47
 8008e20:	4680      	mov	r8, r0
 8008e22:	d108      	bne.n	8008e36 <_printf_float+0x142>
 8008e24:	1cc8      	adds	r0, r1, #3
 8008e26:	db02      	blt.n	8008e2e <_printf_float+0x13a>
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	dd41      	ble.n	8008eb2 <_printf_float+0x1be>
 8008e2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008e32:	fa5f fb8b 	uxtb.w	fp, fp
 8008e36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e3a:	d820      	bhi.n	8008e7e <_printf_float+0x18a>
 8008e3c:	3901      	subs	r1, #1
 8008e3e:	465a      	mov	r2, fp
 8008e40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e44:	9109      	str	r1, [sp, #36]	; 0x24
 8008e46:	f7ff ff17 	bl	8008c78 <__exponent>
 8008e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4c:	1813      	adds	r3, r2, r0
 8008e4e:	2a01      	cmp	r2, #1
 8008e50:	4681      	mov	r9, r0
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	dc02      	bgt.n	8008e5c <_printf_float+0x168>
 8008e56:	6822      	ldr	r2, [r4, #0]
 8008e58:	07d2      	lsls	r2, r2, #31
 8008e5a:	d501      	bpl.n	8008e60 <_printf_float+0x16c>
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d09c      	beq.n	8008da2 <_printf_float+0xae>
 8008e68:	232d      	movs	r3, #45	; 0x2d
 8008e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6e:	e798      	b.n	8008da2 <_printf_float+0xae>
 8008e70:	9a06      	ldr	r2, [sp, #24]
 8008e72:	2a47      	cmp	r2, #71	; 0x47
 8008e74:	d1be      	bne.n	8008df4 <_printf_float+0x100>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1bc      	bne.n	8008df4 <_printf_float+0x100>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e7b9      	b.n	8008df2 <_printf_float+0xfe>
 8008e7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e82:	d118      	bne.n	8008eb6 <_printf_float+0x1c2>
 8008e84:	2900      	cmp	r1, #0
 8008e86:	6863      	ldr	r3, [r4, #4]
 8008e88:	dd0b      	ble.n	8008ea2 <_printf_float+0x1ae>
 8008e8a:	6121      	str	r1, [r4, #16]
 8008e8c:	b913      	cbnz	r3, 8008e94 <_printf_float+0x1a0>
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	07d0      	lsls	r0, r2, #31
 8008e92:	d502      	bpl.n	8008e9a <_printf_float+0x1a6>
 8008e94:	3301      	adds	r3, #1
 8008e96:	440b      	add	r3, r1
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e9c:	f04f 0900 	mov.w	r9, #0
 8008ea0:	e7de      	b.n	8008e60 <_printf_float+0x16c>
 8008ea2:	b913      	cbnz	r3, 8008eaa <_printf_float+0x1b6>
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	07d2      	lsls	r2, r2, #31
 8008ea8:	d501      	bpl.n	8008eae <_printf_float+0x1ba>
 8008eaa:	3302      	adds	r3, #2
 8008eac:	e7f4      	b.n	8008e98 <_printf_float+0x1a4>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e7f2      	b.n	8008e98 <_printf_float+0x1a4>
 8008eb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb8:	4299      	cmp	r1, r3
 8008eba:	db05      	blt.n	8008ec8 <_printf_float+0x1d4>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	6121      	str	r1, [r4, #16]
 8008ec0:	07d8      	lsls	r0, r3, #31
 8008ec2:	d5ea      	bpl.n	8008e9a <_printf_float+0x1a6>
 8008ec4:	1c4b      	adds	r3, r1, #1
 8008ec6:	e7e7      	b.n	8008e98 <_printf_float+0x1a4>
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	bfd4      	ite	le
 8008ecc:	f1c1 0202 	rsble	r2, r1, #2
 8008ed0:	2201      	movgt	r2, #1
 8008ed2:	4413      	add	r3, r2
 8008ed4:	e7e0      	b.n	8008e98 <_printf_float+0x1a4>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	055a      	lsls	r2, r3, #21
 8008eda:	d407      	bmi.n	8008eec <_printf_float+0x1f8>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	4642      	mov	r2, r8
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d12c      	bne.n	8008f44 <_printf_float+0x250>
 8008eea:	e764      	b.n	8008db6 <_printf_float+0xc2>
 8008eec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ef0:	f240 80e0 	bls.w	80090b4 <_printf_float+0x3c0>
 8008ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2300      	movs	r3, #0
 8008efc:	f7f7 fdec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d034      	beq.n	8008f6e <_printf_float+0x27a>
 8008f04:	4a37      	ldr	r2, [pc, #220]	; (8008fe4 <_printf_float+0x2f0>)
 8008f06:	2301      	movs	r3, #1
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f43f af51 	beq.w	8008db6 <_printf_float+0xc2>
 8008f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	db02      	blt.n	8008f22 <_printf_float+0x22e>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	07d8      	lsls	r0, r3, #31
 8008f20:	d510      	bpl.n	8008f44 <_printf_float+0x250>
 8008f22:	ee18 3a10 	vmov	r3, s16
 8008f26:	4652      	mov	r2, sl
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f af41 	beq.w	8008db6 <_printf_float+0xc2>
 8008f34:	f04f 0800 	mov.w	r8, #0
 8008f38:	f104 091a 	add.w	r9, r4, #26
 8008f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	4543      	cmp	r3, r8
 8008f42:	dc09      	bgt.n	8008f58 <_printf_float+0x264>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	079b      	lsls	r3, r3, #30
 8008f48:	f100 8105 	bmi.w	8009156 <_printf_float+0x462>
 8008f4c:	68e0      	ldr	r0, [r4, #12]
 8008f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f50:	4298      	cmp	r0, r3
 8008f52:	bfb8      	it	lt
 8008f54:	4618      	movlt	r0, r3
 8008f56:	e730      	b.n	8008dba <_printf_float+0xc6>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	464a      	mov	r2, r9
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f af27 	beq.w	8008db6 <_printf_float+0xc2>
 8008f68:	f108 0801 	add.w	r8, r8, #1
 8008f6c:	e7e6      	b.n	8008f3c <_printf_float+0x248>
 8008f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dc39      	bgt.n	8008fe8 <_printf_float+0x2f4>
 8008f74:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <_printf_float+0x2f0>)
 8008f76:	2301      	movs	r3, #1
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	47b8      	blx	r7
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f43f af19 	beq.w	8008db6 <_printf_float+0xc2>
 8008f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	d102      	bne.n	8008f92 <_printf_float+0x29e>
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	07d9      	lsls	r1, r3, #31
 8008f90:	d5d8      	bpl.n	8008f44 <_printf_float+0x250>
 8008f92:	ee18 3a10 	vmov	r3, s16
 8008f96:	4652      	mov	r2, sl
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f43f af09 	beq.w	8008db6 <_printf_float+0xc2>
 8008fa4:	f04f 0900 	mov.w	r9, #0
 8008fa8:	f104 0a1a 	add.w	sl, r4, #26
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	425b      	negs	r3, r3
 8008fb0:	454b      	cmp	r3, r9
 8008fb2:	dc01      	bgt.n	8008fb8 <_printf_float+0x2c4>
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb6:	e792      	b.n	8008ede <_printf_float+0x1ea>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4652      	mov	r2, sl
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	47b8      	blx	r7
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	f43f aef7 	beq.w	8008db6 <_printf_float+0xc2>
 8008fc8:	f109 0901 	add.w	r9, r9, #1
 8008fcc:	e7ee      	b.n	8008fac <_printf_float+0x2b8>
 8008fce:	bf00      	nop
 8008fd0:	7fefffff 	.word	0x7fefffff
 8008fd4:	0800ba0c 	.word	0x0800ba0c
 8008fd8:	0800ba10 	.word	0x0800ba10
 8008fdc:	0800ba18 	.word	0x0800ba18
 8008fe0:	0800ba14 	.word	0x0800ba14
 8008fe4:	0800ba1c 	.word	0x0800ba1c
 8008fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fec:	429a      	cmp	r2, r3
 8008fee:	bfa8      	it	ge
 8008ff0:	461a      	movge	r2, r3
 8008ff2:	2a00      	cmp	r2, #0
 8008ff4:	4691      	mov	r9, r2
 8008ff6:	dc37      	bgt.n	8009068 <_printf_float+0x374>
 8008ff8:	f04f 0b00 	mov.w	fp, #0
 8008ffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009000:	f104 021a 	add.w	r2, r4, #26
 8009004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009006:	9305      	str	r3, [sp, #20]
 8009008:	eba3 0309 	sub.w	r3, r3, r9
 800900c:	455b      	cmp	r3, fp
 800900e:	dc33      	bgt.n	8009078 <_printf_float+0x384>
 8009010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009014:	429a      	cmp	r2, r3
 8009016:	db3b      	blt.n	8009090 <_printf_float+0x39c>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	07da      	lsls	r2, r3, #31
 800901c:	d438      	bmi.n	8009090 <_printf_float+0x39c>
 800901e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	eba2 0901 	sub.w	r9, r2, r1
 800902a:	4599      	cmp	r9, r3
 800902c:	bfa8      	it	ge
 800902e:	4699      	movge	r9, r3
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	dc35      	bgt.n	80090a2 <_printf_float+0x3ae>
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800903e:	f104 0a1a 	add.w	sl, r4, #26
 8009042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	eba3 0309 	sub.w	r3, r3, r9
 800904c:	4543      	cmp	r3, r8
 800904e:	f77f af79 	ble.w	8008f44 <_printf_float+0x250>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	47b8      	blx	r7
 800905c:	3001      	adds	r0, #1
 800905e:	f43f aeaa 	beq.w	8008db6 <_printf_float+0xc2>
 8009062:	f108 0801 	add.w	r8, r8, #1
 8009066:	e7ec      	b.n	8009042 <_printf_float+0x34e>
 8009068:	4613      	mov	r3, r2
 800906a:	4631      	mov	r1, r6
 800906c:	4642      	mov	r2, r8
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	d1c0      	bne.n	8008ff8 <_printf_float+0x304>
 8009076:	e69e      	b.n	8008db6 <_printf_float+0xc2>
 8009078:	2301      	movs	r3, #1
 800907a:	4631      	mov	r1, r6
 800907c:	4628      	mov	r0, r5
 800907e:	9205      	str	r2, [sp, #20]
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f ae97 	beq.w	8008db6 <_printf_float+0xc2>
 8009088:	9a05      	ldr	r2, [sp, #20]
 800908a:	f10b 0b01 	add.w	fp, fp, #1
 800908e:	e7b9      	b.n	8009004 <_printf_float+0x310>
 8009090:	ee18 3a10 	vmov	r3, s16
 8009094:	4652      	mov	r2, sl
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	d1be      	bne.n	800901e <_printf_float+0x32a>
 80090a0:	e689      	b.n	8008db6 <_printf_float+0xc2>
 80090a2:	9a05      	ldr	r2, [sp, #20]
 80090a4:	464b      	mov	r3, r9
 80090a6:	4442      	add	r2, r8
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	d1c1      	bne.n	8009036 <_printf_float+0x342>
 80090b2:	e680      	b.n	8008db6 <_printf_float+0xc2>
 80090b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090b6:	2a01      	cmp	r2, #1
 80090b8:	dc01      	bgt.n	80090be <_printf_float+0x3ca>
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d538      	bpl.n	8009130 <_printf_float+0x43c>
 80090be:	2301      	movs	r3, #1
 80090c0:	4642      	mov	r2, r8
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f ae74 	beq.w	8008db6 <_printf_float+0xc2>
 80090ce:	ee18 3a10 	vmov	r3, s16
 80090d2:	4652      	mov	r2, sl
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	f43f ae6b 	beq.w	8008db6 <_printf_float+0xc2>
 80090e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090e4:	2200      	movs	r2, #0
 80090e6:	2300      	movs	r3, #0
 80090e8:	f7f7 fcf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80090ec:	b9d8      	cbnz	r0, 8009126 <_printf_float+0x432>
 80090ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f0:	f108 0201 	add.w	r2, r8, #1
 80090f4:	3b01      	subs	r3, #1
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	d10e      	bne.n	800911e <_printf_float+0x42a>
 8009100:	e659      	b.n	8008db6 <_printf_float+0xc2>
 8009102:	2301      	movs	r3, #1
 8009104:	4652      	mov	r2, sl
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f ae52 	beq.w	8008db6 <_printf_float+0xc2>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009118:	3b01      	subs	r3, #1
 800911a:	4543      	cmp	r3, r8
 800911c:	dcf1      	bgt.n	8009102 <_printf_float+0x40e>
 800911e:	464b      	mov	r3, r9
 8009120:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009124:	e6dc      	b.n	8008ee0 <_printf_float+0x1ec>
 8009126:	f04f 0800 	mov.w	r8, #0
 800912a:	f104 0a1a 	add.w	sl, r4, #26
 800912e:	e7f2      	b.n	8009116 <_printf_float+0x422>
 8009130:	2301      	movs	r3, #1
 8009132:	4642      	mov	r2, r8
 8009134:	e7df      	b.n	80090f6 <_printf_float+0x402>
 8009136:	2301      	movs	r3, #1
 8009138:	464a      	mov	r2, r9
 800913a:	4631      	mov	r1, r6
 800913c:	4628      	mov	r0, r5
 800913e:	47b8      	blx	r7
 8009140:	3001      	adds	r0, #1
 8009142:	f43f ae38 	beq.w	8008db6 <_printf_float+0xc2>
 8009146:	f108 0801 	add.w	r8, r8, #1
 800914a:	68e3      	ldr	r3, [r4, #12]
 800914c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800914e:	1a5b      	subs	r3, r3, r1
 8009150:	4543      	cmp	r3, r8
 8009152:	dcf0      	bgt.n	8009136 <_printf_float+0x442>
 8009154:	e6fa      	b.n	8008f4c <_printf_float+0x258>
 8009156:	f04f 0800 	mov.w	r8, #0
 800915a:	f104 0919 	add.w	r9, r4, #25
 800915e:	e7f4      	b.n	800914a <_printf_float+0x456>

08009160 <_printf_common>:
 8009160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009164:	4616      	mov	r6, r2
 8009166:	4699      	mov	r9, r3
 8009168:	688a      	ldr	r2, [r1, #8]
 800916a:	690b      	ldr	r3, [r1, #16]
 800916c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009170:	4293      	cmp	r3, r2
 8009172:	bfb8      	it	lt
 8009174:	4613      	movlt	r3, r2
 8009176:	6033      	str	r3, [r6, #0]
 8009178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800917c:	4607      	mov	r7, r0
 800917e:	460c      	mov	r4, r1
 8009180:	b10a      	cbz	r2, 8009186 <_printf_common+0x26>
 8009182:	3301      	adds	r3, #1
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	0699      	lsls	r1, r3, #26
 800918a:	bf42      	ittt	mi
 800918c:	6833      	ldrmi	r3, [r6, #0]
 800918e:	3302      	addmi	r3, #2
 8009190:	6033      	strmi	r3, [r6, #0]
 8009192:	6825      	ldr	r5, [r4, #0]
 8009194:	f015 0506 	ands.w	r5, r5, #6
 8009198:	d106      	bne.n	80091a8 <_printf_common+0x48>
 800919a:	f104 0a19 	add.w	sl, r4, #25
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	6832      	ldr	r2, [r6, #0]
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	dc26      	bgt.n	80091f6 <_printf_common+0x96>
 80091a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091ac:	1e13      	subs	r3, r2, #0
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	bf18      	it	ne
 80091b2:	2301      	movne	r3, #1
 80091b4:	0692      	lsls	r2, r2, #26
 80091b6:	d42b      	bmi.n	8009210 <_printf_common+0xb0>
 80091b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091bc:	4649      	mov	r1, r9
 80091be:	4638      	mov	r0, r7
 80091c0:	47c0      	blx	r8
 80091c2:	3001      	adds	r0, #1
 80091c4:	d01e      	beq.n	8009204 <_printf_common+0xa4>
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	68e5      	ldr	r5, [r4, #12]
 80091ca:	6832      	ldr	r2, [r6, #0]
 80091cc:	f003 0306 	and.w	r3, r3, #6
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	bf08      	it	eq
 80091d4:	1aad      	subeq	r5, r5, r2
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	6922      	ldr	r2, [r4, #16]
 80091da:	bf0c      	ite	eq
 80091dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e0:	2500      	movne	r5, #0
 80091e2:	4293      	cmp	r3, r2
 80091e4:	bfc4      	itt	gt
 80091e6:	1a9b      	subgt	r3, r3, r2
 80091e8:	18ed      	addgt	r5, r5, r3
 80091ea:	2600      	movs	r6, #0
 80091ec:	341a      	adds	r4, #26
 80091ee:	42b5      	cmp	r5, r6
 80091f0:	d11a      	bne.n	8009228 <_printf_common+0xc8>
 80091f2:	2000      	movs	r0, #0
 80091f4:	e008      	b.n	8009208 <_printf_common+0xa8>
 80091f6:	2301      	movs	r3, #1
 80091f8:	4652      	mov	r2, sl
 80091fa:	4649      	mov	r1, r9
 80091fc:	4638      	mov	r0, r7
 80091fe:	47c0      	blx	r8
 8009200:	3001      	adds	r0, #1
 8009202:	d103      	bne.n	800920c <_printf_common+0xac>
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920c:	3501      	adds	r5, #1
 800920e:	e7c6      	b.n	800919e <_printf_common+0x3e>
 8009210:	18e1      	adds	r1, r4, r3
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	2030      	movs	r0, #48	; 0x30
 8009216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800921a:	4422      	add	r2, r4
 800921c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009224:	3302      	adds	r3, #2
 8009226:	e7c7      	b.n	80091b8 <_printf_common+0x58>
 8009228:	2301      	movs	r3, #1
 800922a:	4622      	mov	r2, r4
 800922c:	4649      	mov	r1, r9
 800922e:	4638      	mov	r0, r7
 8009230:	47c0      	blx	r8
 8009232:	3001      	adds	r0, #1
 8009234:	d0e6      	beq.n	8009204 <_printf_common+0xa4>
 8009236:	3601      	adds	r6, #1
 8009238:	e7d9      	b.n	80091ee <_printf_common+0x8e>
	...

0800923c <_printf_i>:
 800923c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	460c      	mov	r4, r1
 8009242:	4691      	mov	r9, r2
 8009244:	7e27      	ldrb	r7, [r4, #24]
 8009246:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009248:	2f78      	cmp	r7, #120	; 0x78
 800924a:	4680      	mov	r8, r0
 800924c:	469a      	mov	sl, r3
 800924e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009252:	d807      	bhi.n	8009264 <_printf_i+0x28>
 8009254:	2f62      	cmp	r7, #98	; 0x62
 8009256:	d80a      	bhi.n	800926e <_printf_i+0x32>
 8009258:	2f00      	cmp	r7, #0
 800925a:	f000 80d8 	beq.w	800940e <_printf_i+0x1d2>
 800925e:	2f58      	cmp	r7, #88	; 0x58
 8009260:	f000 80a3 	beq.w	80093aa <_printf_i+0x16e>
 8009264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800926c:	e03a      	b.n	80092e4 <_printf_i+0xa8>
 800926e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009272:	2b15      	cmp	r3, #21
 8009274:	d8f6      	bhi.n	8009264 <_printf_i+0x28>
 8009276:	a001      	add	r0, pc, #4	; (adr r0, 800927c <_printf_i+0x40>)
 8009278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800927c:	080092d5 	.word	0x080092d5
 8009280:	080092e9 	.word	0x080092e9
 8009284:	08009265 	.word	0x08009265
 8009288:	08009265 	.word	0x08009265
 800928c:	08009265 	.word	0x08009265
 8009290:	08009265 	.word	0x08009265
 8009294:	080092e9 	.word	0x080092e9
 8009298:	08009265 	.word	0x08009265
 800929c:	08009265 	.word	0x08009265
 80092a0:	08009265 	.word	0x08009265
 80092a4:	08009265 	.word	0x08009265
 80092a8:	080093f5 	.word	0x080093f5
 80092ac:	08009319 	.word	0x08009319
 80092b0:	080093d7 	.word	0x080093d7
 80092b4:	08009265 	.word	0x08009265
 80092b8:	08009265 	.word	0x08009265
 80092bc:	08009417 	.word	0x08009417
 80092c0:	08009265 	.word	0x08009265
 80092c4:	08009319 	.word	0x08009319
 80092c8:	08009265 	.word	0x08009265
 80092cc:	08009265 	.word	0x08009265
 80092d0:	080093df 	.word	0x080093df
 80092d4:	680b      	ldr	r3, [r1, #0]
 80092d6:	1d1a      	adds	r2, r3, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	600a      	str	r2, [r1, #0]
 80092dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092e4:	2301      	movs	r3, #1
 80092e6:	e0a3      	b.n	8009430 <_printf_i+0x1f4>
 80092e8:	6825      	ldr	r5, [r4, #0]
 80092ea:	6808      	ldr	r0, [r1, #0]
 80092ec:	062e      	lsls	r6, r5, #24
 80092ee:	f100 0304 	add.w	r3, r0, #4
 80092f2:	d50a      	bpl.n	800930a <_printf_i+0xce>
 80092f4:	6805      	ldr	r5, [r0, #0]
 80092f6:	600b      	str	r3, [r1, #0]
 80092f8:	2d00      	cmp	r5, #0
 80092fa:	da03      	bge.n	8009304 <_printf_i+0xc8>
 80092fc:	232d      	movs	r3, #45	; 0x2d
 80092fe:	426d      	negs	r5, r5
 8009300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009304:	485e      	ldr	r0, [pc, #376]	; (8009480 <_printf_i+0x244>)
 8009306:	230a      	movs	r3, #10
 8009308:	e019      	b.n	800933e <_printf_i+0x102>
 800930a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800930e:	6805      	ldr	r5, [r0, #0]
 8009310:	600b      	str	r3, [r1, #0]
 8009312:	bf18      	it	ne
 8009314:	b22d      	sxthne	r5, r5
 8009316:	e7ef      	b.n	80092f8 <_printf_i+0xbc>
 8009318:	680b      	ldr	r3, [r1, #0]
 800931a:	6825      	ldr	r5, [r4, #0]
 800931c:	1d18      	adds	r0, r3, #4
 800931e:	6008      	str	r0, [r1, #0]
 8009320:	0628      	lsls	r0, r5, #24
 8009322:	d501      	bpl.n	8009328 <_printf_i+0xec>
 8009324:	681d      	ldr	r5, [r3, #0]
 8009326:	e002      	b.n	800932e <_printf_i+0xf2>
 8009328:	0669      	lsls	r1, r5, #25
 800932a:	d5fb      	bpl.n	8009324 <_printf_i+0xe8>
 800932c:	881d      	ldrh	r5, [r3, #0]
 800932e:	4854      	ldr	r0, [pc, #336]	; (8009480 <_printf_i+0x244>)
 8009330:	2f6f      	cmp	r7, #111	; 0x6f
 8009332:	bf0c      	ite	eq
 8009334:	2308      	moveq	r3, #8
 8009336:	230a      	movne	r3, #10
 8009338:	2100      	movs	r1, #0
 800933a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800933e:	6866      	ldr	r6, [r4, #4]
 8009340:	60a6      	str	r6, [r4, #8]
 8009342:	2e00      	cmp	r6, #0
 8009344:	bfa2      	ittt	ge
 8009346:	6821      	ldrge	r1, [r4, #0]
 8009348:	f021 0104 	bicge.w	r1, r1, #4
 800934c:	6021      	strge	r1, [r4, #0]
 800934e:	b90d      	cbnz	r5, 8009354 <_printf_i+0x118>
 8009350:	2e00      	cmp	r6, #0
 8009352:	d04d      	beq.n	80093f0 <_printf_i+0x1b4>
 8009354:	4616      	mov	r6, r2
 8009356:	fbb5 f1f3 	udiv	r1, r5, r3
 800935a:	fb03 5711 	mls	r7, r3, r1, r5
 800935e:	5dc7      	ldrb	r7, [r0, r7]
 8009360:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009364:	462f      	mov	r7, r5
 8009366:	42bb      	cmp	r3, r7
 8009368:	460d      	mov	r5, r1
 800936a:	d9f4      	bls.n	8009356 <_printf_i+0x11a>
 800936c:	2b08      	cmp	r3, #8
 800936e:	d10b      	bne.n	8009388 <_printf_i+0x14c>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	07df      	lsls	r7, r3, #31
 8009374:	d508      	bpl.n	8009388 <_printf_i+0x14c>
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	6861      	ldr	r1, [r4, #4]
 800937a:	4299      	cmp	r1, r3
 800937c:	bfde      	ittt	le
 800937e:	2330      	movle	r3, #48	; 0x30
 8009380:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009384:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009388:	1b92      	subs	r2, r2, r6
 800938a:	6122      	str	r2, [r4, #16]
 800938c:	f8cd a000 	str.w	sl, [sp]
 8009390:	464b      	mov	r3, r9
 8009392:	aa03      	add	r2, sp, #12
 8009394:	4621      	mov	r1, r4
 8009396:	4640      	mov	r0, r8
 8009398:	f7ff fee2 	bl	8009160 <_printf_common>
 800939c:	3001      	adds	r0, #1
 800939e:	d14c      	bne.n	800943a <_printf_i+0x1fe>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b004      	add	sp, #16
 80093a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093aa:	4835      	ldr	r0, [pc, #212]	; (8009480 <_printf_i+0x244>)
 80093ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	680e      	ldr	r6, [r1, #0]
 80093b4:	061f      	lsls	r7, r3, #24
 80093b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80093ba:	600e      	str	r6, [r1, #0]
 80093bc:	d514      	bpl.n	80093e8 <_printf_i+0x1ac>
 80093be:	07d9      	lsls	r1, r3, #31
 80093c0:	bf44      	itt	mi
 80093c2:	f043 0320 	orrmi.w	r3, r3, #32
 80093c6:	6023      	strmi	r3, [r4, #0]
 80093c8:	b91d      	cbnz	r5, 80093d2 <_printf_i+0x196>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	f023 0320 	bic.w	r3, r3, #32
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	2310      	movs	r3, #16
 80093d4:	e7b0      	b.n	8009338 <_printf_i+0xfc>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	f043 0320 	orr.w	r3, r3, #32
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	2378      	movs	r3, #120	; 0x78
 80093e0:	4828      	ldr	r0, [pc, #160]	; (8009484 <_printf_i+0x248>)
 80093e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093e6:	e7e3      	b.n	80093b0 <_printf_i+0x174>
 80093e8:	065e      	lsls	r6, r3, #25
 80093ea:	bf48      	it	mi
 80093ec:	b2ad      	uxthmi	r5, r5
 80093ee:	e7e6      	b.n	80093be <_printf_i+0x182>
 80093f0:	4616      	mov	r6, r2
 80093f2:	e7bb      	b.n	800936c <_printf_i+0x130>
 80093f4:	680b      	ldr	r3, [r1, #0]
 80093f6:	6826      	ldr	r6, [r4, #0]
 80093f8:	6960      	ldr	r0, [r4, #20]
 80093fa:	1d1d      	adds	r5, r3, #4
 80093fc:	600d      	str	r5, [r1, #0]
 80093fe:	0635      	lsls	r5, r6, #24
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	d501      	bpl.n	8009408 <_printf_i+0x1cc>
 8009404:	6018      	str	r0, [r3, #0]
 8009406:	e002      	b.n	800940e <_printf_i+0x1d2>
 8009408:	0671      	lsls	r1, r6, #25
 800940a:	d5fb      	bpl.n	8009404 <_printf_i+0x1c8>
 800940c:	8018      	strh	r0, [r3, #0]
 800940e:	2300      	movs	r3, #0
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	4616      	mov	r6, r2
 8009414:	e7ba      	b.n	800938c <_printf_i+0x150>
 8009416:	680b      	ldr	r3, [r1, #0]
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	600a      	str	r2, [r1, #0]
 800941c:	681e      	ldr	r6, [r3, #0]
 800941e:	6862      	ldr	r2, [r4, #4]
 8009420:	2100      	movs	r1, #0
 8009422:	4630      	mov	r0, r6
 8009424:	f7f6 fee4 	bl	80001f0 <memchr>
 8009428:	b108      	cbz	r0, 800942e <_printf_i+0x1f2>
 800942a:	1b80      	subs	r0, r0, r6
 800942c:	6060      	str	r0, [r4, #4]
 800942e:	6863      	ldr	r3, [r4, #4]
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	2300      	movs	r3, #0
 8009434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009438:	e7a8      	b.n	800938c <_printf_i+0x150>
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	4632      	mov	r2, r6
 800943e:	4649      	mov	r1, r9
 8009440:	4640      	mov	r0, r8
 8009442:	47d0      	blx	sl
 8009444:	3001      	adds	r0, #1
 8009446:	d0ab      	beq.n	80093a0 <_printf_i+0x164>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	079b      	lsls	r3, r3, #30
 800944c:	d413      	bmi.n	8009476 <_printf_i+0x23a>
 800944e:	68e0      	ldr	r0, [r4, #12]
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	4298      	cmp	r0, r3
 8009454:	bfb8      	it	lt
 8009456:	4618      	movlt	r0, r3
 8009458:	e7a4      	b.n	80093a4 <_printf_i+0x168>
 800945a:	2301      	movs	r3, #1
 800945c:	4632      	mov	r2, r6
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	47d0      	blx	sl
 8009464:	3001      	adds	r0, #1
 8009466:	d09b      	beq.n	80093a0 <_printf_i+0x164>
 8009468:	3501      	adds	r5, #1
 800946a:	68e3      	ldr	r3, [r4, #12]
 800946c:	9903      	ldr	r1, [sp, #12]
 800946e:	1a5b      	subs	r3, r3, r1
 8009470:	42ab      	cmp	r3, r5
 8009472:	dcf2      	bgt.n	800945a <_printf_i+0x21e>
 8009474:	e7eb      	b.n	800944e <_printf_i+0x212>
 8009476:	2500      	movs	r5, #0
 8009478:	f104 0619 	add.w	r6, r4, #25
 800947c:	e7f5      	b.n	800946a <_printf_i+0x22e>
 800947e:	bf00      	nop
 8009480:	0800ba1e 	.word	0x0800ba1e
 8009484:	0800ba2f 	.word	0x0800ba2f

08009488 <_puts_r>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	460e      	mov	r6, r1
 800948c:	4605      	mov	r5, r0
 800948e:	b118      	cbz	r0, 8009498 <_puts_r+0x10>
 8009490:	6983      	ldr	r3, [r0, #24]
 8009492:	b90b      	cbnz	r3, 8009498 <_puts_r+0x10>
 8009494:	f7ff fa58 	bl	8008948 <__sinit>
 8009498:	69ab      	ldr	r3, [r5, #24]
 800949a:	68ac      	ldr	r4, [r5, #8]
 800949c:	b913      	cbnz	r3, 80094a4 <_puts_r+0x1c>
 800949e:	4628      	mov	r0, r5
 80094a0:	f7ff fa52 	bl	8008948 <__sinit>
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <_puts_r+0xd0>)
 80094a6:	429c      	cmp	r4, r3
 80094a8:	d120      	bne.n	80094ec <_puts_r+0x64>
 80094aa:	686c      	ldr	r4, [r5, #4]
 80094ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094ae:	07db      	lsls	r3, r3, #31
 80094b0:	d405      	bmi.n	80094be <_puts_r+0x36>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	0598      	lsls	r0, r3, #22
 80094b6:	d402      	bmi.n	80094be <_puts_r+0x36>
 80094b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ba:	f7ff fb08 	bl	8008ace <__retarget_lock_acquire_recursive>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	0719      	lsls	r1, r3, #28
 80094c2:	d51d      	bpl.n	8009500 <_puts_r+0x78>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	b1db      	cbz	r3, 8009500 <_puts_r+0x78>
 80094c8:	3e01      	subs	r6, #1
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094d0:	3b01      	subs	r3, #1
 80094d2:	60a3      	str	r3, [r4, #8]
 80094d4:	bb39      	cbnz	r1, 8009526 <_puts_r+0x9e>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	da38      	bge.n	800954c <_puts_r+0xc4>
 80094da:	4622      	mov	r2, r4
 80094dc:	210a      	movs	r1, #10
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f926 	bl	8009730 <__swbuf_r>
 80094e4:	3001      	adds	r0, #1
 80094e6:	d011      	beq.n	800950c <_puts_r+0x84>
 80094e8:	250a      	movs	r5, #10
 80094ea:	e011      	b.n	8009510 <_puts_r+0x88>
 80094ec:	4b1b      	ldr	r3, [pc, #108]	; (800955c <_puts_r+0xd4>)
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d101      	bne.n	80094f6 <_puts_r+0x6e>
 80094f2:	68ac      	ldr	r4, [r5, #8]
 80094f4:	e7da      	b.n	80094ac <_puts_r+0x24>
 80094f6:	4b1a      	ldr	r3, [pc, #104]	; (8009560 <_puts_r+0xd8>)
 80094f8:	429c      	cmp	r4, r3
 80094fa:	bf08      	it	eq
 80094fc:	68ec      	ldreq	r4, [r5, #12]
 80094fe:	e7d5      	b.n	80094ac <_puts_r+0x24>
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f978 	bl	80097f8 <__swsetup_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	d0dd      	beq.n	80094c8 <_puts_r+0x40>
 800950c:	f04f 35ff 	mov.w	r5, #4294967295
 8009510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009512:	07da      	lsls	r2, r3, #31
 8009514:	d405      	bmi.n	8009522 <_puts_r+0x9a>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	059b      	lsls	r3, r3, #22
 800951a:	d402      	bmi.n	8009522 <_puts_r+0x9a>
 800951c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800951e:	f7ff fad7 	bl	8008ad0 <__retarget_lock_release_recursive>
 8009522:	4628      	mov	r0, r5
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	2b00      	cmp	r3, #0
 8009528:	da04      	bge.n	8009534 <_puts_r+0xac>
 800952a:	69a2      	ldr	r2, [r4, #24]
 800952c:	429a      	cmp	r2, r3
 800952e:	dc06      	bgt.n	800953e <_puts_r+0xb6>
 8009530:	290a      	cmp	r1, #10
 8009532:	d004      	beq.n	800953e <_puts_r+0xb6>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	6022      	str	r2, [r4, #0]
 800953a:	7019      	strb	r1, [r3, #0]
 800953c:	e7c5      	b.n	80094ca <_puts_r+0x42>
 800953e:	4622      	mov	r2, r4
 8009540:	4628      	mov	r0, r5
 8009542:	f000 f8f5 	bl	8009730 <__swbuf_r>
 8009546:	3001      	adds	r0, #1
 8009548:	d1bf      	bne.n	80094ca <_puts_r+0x42>
 800954a:	e7df      	b.n	800950c <_puts_r+0x84>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	250a      	movs	r5, #10
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	6022      	str	r2, [r4, #0]
 8009554:	701d      	strb	r5, [r3, #0]
 8009556:	e7db      	b.n	8009510 <_puts_r+0x88>
 8009558:	0800b9c8 	.word	0x0800b9c8
 800955c:	0800b9e8 	.word	0x0800b9e8
 8009560:	0800b9a8 	.word	0x0800b9a8

08009564 <puts>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <puts+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f7ff bf8d 	b.w	8009488 <_puts_r>
 800956e:	bf00      	nop
 8009570:	200000dc 	.word	0x200000dc

08009574 <cleanup_glue>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	460c      	mov	r4, r1
 8009578:	6809      	ldr	r1, [r1, #0]
 800957a:	4605      	mov	r5, r0
 800957c:	b109      	cbz	r1, 8009582 <cleanup_glue+0xe>
 800957e:	f7ff fff9 	bl	8009574 <cleanup_glue>
 8009582:	4621      	mov	r1, r4
 8009584:	4628      	mov	r0, r5
 8009586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958a:	f001 bd0b 	b.w	800afa4 <_free_r>
	...

08009590 <_reclaim_reent>:
 8009590:	4b2c      	ldr	r3, [pc, #176]	; (8009644 <_reclaim_reent+0xb4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4283      	cmp	r3, r0
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	d051      	beq.n	8009640 <_reclaim_reent+0xb0>
 800959c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800959e:	b143      	cbz	r3, 80095b2 <_reclaim_reent+0x22>
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d14a      	bne.n	800963c <_reclaim_reent+0xac>
 80095a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	b111      	cbz	r1, 80095b2 <_reclaim_reent+0x22>
 80095ac:	4620      	mov	r0, r4
 80095ae:	f001 fcf9 	bl	800afa4 <_free_r>
 80095b2:	6961      	ldr	r1, [r4, #20]
 80095b4:	b111      	cbz	r1, 80095bc <_reclaim_reent+0x2c>
 80095b6:	4620      	mov	r0, r4
 80095b8:	f001 fcf4 	bl	800afa4 <_free_r>
 80095bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095be:	b111      	cbz	r1, 80095c6 <_reclaim_reent+0x36>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f001 fcef 	bl	800afa4 <_free_r>
 80095c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095c8:	b111      	cbz	r1, 80095d0 <_reclaim_reent+0x40>
 80095ca:	4620      	mov	r0, r4
 80095cc:	f001 fcea 	bl	800afa4 <_free_r>
 80095d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80095d2:	b111      	cbz	r1, 80095da <_reclaim_reent+0x4a>
 80095d4:	4620      	mov	r0, r4
 80095d6:	f001 fce5 	bl	800afa4 <_free_r>
 80095da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80095dc:	b111      	cbz	r1, 80095e4 <_reclaim_reent+0x54>
 80095de:	4620      	mov	r0, r4
 80095e0:	f001 fce0 	bl	800afa4 <_free_r>
 80095e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80095e6:	b111      	cbz	r1, 80095ee <_reclaim_reent+0x5e>
 80095e8:	4620      	mov	r0, r4
 80095ea:	f001 fcdb 	bl	800afa4 <_free_r>
 80095ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80095f0:	b111      	cbz	r1, 80095f8 <_reclaim_reent+0x68>
 80095f2:	4620      	mov	r0, r4
 80095f4:	f001 fcd6 	bl	800afa4 <_free_r>
 80095f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095fa:	b111      	cbz	r1, 8009602 <_reclaim_reent+0x72>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f001 fcd1 	bl	800afa4 <_free_r>
 8009602:	69a3      	ldr	r3, [r4, #24]
 8009604:	b1e3      	cbz	r3, 8009640 <_reclaim_reent+0xb0>
 8009606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009608:	4620      	mov	r0, r4
 800960a:	4798      	blx	r3
 800960c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800960e:	b1b9      	cbz	r1, 8009640 <_reclaim_reent+0xb0>
 8009610:	4620      	mov	r0, r4
 8009612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009616:	f7ff bfad 	b.w	8009574 <cleanup_glue>
 800961a:	5949      	ldr	r1, [r1, r5]
 800961c:	b941      	cbnz	r1, 8009630 <_reclaim_reent+0xa0>
 800961e:	3504      	adds	r5, #4
 8009620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009622:	2d80      	cmp	r5, #128	; 0x80
 8009624:	68d9      	ldr	r1, [r3, #12]
 8009626:	d1f8      	bne.n	800961a <_reclaim_reent+0x8a>
 8009628:	4620      	mov	r0, r4
 800962a:	f001 fcbb 	bl	800afa4 <_free_r>
 800962e:	e7ba      	b.n	80095a6 <_reclaim_reent+0x16>
 8009630:	680e      	ldr	r6, [r1, #0]
 8009632:	4620      	mov	r0, r4
 8009634:	f001 fcb6 	bl	800afa4 <_free_r>
 8009638:	4631      	mov	r1, r6
 800963a:	e7ef      	b.n	800961c <_reclaim_reent+0x8c>
 800963c:	2500      	movs	r5, #0
 800963e:	e7ef      	b.n	8009620 <_reclaim_reent+0x90>
 8009640:	bd70      	pop	{r4, r5, r6, pc}
 8009642:	bf00      	nop
 8009644:	200000dc 	.word	0x200000dc

08009648 <_sbrk_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d06      	ldr	r5, [pc, #24]	; (8009664 <_sbrk_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7f8 ff60 	bl	8002518 <_sbrk>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_sbrk_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_sbrk_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	200053e4 	.word	0x200053e4

08009668 <siprintf>:
 8009668:	b40e      	push	{r1, r2, r3}
 800966a:	b500      	push	{lr}
 800966c:	b09c      	sub	sp, #112	; 0x70
 800966e:	ab1d      	add	r3, sp, #116	; 0x74
 8009670:	9002      	str	r0, [sp, #8]
 8009672:	9006      	str	r0, [sp, #24]
 8009674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009678:	4809      	ldr	r0, [pc, #36]	; (80096a0 <siprintf+0x38>)
 800967a:	9107      	str	r1, [sp, #28]
 800967c:	9104      	str	r1, [sp, #16]
 800967e:	4909      	ldr	r1, [pc, #36]	; (80096a4 <siprintf+0x3c>)
 8009680:	f853 2b04 	ldr.w	r2, [r3], #4
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	a902      	add	r1, sp, #8
 800968c:	f001 fd36 	bl	800b0fc <_svfiprintf_r>
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	b01c      	add	sp, #112	; 0x70
 8009698:	f85d eb04 	ldr.w	lr, [sp], #4
 800969c:	b003      	add	sp, #12
 800969e:	4770      	bx	lr
 80096a0:	200000dc 	.word	0x200000dc
 80096a4:	ffff0208 	.word	0xffff0208

080096a8 <__sread>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	460c      	mov	r4, r1
 80096ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b0:	f001 ff7e 	bl	800b5b0 <_read_r>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	bfab      	itete	ge
 80096b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096ba:	89a3      	ldrhlt	r3, [r4, #12]
 80096bc:	181b      	addge	r3, r3, r0
 80096be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096c2:	bfac      	ite	ge
 80096c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80096c6:	81a3      	strhlt	r3, [r4, #12]
 80096c8:	bd10      	pop	{r4, pc}

080096ca <__swrite>:
 80096ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ce:	461f      	mov	r7, r3
 80096d0:	898b      	ldrh	r3, [r1, #12]
 80096d2:	05db      	lsls	r3, r3, #23
 80096d4:	4605      	mov	r5, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	4616      	mov	r6, r2
 80096da:	d505      	bpl.n	80096e8 <__swrite+0x1e>
 80096dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e0:	2302      	movs	r3, #2
 80096e2:	2200      	movs	r2, #0
 80096e4:	f001 f846 	bl	800a774 <_lseek_r>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	4632      	mov	r2, r6
 80096f6:	463b      	mov	r3, r7
 80096f8:	4628      	mov	r0, r5
 80096fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096fe:	f000 b869 	b.w	80097d4 <_write_r>

08009702 <__sseek>:
 8009702:	b510      	push	{r4, lr}
 8009704:	460c      	mov	r4, r1
 8009706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800970a:	f001 f833 	bl	800a774 <_lseek_r>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	bf15      	itete	ne
 8009714:	6560      	strne	r0, [r4, #84]	; 0x54
 8009716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800971a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800971e:	81a3      	strheq	r3, [r4, #12]
 8009720:	bf18      	it	ne
 8009722:	81a3      	strhne	r3, [r4, #12]
 8009724:	bd10      	pop	{r4, pc}

08009726 <__sclose>:
 8009726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800972a:	f000 b8d3 	b.w	80098d4 <_close_r>
	...

08009730 <__swbuf_r>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	460e      	mov	r6, r1
 8009734:	4614      	mov	r4, r2
 8009736:	4605      	mov	r5, r0
 8009738:	b118      	cbz	r0, 8009742 <__swbuf_r+0x12>
 800973a:	6983      	ldr	r3, [r0, #24]
 800973c:	b90b      	cbnz	r3, 8009742 <__swbuf_r+0x12>
 800973e:	f7ff f903 	bl	8008948 <__sinit>
 8009742:	4b21      	ldr	r3, [pc, #132]	; (80097c8 <__swbuf_r+0x98>)
 8009744:	429c      	cmp	r4, r3
 8009746:	d12b      	bne.n	80097a0 <__swbuf_r+0x70>
 8009748:	686c      	ldr	r4, [r5, #4]
 800974a:	69a3      	ldr	r3, [r4, #24]
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	071a      	lsls	r2, r3, #28
 8009752:	d52f      	bpl.n	80097b4 <__swbuf_r+0x84>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	b36b      	cbz	r3, 80097b4 <__swbuf_r+0x84>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1ac0      	subs	r0, r0, r3
 800975e:	6963      	ldr	r3, [r4, #20]
 8009760:	b2f6      	uxtb	r6, r6
 8009762:	4283      	cmp	r3, r0
 8009764:	4637      	mov	r7, r6
 8009766:	dc04      	bgt.n	8009772 <__swbuf_r+0x42>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 ffc2 	bl	800a6f4 <_fflush_r>
 8009770:	bb30      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	3b01      	subs	r3, #1
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	701e      	strb	r6, [r3, #0]
 8009780:	6963      	ldr	r3, [r4, #20]
 8009782:	3001      	adds	r0, #1
 8009784:	4283      	cmp	r3, r0
 8009786:	d004      	beq.n	8009792 <__swbuf_r+0x62>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	07db      	lsls	r3, r3, #31
 800978c:	d506      	bpl.n	800979c <__swbuf_r+0x6c>
 800978e:	2e0a      	cmp	r6, #10
 8009790:	d104      	bne.n	800979c <__swbuf_r+0x6c>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 ffad 	bl	800a6f4 <_fflush_r>
 800979a:	b988      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 800979c:	4638      	mov	r0, r7
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <__swbuf_r+0x9c>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d101      	bne.n	80097aa <__swbuf_r+0x7a>
 80097a6:	68ac      	ldr	r4, [r5, #8]
 80097a8:	e7cf      	b.n	800974a <__swbuf_r+0x1a>
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <__swbuf_r+0xa0>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	bf08      	it	eq
 80097b0:	68ec      	ldreq	r4, [r5, #12]
 80097b2:	e7ca      	b.n	800974a <__swbuf_r+0x1a>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 f81e 	bl	80097f8 <__swsetup_r>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0cb      	beq.n	8009758 <__swbuf_r+0x28>
 80097c0:	f04f 37ff 	mov.w	r7, #4294967295
 80097c4:	e7ea      	b.n	800979c <__swbuf_r+0x6c>
 80097c6:	bf00      	nop
 80097c8:	0800b9c8 	.word	0x0800b9c8
 80097cc:	0800b9e8 	.word	0x0800b9e8
 80097d0:	0800b9a8 	.word	0x0800b9a8

080097d4 <_write_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	; (80097f4 <_write_r+0x20>)
 80097d8:	4604      	mov	r4, r0
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7f8 fe47 	bl	8002476 <_write>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_write_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_write_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	200053e4 	.word	0x200053e4

080097f8 <__swsetup_r>:
 80097f8:	4b32      	ldr	r3, [pc, #200]	; (80098c4 <__swsetup_r+0xcc>)
 80097fa:	b570      	push	{r4, r5, r6, lr}
 80097fc:	681d      	ldr	r5, [r3, #0]
 80097fe:	4606      	mov	r6, r0
 8009800:	460c      	mov	r4, r1
 8009802:	b125      	cbz	r5, 800980e <__swsetup_r+0x16>
 8009804:	69ab      	ldr	r3, [r5, #24]
 8009806:	b913      	cbnz	r3, 800980e <__swsetup_r+0x16>
 8009808:	4628      	mov	r0, r5
 800980a:	f7ff f89d 	bl	8008948 <__sinit>
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <__swsetup_r+0xd0>)
 8009810:	429c      	cmp	r4, r3
 8009812:	d10f      	bne.n	8009834 <__swsetup_r+0x3c>
 8009814:	686c      	ldr	r4, [r5, #4]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981c:	0719      	lsls	r1, r3, #28
 800981e:	d42c      	bmi.n	800987a <__swsetup_r+0x82>
 8009820:	06dd      	lsls	r5, r3, #27
 8009822:	d411      	bmi.n	8009848 <__swsetup_r+0x50>
 8009824:	2309      	movs	r3, #9
 8009826:	6033      	str	r3, [r6, #0]
 8009828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	e03e      	b.n	80098b2 <__swsetup_r+0xba>
 8009834:	4b25      	ldr	r3, [pc, #148]	; (80098cc <__swsetup_r+0xd4>)
 8009836:	429c      	cmp	r4, r3
 8009838:	d101      	bne.n	800983e <__swsetup_r+0x46>
 800983a:	68ac      	ldr	r4, [r5, #8]
 800983c:	e7eb      	b.n	8009816 <__swsetup_r+0x1e>
 800983e:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <__swsetup_r+0xd8>)
 8009840:	429c      	cmp	r4, r3
 8009842:	bf08      	it	eq
 8009844:	68ec      	ldreq	r4, [r5, #12]
 8009846:	e7e6      	b.n	8009816 <__swsetup_r+0x1e>
 8009848:	0758      	lsls	r0, r3, #29
 800984a:	d512      	bpl.n	8009872 <__swsetup_r+0x7a>
 800984c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800984e:	b141      	cbz	r1, 8009862 <__swsetup_r+0x6a>
 8009850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009854:	4299      	cmp	r1, r3
 8009856:	d002      	beq.n	800985e <__swsetup_r+0x66>
 8009858:	4630      	mov	r0, r6
 800985a:	f001 fba3 	bl	800afa4 <_free_r>
 800985e:	2300      	movs	r3, #0
 8009860:	6363      	str	r3, [r4, #52]	; 0x34
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	2300      	movs	r3, #0
 800986c:	6063      	str	r3, [r4, #4]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f043 0308 	orr.w	r3, r3, #8
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	b94b      	cbnz	r3, 8009892 <__swsetup_r+0x9a>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009888:	d003      	beq.n	8009892 <__swsetup_r+0x9a>
 800988a:	4621      	mov	r1, r4
 800988c:	4630      	mov	r0, r6
 800988e:	f000 ffa7 	bl	800a7e0 <__smakebuf_r>
 8009892:	89a0      	ldrh	r0, [r4, #12]
 8009894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009898:	f010 0301 	ands.w	r3, r0, #1
 800989c:	d00a      	beq.n	80098b4 <__swsetup_r+0xbc>
 800989e:	2300      	movs	r3, #0
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	6963      	ldr	r3, [r4, #20]
 80098a4:	425b      	negs	r3, r3
 80098a6:	61a3      	str	r3, [r4, #24]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	b943      	cbnz	r3, 80098be <__swsetup_r+0xc6>
 80098ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098b0:	d1ba      	bne.n	8009828 <__swsetup_r+0x30>
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0781      	lsls	r1, r0, #30
 80098b6:	bf58      	it	pl
 80098b8:	6963      	ldrpl	r3, [r4, #20]
 80098ba:	60a3      	str	r3, [r4, #8]
 80098bc:	e7f4      	b.n	80098a8 <__swsetup_r+0xb0>
 80098be:	2000      	movs	r0, #0
 80098c0:	e7f7      	b.n	80098b2 <__swsetup_r+0xba>
 80098c2:	bf00      	nop
 80098c4:	200000dc 	.word	0x200000dc
 80098c8:	0800b9c8 	.word	0x0800b9c8
 80098cc:	0800b9e8 	.word	0x0800b9e8
 80098d0:	0800b9a8 	.word	0x0800b9a8

080098d4 <_close_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d06      	ldr	r5, [pc, #24]	; (80098f0 <_close_r+0x1c>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	f7f8 fde5 	bl	80024ae <_close>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_close_r+0x1a>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_close_r+0x1a>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	200053e4 	.word	0x200053e4

080098f4 <quorem>:
 80098f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	6903      	ldr	r3, [r0, #16]
 80098fa:	690c      	ldr	r4, [r1, #16]
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	4607      	mov	r7, r0
 8009900:	f2c0 8081 	blt.w	8009a06 <quorem+0x112>
 8009904:	3c01      	subs	r4, #1
 8009906:	f101 0814 	add.w	r8, r1, #20
 800990a:	f100 0514 	add.w	r5, r0, #20
 800990e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991c:	3301      	adds	r3, #1
 800991e:	429a      	cmp	r2, r3
 8009920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009928:	fbb2 f6f3 	udiv	r6, r2, r3
 800992c:	d331      	bcc.n	8009992 <quorem+0x9e>
 800992e:	f04f 0e00 	mov.w	lr, #0
 8009932:	4640      	mov	r0, r8
 8009934:	46ac      	mov	ip, r5
 8009936:	46f2      	mov	sl, lr
 8009938:	f850 2b04 	ldr.w	r2, [r0], #4
 800993c:	b293      	uxth	r3, r2
 800993e:	fb06 e303 	mla	r3, r6, r3, lr
 8009942:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ebaa 0303 	sub.w	r3, sl, r3
 800994c:	0c12      	lsrs	r2, r2, #16
 800994e:	f8dc a000 	ldr.w	sl, [ip]
 8009952:	fb06 e202 	mla	r2, r6, r2, lr
 8009956:	fa13 f38a 	uxtah	r3, r3, sl
 800995a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800995e:	fa1f fa82 	uxth.w	sl, r2
 8009962:	f8dc 2000 	ldr.w	r2, [ip]
 8009966:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800996a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009974:	4581      	cmp	r9, r0
 8009976:	f84c 3b04 	str.w	r3, [ip], #4
 800997a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800997e:	d2db      	bcs.n	8009938 <quorem+0x44>
 8009980:	f855 300b 	ldr.w	r3, [r5, fp]
 8009984:	b92b      	cbnz	r3, 8009992 <quorem+0x9e>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	3b04      	subs	r3, #4
 800998a:	429d      	cmp	r5, r3
 800998c:	461a      	mov	r2, r3
 800998e:	d32e      	bcc.n	80099ee <quorem+0xfa>
 8009990:	613c      	str	r4, [r7, #16]
 8009992:	4638      	mov	r0, r7
 8009994:	f001 f9f6 	bl	800ad84 <__mcmp>
 8009998:	2800      	cmp	r0, #0
 800999a:	db24      	blt.n	80099e6 <quorem+0xf2>
 800999c:	3601      	adds	r6, #1
 800999e:	4628      	mov	r0, r5
 80099a0:	f04f 0c00 	mov.w	ip, #0
 80099a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80099a8:	f8d0 e000 	ldr.w	lr, [r0]
 80099ac:	b293      	uxth	r3, r2
 80099ae:	ebac 0303 	sub.w	r3, ip, r3
 80099b2:	0c12      	lsrs	r2, r2, #16
 80099b4:	fa13 f38e 	uxtah	r3, r3, lr
 80099b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c6:	45c1      	cmp	r9, r8
 80099c8:	f840 3b04 	str.w	r3, [r0], #4
 80099cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099d0:	d2e8      	bcs.n	80099a4 <quorem+0xb0>
 80099d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099da:	b922      	cbnz	r2, 80099e6 <quorem+0xf2>
 80099dc:	3b04      	subs	r3, #4
 80099de:	429d      	cmp	r5, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	d30a      	bcc.n	80099fa <quorem+0x106>
 80099e4:	613c      	str	r4, [r7, #16]
 80099e6:	4630      	mov	r0, r6
 80099e8:	b003      	add	sp, #12
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	3b04      	subs	r3, #4
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	d1cc      	bne.n	8009990 <quorem+0x9c>
 80099f6:	3c01      	subs	r4, #1
 80099f8:	e7c7      	b.n	800998a <quorem+0x96>
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	3b04      	subs	r3, #4
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d1f0      	bne.n	80099e4 <quorem+0xf0>
 8009a02:	3c01      	subs	r4, #1
 8009a04:	e7eb      	b.n	80099de <quorem+0xea>
 8009a06:	2000      	movs	r0, #0
 8009a08:	e7ee      	b.n	80099e8 <quorem+0xf4>
 8009a0a:	0000      	movs	r0, r0
 8009a0c:	0000      	movs	r0, r0
	...

08009a10 <_dtoa_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	ed2d 8b02 	vpush	{d8}
 8009a18:	ec57 6b10 	vmov	r6, r7, d0
 8009a1c:	b095      	sub	sp, #84	; 0x54
 8009a1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a24:	9105      	str	r1, [sp, #20]
 8009a26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a30:	b975      	cbnz	r5, 8009a50 <_dtoa_r+0x40>
 8009a32:	2010      	movs	r0, #16
 8009a34:	f000 ff14 	bl	800a860 <malloc>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009a3c:	b920      	cbnz	r0, 8009a48 <_dtoa_r+0x38>
 8009a3e:	4bb2      	ldr	r3, [pc, #712]	; (8009d08 <_dtoa_r+0x2f8>)
 8009a40:	21ea      	movs	r1, #234	; 0xea
 8009a42:	48b2      	ldr	r0, [pc, #712]	; (8009d0c <_dtoa_r+0x2fc>)
 8009a44:	f001 fdc6 	bl	800b5d4 <__assert_func>
 8009a48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a4c:	6005      	str	r5, [r0, #0]
 8009a4e:	60c5      	str	r5, [r0, #12]
 8009a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a52:	6819      	ldr	r1, [r3, #0]
 8009a54:	b151      	cbz	r1, 8009a6c <_dtoa_r+0x5c>
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	604a      	str	r2, [r1, #4]
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4093      	lsls	r3, r2
 8009a5e:	608b      	str	r3, [r1, #8]
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 ff51 	bl	800a908 <_Bfree>
 8009a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	1e3b      	subs	r3, r7, #0
 8009a6e:	bfb9      	ittee	lt
 8009a70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a74:	9303      	strlt	r3, [sp, #12]
 8009a76:	2300      	movge	r3, #0
 8009a78:	f8c8 3000 	strge.w	r3, [r8]
 8009a7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009a80:	4ba3      	ldr	r3, [pc, #652]	; (8009d10 <_dtoa_r+0x300>)
 8009a82:	bfbc      	itt	lt
 8009a84:	2201      	movlt	r2, #1
 8009a86:	f8c8 2000 	strlt.w	r2, [r8]
 8009a8a:	ea33 0309 	bics.w	r3, r3, r9
 8009a8e:	d11b      	bne.n	8009ac8 <_dtoa_r+0xb8>
 8009a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a92:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a9c:	4333      	orrs	r3, r6
 8009a9e:	f000 857a 	beq.w	800a596 <_dtoa_r+0xb86>
 8009aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa4:	b963      	cbnz	r3, 8009ac0 <_dtoa_r+0xb0>
 8009aa6:	4b9b      	ldr	r3, [pc, #620]	; (8009d14 <_dtoa_r+0x304>)
 8009aa8:	e024      	b.n	8009af4 <_dtoa_r+0xe4>
 8009aaa:	4b9b      	ldr	r3, [pc, #620]	; (8009d18 <_dtoa_r+0x308>)
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	3308      	adds	r3, #8
 8009ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	9800      	ldr	r0, [sp, #0]
 8009ab6:	b015      	add	sp, #84	; 0x54
 8009ab8:	ecbd 8b02 	vpop	{d8}
 8009abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	4b94      	ldr	r3, [pc, #592]	; (8009d14 <_dtoa_r+0x304>)
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	3303      	adds	r3, #3
 8009ac6:	e7f3      	b.n	8009ab0 <_dtoa_r+0xa0>
 8009ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009acc:	2200      	movs	r2, #0
 8009ace:	ec51 0b17 	vmov	r0, r1, d7
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ad8:	f7f6 fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8009adc:	4680      	mov	r8, r0
 8009ade:	b158      	cbz	r0, 8009af8 <_dtoa_r+0xe8>
 8009ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 8551 	beq.w	800a590 <_dtoa_r+0xb80>
 8009aee:	488b      	ldr	r0, [pc, #556]	; (8009d1c <_dtoa_r+0x30c>)
 8009af0:	6018      	str	r0, [r3, #0]
 8009af2:	1e43      	subs	r3, r0, #1
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	e7dd      	b.n	8009ab4 <_dtoa_r+0xa4>
 8009af8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009afc:	aa12      	add	r2, sp, #72	; 0x48
 8009afe:	a913      	add	r1, sp, #76	; 0x4c
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 f9e3 	bl	800aecc <__d2b>
 8009b06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b0a:	4683      	mov	fp, r0
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	d07c      	beq.n	8009c0a <_dtoa_r+0x1fa>
 8009b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009b1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b2a:	4b7d      	ldr	r3, [pc, #500]	; (8009d20 <_dtoa_r+0x310>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	4630      	mov	r0, r6
 8009b30:	4639      	mov	r1, r7
 8009b32:	f7f6 fbb1 	bl	8000298 <__aeabi_dsub>
 8009b36:	a36e      	add	r3, pc, #440	; (adr r3, 8009cf0 <_dtoa_r+0x2e0>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 fd64 	bl	8000608 <__aeabi_dmul>
 8009b40:	a36d      	add	r3, pc, #436	; (adr r3, 8009cf8 <_dtoa_r+0x2e8>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 fba9 	bl	800029c <__adddf3>
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	460f      	mov	r7, r1
 8009b50:	f7f6 fcf0 	bl	8000534 <__aeabi_i2d>
 8009b54:	a36a      	add	r3, pc, #424	; (adr r3, 8009d00 <_dtoa_r+0x2f0>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f7f6 fd55 	bl	8000608 <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 fb99 	bl	800029c <__adddf3>
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	f7f6 fffb 	bl	8000b68 <__aeabi_d2iz>
 8009b72:	2200      	movs	r2, #0
 8009b74:	4682      	mov	sl, r0
 8009b76:	2300      	movs	r3, #0
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 ffb6 	bl	8000aec <__aeabi_dcmplt>
 8009b80:	b148      	cbz	r0, 8009b96 <_dtoa_r+0x186>
 8009b82:	4650      	mov	r0, sl
 8009b84:	f7f6 fcd6 	bl	8000534 <__aeabi_i2d>
 8009b88:	4632      	mov	r2, r6
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	f7f6 ffa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b90:	b908      	cbnz	r0, 8009b96 <_dtoa_r+0x186>
 8009b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b96:	f1ba 0f16 	cmp.w	sl, #22
 8009b9a:	d854      	bhi.n	8009c46 <_dtoa_r+0x236>
 8009b9c:	4b61      	ldr	r3, [pc, #388]	; (8009d24 <_dtoa_r+0x314>)
 8009b9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009baa:	f7f6 ff9f 	bl	8000aec <__aeabi_dcmplt>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d04b      	beq.n	8009c4a <_dtoa_r+0x23a>
 8009bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8009bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bbc:	1b5d      	subs	r5, r3, r5
 8009bbe:	1e6b      	subs	r3, r5, #1
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	bf43      	ittte	mi
 8009bc4:	2300      	movmi	r3, #0
 8009bc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8009bca:	9304      	strmi	r3, [sp, #16]
 8009bcc:	f04f 0800 	movpl.w	r8, #0
 8009bd0:	f1ba 0f00 	cmp.w	sl, #0
 8009bd4:	db3b      	blt.n	8009c4e <_dtoa_r+0x23e>
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009bdc:	4453      	add	r3, sl
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	2300      	movs	r3, #0
 8009be2:	9306      	str	r3, [sp, #24]
 8009be4:	9b05      	ldr	r3, [sp, #20]
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	d869      	bhi.n	8009cbe <_dtoa_r+0x2ae>
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	bfc4      	itt	gt
 8009bee:	3b04      	subgt	r3, #4
 8009bf0:	9305      	strgt	r3, [sp, #20]
 8009bf2:	9b05      	ldr	r3, [sp, #20]
 8009bf4:	f1a3 0302 	sub.w	r3, r3, #2
 8009bf8:	bfcc      	ite	gt
 8009bfa:	2500      	movgt	r5, #0
 8009bfc:	2501      	movle	r5, #1
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d869      	bhi.n	8009cd6 <_dtoa_r+0x2c6>
 8009c02:	e8df f003 	tbb	[pc, r3]
 8009c06:	4e2c      	.short	0x4e2c
 8009c08:	5a4c      	.short	0x5a4c
 8009c0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009c0e:	441d      	add	r5, r3
 8009c10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	bfc1      	itttt	gt
 8009c18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c20:	fa09 f303 	lslgt.w	r3, r9, r3
 8009c24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c28:	bfda      	itte	le
 8009c2a:	f1c3 0320 	rsble	r3, r3, #32
 8009c2e:	fa06 f003 	lslle.w	r0, r6, r3
 8009c32:	4318      	orrgt	r0, r3
 8009c34:	f7f6 fc6e 	bl	8000514 <__aeabi_ui2d>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c40:	3d01      	subs	r5, #1
 8009c42:	9310      	str	r3, [sp, #64]	; 0x40
 8009c44:	e771      	b.n	8009b2a <_dtoa_r+0x11a>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e7b6      	b.n	8009bb8 <_dtoa_r+0x1a8>
 8009c4a:	900e      	str	r0, [sp, #56]	; 0x38
 8009c4c:	e7b5      	b.n	8009bba <_dtoa_r+0x1aa>
 8009c4e:	f1ca 0300 	rsb	r3, sl, #0
 8009c52:	9306      	str	r3, [sp, #24]
 8009c54:	2300      	movs	r3, #0
 8009c56:	eba8 080a 	sub.w	r8, r8, sl
 8009c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c5c:	e7c2      	b.n	8009be4 <_dtoa_r+0x1d4>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9308      	str	r3, [sp, #32]
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dc39      	bgt.n	8009cdc <_dtoa_r+0x2cc>
 8009c68:	f04f 0901 	mov.w	r9, #1
 8009c6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c70:	464b      	mov	r3, r9
 8009c72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009c76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c78:	2200      	movs	r2, #0
 8009c7a:	6042      	str	r2, [r0, #4]
 8009c7c:	2204      	movs	r2, #4
 8009c7e:	f102 0614 	add.w	r6, r2, #20
 8009c82:	429e      	cmp	r6, r3
 8009c84:	6841      	ldr	r1, [r0, #4]
 8009c86:	d92f      	bls.n	8009ce8 <_dtoa_r+0x2d8>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 fdfd 	bl	800a888 <_Balloc>
 8009c8e:	9000      	str	r0, [sp, #0]
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d14b      	bne.n	8009d2c <_dtoa_r+0x31c>
 8009c94:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <_dtoa_r+0x318>)
 8009c96:	4602      	mov	r2, r0
 8009c98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c9c:	e6d1      	b.n	8009a42 <_dtoa_r+0x32>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e7de      	b.n	8009c60 <_dtoa_r+0x250>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9308      	str	r3, [sp, #32]
 8009ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca8:	eb0a 0903 	add.w	r9, sl, r3
 8009cac:	f109 0301 	add.w	r3, r9, #1
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	bfb8      	it	lt
 8009cb6:	2301      	movlt	r3, #1
 8009cb8:	e7dd      	b.n	8009c76 <_dtoa_r+0x266>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7f2      	b.n	8009ca4 <_dtoa_r+0x294>
 8009cbe:	2501      	movs	r5, #1
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	9508      	str	r5, [sp, #32]
 8009cc6:	f04f 39ff 	mov.w	r9, #4294967295
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cd0:	2312      	movs	r3, #18
 8009cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd4:	e7cf      	b.n	8009c76 <_dtoa_r+0x266>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	e7f4      	b.n	8009cc6 <_dtoa_r+0x2b6>
 8009cdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ce0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	e7c6      	b.n	8009c76 <_dtoa_r+0x266>
 8009ce8:	3101      	adds	r1, #1
 8009cea:	6041      	str	r1, [r0, #4]
 8009cec:	0052      	lsls	r2, r2, #1
 8009cee:	e7c6      	b.n	8009c7e <_dtoa_r+0x26e>
 8009cf0:	636f4361 	.word	0x636f4361
 8009cf4:	3fd287a7 	.word	0x3fd287a7
 8009cf8:	8b60c8b3 	.word	0x8b60c8b3
 8009cfc:	3fc68a28 	.word	0x3fc68a28
 8009d00:	509f79fb 	.word	0x509f79fb
 8009d04:	3fd34413 	.word	0x3fd34413
 8009d08:	0800bb4e 	.word	0x0800bb4e
 8009d0c:	0800bb65 	.word	0x0800bb65
 8009d10:	7ff00000 	.word	0x7ff00000
 8009d14:	0800bb4a 	.word	0x0800bb4a
 8009d18:	0800bb41 	.word	0x0800bb41
 8009d1c:	0800ba1d 	.word	0x0800ba1d
 8009d20:	3ff80000 	.word	0x3ff80000
 8009d24:	0800bc60 	.word	0x0800bc60
 8009d28:	0800bbc4 	.word	0x0800bbc4
 8009d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d2e:	9a00      	ldr	r2, [sp, #0]
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	2b0e      	cmp	r3, #14
 8009d36:	f200 80ad 	bhi.w	8009e94 <_dtoa_r+0x484>
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	f000 80aa 	beq.w	8009e94 <_dtoa_r+0x484>
 8009d40:	f1ba 0f00 	cmp.w	sl, #0
 8009d44:	dd36      	ble.n	8009db4 <_dtoa_r+0x3a4>
 8009d46:	4ac3      	ldr	r2, [pc, #780]	; (800a054 <_dtoa_r+0x644>)
 8009d48:	f00a 030f 	and.w	r3, sl, #15
 8009d4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d50:	ed93 7b00 	vldr	d7, [r3]
 8009d54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009d58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009d5c:	eeb0 8a47 	vmov.f32	s16, s14
 8009d60:	eef0 8a67 	vmov.f32	s17, s15
 8009d64:	d016      	beq.n	8009d94 <_dtoa_r+0x384>
 8009d66:	4bbc      	ldr	r3, [pc, #752]	; (800a058 <_dtoa_r+0x648>)
 8009d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d70:	f7f6 fd74 	bl	800085c <__aeabi_ddiv>
 8009d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d78:	f007 070f 	and.w	r7, r7, #15
 8009d7c:	2503      	movs	r5, #3
 8009d7e:	4eb6      	ldr	r6, [pc, #728]	; (800a058 <_dtoa_r+0x648>)
 8009d80:	b957      	cbnz	r7, 8009d98 <_dtoa_r+0x388>
 8009d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d86:	ec53 2b18 	vmov	r2, r3, d8
 8009d8a:	f7f6 fd67 	bl	800085c <__aeabi_ddiv>
 8009d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d92:	e029      	b.n	8009de8 <_dtoa_r+0x3d8>
 8009d94:	2502      	movs	r5, #2
 8009d96:	e7f2      	b.n	8009d7e <_dtoa_r+0x36e>
 8009d98:	07f9      	lsls	r1, r7, #31
 8009d9a:	d508      	bpl.n	8009dae <_dtoa_r+0x39e>
 8009d9c:	ec51 0b18 	vmov	r0, r1, d8
 8009da0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009da4:	f7f6 fc30 	bl	8000608 <__aeabi_dmul>
 8009da8:	ec41 0b18 	vmov	d8, r0, r1
 8009dac:	3501      	adds	r5, #1
 8009dae:	107f      	asrs	r7, r7, #1
 8009db0:	3608      	adds	r6, #8
 8009db2:	e7e5      	b.n	8009d80 <_dtoa_r+0x370>
 8009db4:	f000 80a6 	beq.w	8009f04 <_dtoa_r+0x4f4>
 8009db8:	f1ca 0600 	rsb	r6, sl, #0
 8009dbc:	4ba5      	ldr	r3, [pc, #660]	; (800a054 <_dtoa_r+0x644>)
 8009dbe:	4fa6      	ldr	r7, [pc, #664]	; (800a058 <_dtoa_r+0x648>)
 8009dc0:	f006 020f 	and.w	r2, r6, #15
 8009dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009dd0:	f7f6 fc1a 	bl	8000608 <__aeabi_dmul>
 8009dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd8:	1136      	asrs	r6, r6, #4
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2502      	movs	r5, #2
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	f040 8085 	bne.w	8009eee <_dtoa_r+0x4de>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1d2      	bne.n	8009d8e <_dtoa_r+0x37e>
 8009de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 808c 	beq.w	8009f08 <_dtoa_r+0x4f8>
 8009df0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009df4:	4b99      	ldr	r3, [pc, #612]	; (800a05c <_dtoa_r+0x64c>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fe76 	bl	8000aec <__aeabi_dcmplt>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f000 8081 	beq.w	8009f08 <_dtoa_r+0x4f8>
 8009e06:	9b01      	ldr	r3, [sp, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d07d      	beq.n	8009f08 <_dtoa_r+0x4f8>
 8009e0c:	f1b9 0f00 	cmp.w	r9, #0
 8009e10:	dd3c      	ble.n	8009e8c <_dtoa_r+0x47c>
 8009e12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e16:	9307      	str	r3, [sp, #28]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4b91      	ldr	r3, [pc, #580]	; (800a060 <_dtoa_r+0x650>)
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fbf2 	bl	8000608 <__aeabi_dmul>
 8009e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e28:	3501      	adds	r5, #1
 8009e2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009e2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e32:	4628      	mov	r0, r5
 8009e34:	f7f6 fb7e 	bl	8000534 <__aeabi_i2d>
 8009e38:	4632      	mov	r2, r6
 8009e3a:	463b      	mov	r3, r7
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	4b88      	ldr	r3, [pc, #544]	; (800a064 <_dtoa_r+0x654>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	f7f6 fa2a 	bl	800029c <__adddf3>
 8009e48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d15c      	bne.n	8009f12 <_dtoa_r+0x502>
 8009e58:	4b83      	ldr	r3, [pc, #524]	; (800a068 <_dtoa_r+0x658>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f7f6 fa1a 	bl	8000298 <__aeabi_dsub>
 8009e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e68:	4606      	mov	r6, r0
 8009e6a:	460f      	mov	r7, r1
 8009e6c:	f7f6 fe5c 	bl	8000b28 <__aeabi_dcmpgt>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f040 8296 	bne.w	800a3a2 <_dtoa_r+0x992>
 8009e76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e80:	4639      	mov	r1, r7
 8009e82:	f7f6 fe33 	bl	8000aec <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f040 8288 	bne.w	800a39c <_dtoa_r+0x98c>
 8009e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f2c0 8158 	blt.w	800a14c <_dtoa_r+0x73c>
 8009e9c:	f1ba 0f0e 	cmp.w	sl, #14
 8009ea0:	f300 8154 	bgt.w	800a14c <_dtoa_r+0x73c>
 8009ea4:	4b6b      	ldr	r3, [pc, #428]	; (800a054 <_dtoa_r+0x644>)
 8009ea6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009eaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f280 80e3 	bge.w	800a07c <_dtoa_r+0x66c>
 8009eb6:	9b01      	ldr	r3, [sp, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f300 80df 	bgt.w	800a07c <_dtoa_r+0x66c>
 8009ebe:	f040 826d 	bne.w	800a39c <_dtoa_r+0x98c>
 8009ec2:	4b69      	ldr	r3, [pc, #420]	; (800a068 <_dtoa_r+0x658>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 fb9d 	bl	8000608 <__aeabi_dmul>
 8009ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed2:	f7f6 fe1f 	bl	8000b14 <__aeabi_dcmpge>
 8009ed6:	9e01      	ldr	r6, [sp, #4]
 8009ed8:	4637      	mov	r7, r6
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f040 8243 	bne.w	800a366 <_dtoa_r+0x956>
 8009ee0:	9d00      	ldr	r5, [sp, #0]
 8009ee2:	2331      	movs	r3, #49	; 0x31
 8009ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ee8:	f10a 0a01 	add.w	sl, sl, #1
 8009eec:	e23f      	b.n	800a36e <_dtoa_r+0x95e>
 8009eee:	07f2      	lsls	r2, r6, #31
 8009ef0:	d505      	bpl.n	8009efe <_dtoa_r+0x4ee>
 8009ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ef6:	f7f6 fb87 	bl	8000608 <__aeabi_dmul>
 8009efa:	3501      	adds	r5, #1
 8009efc:	2301      	movs	r3, #1
 8009efe:	1076      	asrs	r6, r6, #1
 8009f00:	3708      	adds	r7, #8
 8009f02:	e76c      	b.n	8009dde <_dtoa_r+0x3ce>
 8009f04:	2502      	movs	r5, #2
 8009f06:	e76f      	b.n	8009de8 <_dtoa_r+0x3d8>
 8009f08:	9b01      	ldr	r3, [sp, #4]
 8009f0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f10:	e78d      	b.n	8009e2e <_dtoa_r+0x41e>
 8009f12:	9900      	ldr	r1, [sp, #0]
 8009f14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f18:	4b4e      	ldr	r3, [pc, #312]	; (800a054 <_dtoa_r+0x644>)
 8009f1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f1e:	4401      	add	r1, r0
 8009f20:	9102      	str	r1, [sp, #8]
 8009f22:	9908      	ldr	r1, [sp, #32]
 8009f24:	eeb0 8a47 	vmov.f32	s16, s14
 8009f28:	eef0 8a67 	vmov.f32	s17, s15
 8009f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d045      	beq.n	8009fc4 <_dtoa_r+0x5b4>
 8009f38:	494c      	ldr	r1, [pc, #304]	; (800a06c <_dtoa_r+0x65c>)
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	f7f6 fc8e 	bl	800085c <__aeabi_ddiv>
 8009f40:	ec53 2b18 	vmov	r2, r3, d8
 8009f44:	f7f6 f9a8 	bl	8000298 <__aeabi_dsub>
 8009f48:	9d00      	ldr	r5, [sp, #0]
 8009f4a:	ec41 0b18 	vmov	d8, r0, r1
 8009f4e:	4639      	mov	r1, r7
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7f6 fe09 	bl	8000b68 <__aeabi_d2iz>
 8009f56:	900c      	str	r0, [sp, #48]	; 0x30
 8009f58:	f7f6 faec 	bl	8000534 <__aeabi_i2d>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 f998 	bl	8000298 <__aeabi_dsub>
 8009f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f6a:	3330      	adds	r3, #48	; 0x30
 8009f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f70:	ec53 2b18 	vmov	r2, r3, d8
 8009f74:	4606      	mov	r6, r0
 8009f76:	460f      	mov	r7, r1
 8009f78:	f7f6 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d165      	bne.n	800a04c <_dtoa_r+0x63c>
 8009f80:	4632      	mov	r2, r6
 8009f82:	463b      	mov	r3, r7
 8009f84:	4935      	ldr	r1, [pc, #212]	; (800a05c <_dtoa_r+0x64c>)
 8009f86:	2000      	movs	r0, #0
 8009f88:	f7f6 f986 	bl	8000298 <__aeabi_dsub>
 8009f8c:	ec53 2b18 	vmov	r2, r3, d8
 8009f90:	f7f6 fdac 	bl	8000aec <__aeabi_dcmplt>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f040 80b9 	bne.w	800a10c <_dtoa_r+0x6fc>
 8009f9a:	9b02      	ldr	r3, [sp, #8]
 8009f9c:	429d      	cmp	r5, r3
 8009f9e:	f43f af75 	beq.w	8009e8c <_dtoa_r+0x47c>
 8009fa2:	4b2f      	ldr	r3, [pc, #188]	; (800a060 <_dtoa_r+0x650>)
 8009fa4:	ec51 0b18 	vmov	r0, r1, d8
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f7f6 fb2d 	bl	8000608 <__aeabi_dmul>
 8009fae:	4b2c      	ldr	r3, [pc, #176]	; (800a060 <_dtoa_r+0x650>)
 8009fb0:	ec41 0b18 	vmov	d8, r0, r1
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4639      	mov	r1, r7
 8009fba:	f7f6 fb25 	bl	8000608 <__aeabi_dmul>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	460f      	mov	r7, r1
 8009fc2:	e7c4      	b.n	8009f4e <_dtoa_r+0x53e>
 8009fc4:	ec51 0b17 	vmov	r0, r1, d7
 8009fc8:	f7f6 fb1e 	bl	8000608 <__aeabi_dmul>
 8009fcc:	9b02      	ldr	r3, [sp, #8]
 8009fce:	9d00      	ldr	r5, [sp, #0]
 8009fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8009fd2:	ec41 0b18 	vmov	d8, r0, r1
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7f6 fdc5 	bl	8000b68 <__aeabi_d2iz>
 8009fde:	9011      	str	r0, [sp, #68]	; 0x44
 8009fe0:	f7f6 faa8 	bl	8000534 <__aeabi_i2d>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4630      	mov	r0, r6
 8009fea:	4639      	mov	r1, r7
 8009fec:	f7f6 f954 	bl	8000298 <__aeabi_dsub>
 8009ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ff2:	3330      	adds	r3, #48	; 0x30
 8009ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ff8:	9b02      	ldr	r3, [sp, #8]
 8009ffa:	429d      	cmp	r5, r3
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	d134      	bne.n	800a070 <_dtoa_r+0x660>
 800a006:	4b19      	ldr	r3, [pc, #100]	; (800a06c <_dtoa_r+0x65c>)
 800a008:	ec51 0b18 	vmov	r0, r1, d8
 800a00c:	f7f6 f946 	bl	800029c <__adddf3>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4630      	mov	r0, r6
 800a016:	4639      	mov	r1, r7
 800a018:	f7f6 fd86 	bl	8000b28 <__aeabi_dcmpgt>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d175      	bne.n	800a10c <_dtoa_r+0x6fc>
 800a020:	ec53 2b18 	vmov	r2, r3, d8
 800a024:	4911      	ldr	r1, [pc, #68]	; (800a06c <_dtoa_r+0x65c>)
 800a026:	2000      	movs	r0, #0
 800a028:	f7f6 f936 	bl	8000298 <__aeabi_dsub>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 fd5a 	bl	8000aec <__aeabi_dcmplt>
 800a038:	2800      	cmp	r0, #0
 800a03a:	f43f af27 	beq.w	8009e8c <_dtoa_r+0x47c>
 800a03e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a040:	1e6b      	subs	r3, r5, #1
 800a042:	930c      	str	r3, [sp, #48]	; 0x30
 800a044:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a048:	2b30      	cmp	r3, #48	; 0x30
 800a04a:	d0f8      	beq.n	800a03e <_dtoa_r+0x62e>
 800a04c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a050:	e04a      	b.n	800a0e8 <_dtoa_r+0x6d8>
 800a052:	bf00      	nop
 800a054:	0800bc60 	.word	0x0800bc60
 800a058:	0800bc38 	.word	0x0800bc38
 800a05c:	3ff00000 	.word	0x3ff00000
 800a060:	40240000 	.word	0x40240000
 800a064:	401c0000 	.word	0x401c0000
 800a068:	40140000 	.word	0x40140000
 800a06c:	3fe00000 	.word	0x3fe00000
 800a070:	4baf      	ldr	r3, [pc, #700]	; (800a330 <_dtoa_r+0x920>)
 800a072:	f7f6 fac9 	bl	8000608 <__aeabi_dmul>
 800a076:	4606      	mov	r6, r0
 800a078:	460f      	mov	r7, r1
 800a07a:	e7ac      	b.n	8009fd6 <_dtoa_r+0x5c6>
 800a07c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a080:	9d00      	ldr	r5, [sp, #0]
 800a082:	4642      	mov	r2, r8
 800a084:	464b      	mov	r3, r9
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fbe7 	bl	800085c <__aeabi_ddiv>
 800a08e:	f7f6 fd6b 	bl	8000b68 <__aeabi_d2iz>
 800a092:	9002      	str	r0, [sp, #8]
 800a094:	f7f6 fa4e 	bl	8000534 <__aeabi_i2d>
 800a098:	4642      	mov	r2, r8
 800a09a:	464b      	mov	r3, r9
 800a09c:	f7f6 fab4 	bl	8000608 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 f8f6 	bl	8000298 <__aeabi_dsub>
 800a0ac:	9e02      	ldr	r6, [sp, #8]
 800a0ae:	9f01      	ldr	r7, [sp, #4]
 800a0b0:	3630      	adds	r6, #48	; 0x30
 800a0b2:	f805 6b01 	strb.w	r6, [r5], #1
 800a0b6:	9e00      	ldr	r6, [sp, #0]
 800a0b8:	1bae      	subs	r6, r5, r6
 800a0ba:	42b7      	cmp	r7, r6
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	d137      	bne.n	800a132 <_dtoa_r+0x722>
 800a0c2:	f7f6 f8eb 	bl	800029c <__adddf3>
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460f      	mov	r7, r1
 800a0ce:	f7f6 fd2b 	bl	8000b28 <__aeabi_dcmpgt>
 800a0d2:	b9c8      	cbnz	r0, 800a108 <_dtoa_r+0x6f8>
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0e0:	b110      	cbz	r0, 800a0e8 <_dtoa_r+0x6d8>
 800a0e2:	9b02      	ldr	r3, [sp, #8]
 800a0e4:	07d9      	lsls	r1, r3, #31
 800a0e6:	d40f      	bmi.n	800a108 <_dtoa_r+0x6f8>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4659      	mov	r1, fp
 800a0ec:	f000 fc0c 	bl	800a908 <_Bfree>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	702b      	strb	r3, [r5, #0]
 800a0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0f6:	f10a 0001 	add.w	r0, sl, #1
 800a0fa:	6018      	str	r0, [r3, #0]
 800a0fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f43f acd8 	beq.w	8009ab4 <_dtoa_r+0xa4>
 800a104:	601d      	str	r5, [r3, #0]
 800a106:	e4d5      	b.n	8009ab4 <_dtoa_r+0xa4>
 800a108:	f8cd a01c 	str.w	sl, [sp, #28]
 800a10c:	462b      	mov	r3, r5
 800a10e:	461d      	mov	r5, r3
 800a110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a114:	2a39      	cmp	r2, #57	; 0x39
 800a116:	d108      	bne.n	800a12a <_dtoa_r+0x71a>
 800a118:	9a00      	ldr	r2, [sp, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d1f7      	bne.n	800a10e <_dtoa_r+0x6fe>
 800a11e:	9a07      	ldr	r2, [sp, #28]
 800a120:	9900      	ldr	r1, [sp, #0]
 800a122:	3201      	adds	r2, #1
 800a124:	9207      	str	r2, [sp, #28]
 800a126:	2230      	movs	r2, #48	; 0x30
 800a128:	700a      	strb	r2, [r1, #0]
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	3201      	adds	r2, #1
 800a12e:	701a      	strb	r2, [r3, #0]
 800a130:	e78c      	b.n	800a04c <_dtoa_r+0x63c>
 800a132:	4b7f      	ldr	r3, [pc, #508]	; (800a330 <_dtoa_r+0x920>)
 800a134:	2200      	movs	r2, #0
 800a136:	f7f6 fa67 	bl	8000608 <__aeabi_dmul>
 800a13a:	2200      	movs	r2, #0
 800a13c:	2300      	movs	r3, #0
 800a13e:	4606      	mov	r6, r0
 800a140:	460f      	mov	r7, r1
 800a142:	f7f6 fcc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a146:	2800      	cmp	r0, #0
 800a148:	d09b      	beq.n	800a082 <_dtoa_r+0x672>
 800a14a:	e7cd      	b.n	800a0e8 <_dtoa_r+0x6d8>
 800a14c:	9a08      	ldr	r2, [sp, #32]
 800a14e:	2a00      	cmp	r2, #0
 800a150:	f000 80c4 	beq.w	800a2dc <_dtoa_r+0x8cc>
 800a154:	9a05      	ldr	r2, [sp, #20]
 800a156:	2a01      	cmp	r2, #1
 800a158:	f300 80a8 	bgt.w	800a2ac <_dtoa_r+0x89c>
 800a15c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a15e:	2a00      	cmp	r2, #0
 800a160:	f000 80a0 	beq.w	800a2a4 <_dtoa_r+0x894>
 800a164:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a168:	9e06      	ldr	r6, [sp, #24]
 800a16a:	4645      	mov	r5, r8
 800a16c:	9a04      	ldr	r2, [sp, #16]
 800a16e:	2101      	movs	r1, #1
 800a170:	441a      	add	r2, r3
 800a172:	4620      	mov	r0, r4
 800a174:	4498      	add	r8, r3
 800a176:	9204      	str	r2, [sp, #16]
 800a178:	f000 fc82 	bl	800aa80 <__i2b>
 800a17c:	4607      	mov	r7, r0
 800a17e:	2d00      	cmp	r5, #0
 800a180:	dd0b      	ble.n	800a19a <_dtoa_r+0x78a>
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd08      	ble.n	800a19a <_dtoa_r+0x78a>
 800a188:	42ab      	cmp	r3, r5
 800a18a:	9a04      	ldr	r2, [sp, #16]
 800a18c:	bfa8      	it	ge
 800a18e:	462b      	movge	r3, r5
 800a190:	eba8 0803 	sub.w	r8, r8, r3
 800a194:	1aed      	subs	r5, r5, r3
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	b1fb      	cbz	r3, 800a1de <_dtoa_r+0x7ce>
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 809f 	beq.w	800a2e4 <_dtoa_r+0x8d4>
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	dd11      	ble.n	800a1ce <_dtoa_r+0x7be>
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fd22 	bl	800abf8 <__pow5mult>
 800a1b4:	465a      	mov	r2, fp
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fc76 	bl	800aaac <__multiply>
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	9007      	str	r0, [sp, #28]
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fb9f 	bl	800a908 <_Bfree>
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	469b      	mov	fp, r3
 800a1ce:	9b06      	ldr	r3, [sp, #24]
 800a1d0:	1b9a      	subs	r2, r3, r6
 800a1d2:	d004      	beq.n	800a1de <_dtoa_r+0x7ce>
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 fd0e 	bl	800abf8 <__pow5mult>
 800a1dc:	4683      	mov	fp, r0
 800a1de:	2101      	movs	r1, #1
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fc4d 	bl	800aa80 <__i2b>
 800a1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	dd7c      	ble.n	800a2e8 <_dtoa_r+0x8d8>
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fd00 	bl	800abf8 <__pow5mult>
 800a1f8:	9b05      	ldr	r3, [sp, #20]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	dd76      	ble.n	800a2ee <_dtoa_r+0x8de>
 800a200:	2300      	movs	r3, #0
 800a202:	9306      	str	r3, [sp, #24]
 800a204:	6933      	ldr	r3, [r6, #16]
 800a206:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a20a:	6918      	ldr	r0, [r3, #16]
 800a20c:	f000 fbe8 	bl	800a9e0 <__hi0bits>
 800a210:	f1c0 0020 	rsb	r0, r0, #32
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	4418      	add	r0, r3
 800a218:	f010 001f 	ands.w	r0, r0, #31
 800a21c:	f000 8086 	beq.w	800a32c <_dtoa_r+0x91c>
 800a220:	f1c0 0320 	rsb	r3, r0, #32
 800a224:	2b04      	cmp	r3, #4
 800a226:	dd7f      	ble.n	800a328 <_dtoa_r+0x918>
 800a228:	f1c0 001c 	rsb	r0, r0, #28
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	4403      	add	r3, r0
 800a230:	4480      	add	r8, r0
 800a232:	4405      	add	r5, r0
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	f1b8 0f00 	cmp.w	r8, #0
 800a23a:	dd05      	ble.n	800a248 <_dtoa_r+0x838>
 800a23c:	4659      	mov	r1, fp
 800a23e:	4642      	mov	r2, r8
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fd33 	bl	800acac <__lshift>
 800a246:	4683      	mov	fp, r0
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dd05      	ble.n	800a25a <_dtoa_r+0x84a>
 800a24e:	4631      	mov	r1, r6
 800a250:	461a      	mov	r2, r3
 800a252:	4620      	mov	r0, r4
 800a254:	f000 fd2a 	bl	800acac <__lshift>
 800a258:	4606      	mov	r6, r0
 800a25a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d069      	beq.n	800a334 <_dtoa_r+0x924>
 800a260:	4631      	mov	r1, r6
 800a262:	4658      	mov	r0, fp
 800a264:	f000 fd8e 	bl	800ad84 <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	da63      	bge.n	800a334 <_dtoa_r+0x924>
 800a26c:	2300      	movs	r3, #0
 800a26e:	4659      	mov	r1, fp
 800a270:	220a      	movs	r2, #10
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fb6a 	bl	800a94c <__multadd>
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a27e:	4683      	mov	fp, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 818f 	beq.w	800a5a4 <_dtoa_r+0xb94>
 800a286:	4639      	mov	r1, r7
 800a288:	2300      	movs	r3, #0
 800a28a:	220a      	movs	r2, #10
 800a28c:	4620      	mov	r0, r4
 800a28e:	f000 fb5d 	bl	800a94c <__multadd>
 800a292:	f1b9 0f00 	cmp.w	r9, #0
 800a296:	4607      	mov	r7, r0
 800a298:	f300 808e 	bgt.w	800a3b8 <_dtoa_r+0x9a8>
 800a29c:	9b05      	ldr	r3, [sp, #20]
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	dc50      	bgt.n	800a344 <_dtoa_r+0x934>
 800a2a2:	e089      	b.n	800a3b8 <_dtoa_r+0x9a8>
 800a2a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2aa:	e75d      	b.n	800a168 <_dtoa_r+0x758>
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	1e5e      	subs	r6, r3, #1
 800a2b0:	9b06      	ldr	r3, [sp, #24]
 800a2b2:	42b3      	cmp	r3, r6
 800a2b4:	bfbf      	itttt	lt
 800a2b6:	9b06      	ldrlt	r3, [sp, #24]
 800a2b8:	9606      	strlt	r6, [sp, #24]
 800a2ba:	1af2      	sublt	r2, r6, r3
 800a2bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a2be:	bfb6      	itet	lt
 800a2c0:	189b      	addlt	r3, r3, r2
 800a2c2:	1b9e      	subge	r6, r3, r6
 800a2c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	bfb8      	it	lt
 800a2ca:	2600      	movlt	r6, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfb5      	itete	lt
 800a2d0:	eba8 0503 	sublt.w	r5, r8, r3
 800a2d4:	9b01      	ldrge	r3, [sp, #4]
 800a2d6:	2300      	movlt	r3, #0
 800a2d8:	4645      	movge	r5, r8
 800a2da:	e747      	b.n	800a16c <_dtoa_r+0x75c>
 800a2dc:	9e06      	ldr	r6, [sp, #24]
 800a2de:	9f08      	ldr	r7, [sp, #32]
 800a2e0:	4645      	mov	r5, r8
 800a2e2:	e74c      	b.n	800a17e <_dtoa_r+0x76e>
 800a2e4:	9a06      	ldr	r2, [sp, #24]
 800a2e6:	e775      	b.n	800a1d4 <_dtoa_r+0x7c4>
 800a2e8:	9b05      	ldr	r3, [sp, #20]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	dc18      	bgt.n	800a320 <_dtoa_r+0x910>
 800a2ee:	9b02      	ldr	r3, [sp, #8]
 800a2f0:	b9b3      	cbnz	r3, 800a320 <_dtoa_r+0x910>
 800a2f2:	9b03      	ldr	r3, [sp, #12]
 800a2f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2f8:	b9a3      	cbnz	r3, 800a324 <_dtoa_r+0x914>
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a300:	0d1b      	lsrs	r3, r3, #20
 800a302:	051b      	lsls	r3, r3, #20
 800a304:	b12b      	cbz	r3, 800a312 <_dtoa_r+0x902>
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	3301      	adds	r3, #1
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	f108 0801 	add.w	r8, r8, #1
 800a310:	2301      	movs	r3, #1
 800a312:	9306      	str	r3, [sp, #24]
 800a314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a316:	2b00      	cmp	r3, #0
 800a318:	f47f af74 	bne.w	800a204 <_dtoa_r+0x7f4>
 800a31c:	2001      	movs	r0, #1
 800a31e:	e779      	b.n	800a214 <_dtoa_r+0x804>
 800a320:	2300      	movs	r3, #0
 800a322:	e7f6      	b.n	800a312 <_dtoa_r+0x902>
 800a324:	9b02      	ldr	r3, [sp, #8]
 800a326:	e7f4      	b.n	800a312 <_dtoa_r+0x902>
 800a328:	d085      	beq.n	800a236 <_dtoa_r+0x826>
 800a32a:	4618      	mov	r0, r3
 800a32c:	301c      	adds	r0, #28
 800a32e:	e77d      	b.n	800a22c <_dtoa_r+0x81c>
 800a330:	40240000 	.word	0x40240000
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dc38      	bgt.n	800a3ac <_dtoa_r+0x99c>
 800a33a:	9b05      	ldr	r3, [sp, #20]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	dd35      	ble.n	800a3ac <_dtoa_r+0x99c>
 800a340:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	d10d      	bne.n	800a366 <_dtoa_r+0x956>
 800a34a:	4631      	mov	r1, r6
 800a34c:	464b      	mov	r3, r9
 800a34e:	2205      	movs	r2, #5
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fafb 	bl	800a94c <__multadd>
 800a356:	4601      	mov	r1, r0
 800a358:	4606      	mov	r6, r0
 800a35a:	4658      	mov	r0, fp
 800a35c:	f000 fd12 	bl	800ad84 <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	f73f adbd 	bgt.w	8009ee0 <_dtoa_r+0x4d0>
 800a366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a368:	9d00      	ldr	r5, [sp, #0]
 800a36a:	ea6f 0a03 	mvn.w	sl, r3
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	4631      	mov	r1, r6
 800a374:	4620      	mov	r0, r4
 800a376:	f000 fac7 	bl	800a908 <_Bfree>
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	f43f aeb4 	beq.w	800a0e8 <_dtoa_r+0x6d8>
 800a380:	f1b8 0f00 	cmp.w	r8, #0
 800a384:	d005      	beq.n	800a392 <_dtoa_r+0x982>
 800a386:	45b8      	cmp	r8, r7
 800a388:	d003      	beq.n	800a392 <_dtoa_r+0x982>
 800a38a:	4641      	mov	r1, r8
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 fabb 	bl	800a908 <_Bfree>
 800a392:	4639      	mov	r1, r7
 800a394:	4620      	mov	r0, r4
 800a396:	f000 fab7 	bl	800a908 <_Bfree>
 800a39a:	e6a5      	b.n	800a0e8 <_dtoa_r+0x6d8>
 800a39c:	2600      	movs	r6, #0
 800a39e:	4637      	mov	r7, r6
 800a3a0:	e7e1      	b.n	800a366 <_dtoa_r+0x956>
 800a3a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a3a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a3a8:	4637      	mov	r7, r6
 800a3aa:	e599      	b.n	8009ee0 <_dtoa_r+0x4d0>
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80fd 	beq.w	800a5b2 <_dtoa_r+0xba2>
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	dd05      	ble.n	800a3c8 <_dtoa_r+0x9b8>
 800a3bc:	4639      	mov	r1, r7
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fc73 	bl	800acac <__lshift>
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	9b06      	ldr	r3, [sp, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d05c      	beq.n	800a488 <_dtoa_r+0xa78>
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 fa59 	bl	800a888 <_Balloc>
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	b928      	cbnz	r0, 800a3e6 <_dtoa_r+0x9d6>
 800a3da:	4b80      	ldr	r3, [pc, #512]	; (800a5dc <_dtoa_r+0xbcc>)
 800a3dc:	4602      	mov	r2, r0
 800a3de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3e2:	f7ff bb2e 	b.w	8009a42 <_dtoa_r+0x32>
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	3202      	adds	r2, #2
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	f107 010c 	add.w	r1, r7, #12
 800a3f0:	300c      	adds	r0, #12
 800a3f2:	f7fe fb6e 	bl	8008ad2 <memcpy>
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fc56 	bl	800acac <__lshift>
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	444b      	add	r3, r9
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	9b02      	ldr	r3, [sp, #8]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	46b8      	mov	r8, r7
 800a414:	9306      	str	r3, [sp, #24]
 800a416:	4607      	mov	r7, r0
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	4631      	mov	r1, r6
 800a41c:	3b01      	subs	r3, #1
 800a41e:	4658      	mov	r0, fp
 800a420:	9302      	str	r3, [sp, #8]
 800a422:	f7ff fa67 	bl	80098f4 <quorem>
 800a426:	4603      	mov	r3, r0
 800a428:	3330      	adds	r3, #48	; 0x30
 800a42a:	9004      	str	r0, [sp, #16]
 800a42c:	4641      	mov	r1, r8
 800a42e:	4658      	mov	r0, fp
 800a430:	9308      	str	r3, [sp, #32]
 800a432:	f000 fca7 	bl	800ad84 <__mcmp>
 800a436:	463a      	mov	r2, r7
 800a438:	4681      	mov	r9, r0
 800a43a:	4631      	mov	r1, r6
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fcbd 	bl	800adbc <__mdiff>
 800a442:	68c2      	ldr	r2, [r0, #12]
 800a444:	9b08      	ldr	r3, [sp, #32]
 800a446:	4605      	mov	r5, r0
 800a448:	bb02      	cbnz	r2, 800a48c <_dtoa_r+0xa7c>
 800a44a:	4601      	mov	r1, r0
 800a44c:	4658      	mov	r0, fp
 800a44e:	f000 fc99 	bl	800ad84 <__mcmp>
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	4602      	mov	r2, r0
 800a456:	4629      	mov	r1, r5
 800a458:	4620      	mov	r0, r4
 800a45a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a45e:	f000 fa53 	bl	800a908 <_Bfree>
 800a462:	9b05      	ldr	r3, [sp, #20]
 800a464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a466:	9d01      	ldr	r5, [sp, #4]
 800a468:	ea43 0102 	orr.w	r1, r3, r2
 800a46c:	9b06      	ldr	r3, [sp, #24]
 800a46e:	430b      	orrs	r3, r1
 800a470:	9b08      	ldr	r3, [sp, #32]
 800a472:	d10d      	bne.n	800a490 <_dtoa_r+0xa80>
 800a474:	2b39      	cmp	r3, #57	; 0x39
 800a476:	d029      	beq.n	800a4cc <_dtoa_r+0xabc>
 800a478:	f1b9 0f00 	cmp.w	r9, #0
 800a47c:	dd01      	ble.n	800a482 <_dtoa_r+0xa72>
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	3331      	adds	r3, #49	; 0x31
 800a482:	9a02      	ldr	r2, [sp, #8]
 800a484:	7013      	strb	r3, [r2, #0]
 800a486:	e774      	b.n	800a372 <_dtoa_r+0x962>
 800a488:	4638      	mov	r0, r7
 800a48a:	e7b9      	b.n	800a400 <_dtoa_r+0x9f0>
 800a48c:	2201      	movs	r2, #1
 800a48e:	e7e2      	b.n	800a456 <_dtoa_r+0xa46>
 800a490:	f1b9 0f00 	cmp.w	r9, #0
 800a494:	db06      	blt.n	800a4a4 <_dtoa_r+0xa94>
 800a496:	9905      	ldr	r1, [sp, #20]
 800a498:	ea41 0909 	orr.w	r9, r1, r9
 800a49c:	9906      	ldr	r1, [sp, #24]
 800a49e:	ea59 0101 	orrs.w	r1, r9, r1
 800a4a2:	d120      	bne.n	800a4e6 <_dtoa_r+0xad6>
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	ddec      	ble.n	800a482 <_dtoa_r+0xa72>
 800a4a8:	4659      	mov	r1, fp
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	f000 fbfc 	bl	800acac <__lshift>
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4683      	mov	fp, r0
 800a4b8:	f000 fc64 	bl	800ad84 <__mcmp>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	dc02      	bgt.n	800a4c8 <_dtoa_r+0xab8>
 800a4c2:	d1de      	bne.n	800a482 <_dtoa_r+0xa72>
 800a4c4:	07da      	lsls	r2, r3, #31
 800a4c6:	d5dc      	bpl.n	800a482 <_dtoa_r+0xa72>
 800a4c8:	2b39      	cmp	r3, #57	; 0x39
 800a4ca:	d1d8      	bne.n	800a47e <_dtoa_r+0xa6e>
 800a4cc:	9a02      	ldr	r2, [sp, #8]
 800a4ce:	2339      	movs	r3, #57	; 0x39
 800a4d0:	7013      	strb	r3, [r2, #0]
 800a4d2:	462b      	mov	r3, r5
 800a4d4:	461d      	mov	r5, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4dc:	2a39      	cmp	r2, #57	; 0x39
 800a4de:	d050      	beq.n	800a582 <_dtoa_r+0xb72>
 800a4e0:	3201      	adds	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	e745      	b.n	800a372 <_dtoa_r+0x962>
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	dd03      	ble.n	800a4f2 <_dtoa_r+0xae2>
 800a4ea:	2b39      	cmp	r3, #57	; 0x39
 800a4ec:	d0ee      	beq.n	800a4cc <_dtoa_r+0xabc>
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	e7c7      	b.n	800a482 <_dtoa_r+0xa72>
 800a4f2:	9a01      	ldr	r2, [sp, #4]
 800a4f4:	9907      	ldr	r1, [sp, #28]
 800a4f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4fa:	428a      	cmp	r2, r1
 800a4fc:	d02a      	beq.n	800a554 <_dtoa_r+0xb44>
 800a4fe:	4659      	mov	r1, fp
 800a500:	2300      	movs	r3, #0
 800a502:	220a      	movs	r2, #10
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fa21 	bl	800a94c <__multadd>
 800a50a:	45b8      	cmp	r8, r7
 800a50c:	4683      	mov	fp, r0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	f04f 020a 	mov.w	r2, #10
 800a516:	4641      	mov	r1, r8
 800a518:	4620      	mov	r0, r4
 800a51a:	d107      	bne.n	800a52c <_dtoa_r+0xb1c>
 800a51c:	f000 fa16 	bl	800a94c <__multadd>
 800a520:	4680      	mov	r8, r0
 800a522:	4607      	mov	r7, r0
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	3301      	adds	r3, #1
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	e775      	b.n	800a418 <_dtoa_r+0xa08>
 800a52c:	f000 fa0e 	bl	800a94c <__multadd>
 800a530:	4639      	mov	r1, r7
 800a532:	4680      	mov	r8, r0
 800a534:	2300      	movs	r3, #0
 800a536:	220a      	movs	r2, #10
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fa07 	bl	800a94c <__multadd>
 800a53e:	4607      	mov	r7, r0
 800a540:	e7f0      	b.n	800a524 <_dtoa_r+0xb14>
 800a542:	f1b9 0f00 	cmp.w	r9, #0
 800a546:	9a00      	ldr	r2, [sp, #0]
 800a548:	bfcc      	ite	gt
 800a54a:	464d      	movgt	r5, r9
 800a54c:	2501      	movle	r5, #1
 800a54e:	4415      	add	r5, r2
 800a550:	f04f 0800 	mov.w	r8, #0
 800a554:	4659      	mov	r1, fp
 800a556:	2201      	movs	r2, #1
 800a558:	4620      	mov	r0, r4
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	f000 fba6 	bl	800acac <__lshift>
 800a560:	4631      	mov	r1, r6
 800a562:	4683      	mov	fp, r0
 800a564:	f000 fc0e 	bl	800ad84 <__mcmp>
 800a568:	2800      	cmp	r0, #0
 800a56a:	dcb2      	bgt.n	800a4d2 <_dtoa_r+0xac2>
 800a56c:	d102      	bne.n	800a574 <_dtoa_r+0xb64>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	07db      	lsls	r3, r3, #31
 800a572:	d4ae      	bmi.n	800a4d2 <_dtoa_r+0xac2>
 800a574:	462b      	mov	r3, r5
 800a576:	461d      	mov	r5, r3
 800a578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a57c:	2a30      	cmp	r2, #48	; 0x30
 800a57e:	d0fa      	beq.n	800a576 <_dtoa_r+0xb66>
 800a580:	e6f7      	b.n	800a372 <_dtoa_r+0x962>
 800a582:	9a00      	ldr	r2, [sp, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d1a5      	bne.n	800a4d4 <_dtoa_r+0xac4>
 800a588:	f10a 0a01 	add.w	sl, sl, #1
 800a58c:	2331      	movs	r3, #49	; 0x31
 800a58e:	e779      	b.n	800a484 <_dtoa_r+0xa74>
 800a590:	4b13      	ldr	r3, [pc, #76]	; (800a5e0 <_dtoa_r+0xbd0>)
 800a592:	f7ff baaf 	b.w	8009af4 <_dtoa_r+0xe4>
 800a596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f47f aa86 	bne.w	8009aaa <_dtoa_r+0x9a>
 800a59e:	4b11      	ldr	r3, [pc, #68]	; (800a5e4 <_dtoa_r+0xbd4>)
 800a5a0:	f7ff baa8 	b.w	8009af4 <_dtoa_r+0xe4>
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	dc03      	bgt.n	800a5b2 <_dtoa_r+0xba2>
 800a5aa:	9b05      	ldr	r3, [sp, #20]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	f73f aec9 	bgt.w	800a344 <_dtoa_r+0x934>
 800a5b2:	9d00      	ldr	r5, [sp, #0]
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	f7ff f99c 	bl	80098f4 <quorem>
 800a5bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a5c0:	f805 3b01 	strb.w	r3, [r5], #1
 800a5c4:	9a00      	ldr	r2, [sp, #0]
 800a5c6:	1aaa      	subs	r2, r5, r2
 800a5c8:	4591      	cmp	r9, r2
 800a5ca:	ddba      	ble.n	800a542 <_dtoa_r+0xb32>
 800a5cc:	4659      	mov	r1, fp
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	220a      	movs	r2, #10
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 f9ba 	bl	800a94c <__multadd>
 800a5d8:	4683      	mov	fp, r0
 800a5da:	e7eb      	b.n	800a5b4 <_dtoa_r+0xba4>
 800a5dc:	0800bbc4 	.word	0x0800bbc4
 800a5e0:	0800ba1c 	.word	0x0800ba1c
 800a5e4:	0800bb41 	.word	0x0800bb41

0800a5e8 <__sflush_r>:
 800a5e8:	898a      	ldrh	r2, [r1, #12]
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	0710      	lsls	r0, r2, #28
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	d458      	bmi.n	800a6a8 <__sflush_r+0xc0>
 800a5f6:	684b      	ldr	r3, [r1, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dc05      	bgt.n	800a608 <__sflush_r+0x20>
 800a5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	dc02      	bgt.n	800a608 <__sflush_r+0x20>
 800a602:	2000      	movs	r0, #0
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d0f9      	beq.n	800a602 <__sflush_r+0x1a>
 800a60e:	2300      	movs	r3, #0
 800a610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a614:	682f      	ldr	r7, [r5, #0]
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	d032      	beq.n	800a680 <__sflush_r+0x98>
 800a61a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	075a      	lsls	r2, r3, #29
 800a620:	d505      	bpl.n	800a62e <__sflush_r+0x46>
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a628:	b10b      	cbz	r3, 800a62e <__sflush_r+0x46>
 800a62a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a62c:	1ac0      	subs	r0, r0, r3
 800a62e:	2300      	movs	r3, #0
 800a630:	4602      	mov	r2, r0
 800a632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a634:	6a21      	ldr	r1, [r4, #32]
 800a636:	4628      	mov	r0, r5
 800a638:	47b0      	blx	r6
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	d106      	bne.n	800a64e <__sflush_r+0x66>
 800a640:	6829      	ldr	r1, [r5, #0]
 800a642:	291d      	cmp	r1, #29
 800a644:	d82c      	bhi.n	800a6a0 <__sflush_r+0xb8>
 800a646:	4a2a      	ldr	r2, [pc, #168]	; (800a6f0 <__sflush_r+0x108>)
 800a648:	40ca      	lsrs	r2, r1
 800a64a:	07d6      	lsls	r6, r2, #31
 800a64c:	d528      	bpl.n	800a6a0 <__sflush_r+0xb8>
 800a64e:	2200      	movs	r2, #0
 800a650:	6062      	str	r2, [r4, #4]
 800a652:	04d9      	lsls	r1, r3, #19
 800a654:	6922      	ldr	r2, [r4, #16]
 800a656:	6022      	str	r2, [r4, #0]
 800a658:	d504      	bpl.n	800a664 <__sflush_r+0x7c>
 800a65a:	1c42      	adds	r2, r0, #1
 800a65c:	d101      	bne.n	800a662 <__sflush_r+0x7a>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	b903      	cbnz	r3, 800a664 <__sflush_r+0x7c>
 800a662:	6560      	str	r0, [r4, #84]	; 0x54
 800a664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a666:	602f      	str	r7, [r5, #0]
 800a668:	2900      	cmp	r1, #0
 800a66a:	d0ca      	beq.n	800a602 <__sflush_r+0x1a>
 800a66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a670:	4299      	cmp	r1, r3
 800a672:	d002      	beq.n	800a67a <__sflush_r+0x92>
 800a674:	4628      	mov	r0, r5
 800a676:	f000 fc95 	bl	800afa4 <_free_r>
 800a67a:	2000      	movs	r0, #0
 800a67c:	6360      	str	r0, [r4, #52]	; 0x34
 800a67e:	e7c1      	b.n	800a604 <__sflush_r+0x1c>
 800a680:	6a21      	ldr	r1, [r4, #32]
 800a682:	2301      	movs	r3, #1
 800a684:	4628      	mov	r0, r5
 800a686:	47b0      	blx	r6
 800a688:	1c41      	adds	r1, r0, #1
 800a68a:	d1c7      	bne.n	800a61c <__sflush_r+0x34>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0c4      	beq.n	800a61c <__sflush_r+0x34>
 800a692:	2b1d      	cmp	r3, #29
 800a694:	d001      	beq.n	800a69a <__sflush_r+0xb2>
 800a696:	2b16      	cmp	r3, #22
 800a698:	d101      	bne.n	800a69e <__sflush_r+0xb6>
 800a69a:	602f      	str	r7, [r5, #0]
 800a69c:	e7b1      	b.n	800a602 <__sflush_r+0x1a>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7ad      	b.n	800a604 <__sflush_r+0x1c>
 800a6a8:	690f      	ldr	r7, [r1, #16]
 800a6aa:	2f00      	cmp	r7, #0
 800a6ac:	d0a9      	beq.n	800a602 <__sflush_r+0x1a>
 800a6ae:	0793      	lsls	r3, r2, #30
 800a6b0:	680e      	ldr	r6, [r1, #0]
 800a6b2:	bf08      	it	eq
 800a6b4:	694b      	ldreq	r3, [r1, #20]
 800a6b6:	600f      	str	r7, [r1, #0]
 800a6b8:	bf18      	it	ne
 800a6ba:	2300      	movne	r3, #0
 800a6bc:	eba6 0807 	sub.w	r8, r6, r7
 800a6c0:	608b      	str	r3, [r1, #8]
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	dd9c      	ble.n	800a602 <__sflush_r+0x1a>
 800a6c8:	6a21      	ldr	r1, [r4, #32]
 800a6ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6cc:	4643      	mov	r3, r8
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	47b0      	blx	r6
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	dc06      	bgt.n	800a6e6 <__sflush_r+0xfe>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	e78e      	b.n	800a604 <__sflush_r+0x1c>
 800a6e6:	4407      	add	r7, r0
 800a6e8:	eba8 0800 	sub.w	r8, r8, r0
 800a6ec:	e7e9      	b.n	800a6c2 <__sflush_r+0xda>
 800a6ee:	bf00      	nop
 800a6f0:	20400001 	.word	0x20400001

0800a6f4 <_fflush_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	690b      	ldr	r3, [r1, #16]
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	b913      	cbnz	r3, 800a704 <_fflush_r+0x10>
 800a6fe:	2500      	movs	r5, #0
 800a700:	4628      	mov	r0, r5
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	b118      	cbz	r0, 800a70e <_fflush_r+0x1a>
 800a706:	6983      	ldr	r3, [r0, #24]
 800a708:	b90b      	cbnz	r3, 800a70e <_fflush_r+0x1a>
 800a70a:	f7fe f91d 	bl	8008948 <__sinit>
 800a70e:	4b14      	ldr	r3, [pc, #80]	; (800a760 <_fflush_r+0x6c>)
 800a710:	429c      	cmp	r4, r3
 800a712:	d11b      	bne.n	800a74c <_fflush_r+0x58>
 800a714:	686c      	ldr	r4, [r5, #4]
 800a716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0ef      	beq.n	800a6fe <_fflush_r+0xa>
 800a71e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a720:	07d0      	lsls	r0, r2, #31
 800a722:	d404      	bmi.n	800a72e <_fflush_r+0x3a>
 800a724:	0599      	lsls	r1, r3, #22
 800a726:	d402      	bmi.n	800a72e <_fflush_r+0x3a>
 800a728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72a:	f7fe f9d0 	bl	8008ace <__retarget_lock_acquire_recursive>
 800a72e:	4628      	mov	r0, r5
 800a730:	4621      	mov	r1, r4
 800a732:	f7ff ff59 	bl	800a5e8 <__sflush_r>
 800a736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a738:	07da      	lsls	r2, r3, #31
 800a73a:	4605      	mov	r5, r0
 800a73c:	d4e0      	bmi.n	800a700 <_fflush_r+0xc>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	059b      	lsls	r3, r3, #22
 800a742:	d4dd      	bmi.n	800a700 <_fflush_r+0xc>
 800a744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a746:	f7fe f9c3 	bl	8008ad0 <__retarget_lock_release_recursive>
 800a74a:	e7d9      	b.n	800a700 <_fflush_r+0xc>
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <_fflush_r+0x70>)
 800a74e:	429c      	cmp	r4, r3
 800a750:	d101      	bne.n	800a756 <_fflush_r+0x62>
 800a752:	68ac      	ldr	r4, [r5, #8]
 800a754:	e7df      	b.n	800a716 <_fflush_r+0x22>
 800a756:	4b04      	ldr	r3, [pc, #16]	; (800a768 <_fflush_r+0x74>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	bf08      	it	eq
 800a75c:	68ec      	ldreq	r4, [r5, #12]
 800a75e:	e7da      	b.n	800a716 <_fflush_r+0x22>
 800a760:	0800b9c8 	.word	0x0800b9c8
 800a764:	0800b9e8 	.word	0x0800b9e8
 800a768:	0800b9a8 	.word	0x0800b9a8

0800a76c <_localeconv_r>:
 800a76c:	4800      	ldr	r0, [pc, #0]	; (800a770 <_localeconv_r+0x4>)
 800a76e:	4770      	bx	lr
 800a770:	20000230 	.word	0x20000230

0800a774 <_lseek_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d07      	ldr	r5, [pc, #28]	; (800a794 <_lseek_r+0x20>)
 800a778:	4604      	mov	r4, r0
 800a77a:	4608      	mov	r0, r1
 800a77c:	4611      	mov	r1, r2
 800a77e:	2200      	movs	r2, #0
 800a780:	602a      	str	r2, [r5, #0]
 800a782:	461a      	mov	r2, r3
 800a784:	f7f7 feba 	bl	80024fc <_lseek>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_lseek_r+0x1e>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_lseek_r+0x1e>
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	200053e4 	.word	0x200053e4

0800a798 <__swhatbuf_r>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	460e      	mov	r6, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	b096      	sub	sp, #88	; 0x58
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	da07      	bge.n	800a7ba <__swhatbuf_r+0x22>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	602b      	str	r3, [r5, #0]
 800a7ae:	89b3      	ldrh	r3, [r6, #12]
 800a7b0:	061a      	lsls	r2, r3, #24
 800a7b2:	d410      	bmi.n	800a7d6 <__swhatbuf_r+0x3e>
 800a7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b8:	e00e      	b.n	800a7d8 <__swhatbuf_r+0x40>
 800a7ba:	466a      	mov	r2, sp
 800a7bc:	f000 ff3a 	bl	800b634 <_fstat_r>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dbf2      	blt.n	800a7aa <__swhatbuf_r+0x12>
 800a7c4:	9a01      	ldr	r2, [sp, #4]
 800a7c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7ce:	425a      	negs	r2, r3
 800a7d0:	415a      	adcs	r2, r3
 800a7d2:	602a      	str	r2, [r5, #0]
 800a7d4:	e7ee      	b.n	800a7b4 <__swhatbuf_r+0x1c>
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	2000      	movs	r0, #0
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	b016      	add	sp, #88	; 0x58
 800a7de:	bd70      	pop	{r4, r5, r6, pc}

0800a7e0 <__smakebuf_r>:
 800a7e0:	898b      	ldrh	r3, [r1, #12]
 800a7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e4:	079d      	lsls	r5, r3, #30
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	d507      	bpl.n	800a7fc <__smakebuf_r+0x1c>
 800a7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	6123      	str	r3, [r4, #16]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	6163      	str	r3, [r4, #20]
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	ab01      	add	r3, sp, #4
 800a7fe:	466a      	mov	r2, sp
 800a800:	f7ff ffca 	bl	800a798 <__swhatbuf_r>
 800a804:	9900      	ldr	r1, [sp, #0]
 800a806:	4605      	mov	r5, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7fe f979 	bl	8008b00 <_malloc_r>
 800a80e:	b948      	cbnz	r0, 800a824 <__smakebuf_r+0x44>
 800a810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a814:	059a      	lsls	r2, r3, #22
 800a816:	d4ef      	bmi.n	800a7f8 <__smakebuf_r+0x18>
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	f043 0302 	orr.w	r3, r3, #2
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e7e3      	b.n	800a7ec <__smakebuf_r+0xc>
 800a824:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <__smakebuf_r+0x7c>)
 800a826:	62b3      	str	r3, [r6, #40]	; 0x28
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	6163      	str	r3, [r4, #20]
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	6120      	str	r0, [r4, #16]
 800a83a:	b15b      	cbz	r3, 800a854 <__smakebuf_r+0x74>
 800a83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a840:	4630      	mov	r0, r6
 800a842:	f000 ff09 	bl	800b658 <_isatty_r>
 800a846:	b128      	cbz	r0, 800a854 <__smakebuf_r+0x74>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	f043 0301 	orr.w	r3, r3, #1
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	89a0      	ldrh	r0, [r4, #12]
 800a856:	4305      	orrs	r5, r0
 800a858:	81a5      	strh	r5, [r4, #12]
 800a85a:	e7cd      	b.n	800a7f8 <__smakebuf_r+0x18>
 800a85c:	080088e1 	.word	0x080088e1

0800a860 <malloc>:
 800a860:	4b02      	ldr	r3, [pc, #8]	; (800a86c <malloc+0xc>)
 800a862:	4601      	mov	r1, r0
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	f7fe b94b 	b.w	8008b00 <_malloc_r>
 800a86a:	bf00      	nop
 800a86c:	200000dc 	.word	0x200000dc

0800a870 <__malloc_lock>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__malloc_lock+0x8>)
 800a872:	f7fe b92c 	b.w	8008ace <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	200053dc 	.word	0x200053dc

0800a87c <__malloc_unlock>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__malloc_unlock+0x8>)
 800a87e:	f7fe b927 	b.w	8008ad0 <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	200053dc 	.word	0x200053dc

0800a888 <_Balloc>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a88c:	4604      	mov	r4, r0
 800a88e:	460d      	mov	r5, r1
 800a890:	b976      	cbnz	r6, 800a8b0 <_Balloc+0x28>
 800a892:	2010      	movs	r0, #16
 800a894:	f7ff ffe4 	bl	800a860 <malloc>
 800a898:	4602      	mov	r2, r0
 800a89a:	6260      	str	r0, [r4, #36]	; 0x24
 800a89c:	b920      	cbnz	r0, 800a8a8 <_Balloc+0x20>
 800a89e:	4b18      	ldr	r3, [pc, #96]	; (800a900 <_Balloc+0x78>)
 800a8a0:	4818      	ldr	r0, [pc, #96]	; (800a904 <_Balloc+0x7c>)
 800a8a2:	2166      	movs	r1, #102	; 0x66
 800a8a4:	f000 fe96 	bl	800b5d4 <__assert_func>
 800a8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8ac:	6006      	str	r6, [r0, #0]
 800a8ae:	60c6      	str	r6, [r0, #12]
 800a8b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8b2:	68f3      	ldr	r3, [r6, #12]
 800a8b4:	b183      	cbz	r3, 800a8d8 <_Balloc+0x50>
 800a8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8be:	b9b8      	cbnz	r0, 800a8f0 <_Balloc+0x68>
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8c6:	1d72      	adds	r2, r6, #5
 800a8c8:	0092      	lsls	r2, r2, #2
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fb5a 	bl	800af84 <_calloc_r>
 800a8d0:	b160      	cbz	r0, 800a8ec <_Balloc+0x64>
 800a8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8d6:	e00e      	b.n	800a8f6 <_Balloc+0x6e>
 800a8d8:	2221      	movs	r2, #33	; 0x21
 800a8da:	2104      	movs	r1, #4
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fb51 	bl	800af84 <_calloc_r>
 800a8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e4:	60f0      	str	r0, [r6, #12]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e4      	bne.n	800a8b6 <_Balloc+0x2e>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	6802      	ldr	r2, [r0, #0]
 800a8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8fc:	e7f7      	b.n	800a8ee <_Balloc+0x66>
 800a8fe:	bf00      	nop
 800a900:	0800bb4e 	.word	0x0800bb4e
 800a904:	0800bbd5 	.word	0x0800bbd5

0800a908 <_Bfree>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a90c:	4605      	mov	r5, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	b976      	cbnz	r6, 800a930 <_Bfree+0x28>
 800a912:	2010      	movs	r0, #16
 800a914:	f7ff ffa4 	bl	800a860 <malloc>
 800a918:	4602      	mov	r2, r0
 800a91a:	6268      	str	r0, [r5, #36]	; 0x24
 800a91c:	b920      	cbnz	r0, 800a928 <_Bfree+0x20>
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <_Bfree+0x3c>)
 800a920:	4809      	ldr	r0, [pc, #36]	; (800a948 <_Bfree+0x40>)
 800a922:	218a      	movs	r1, #138	; 0x8a
 800a924:	f000 fe56 	bl	800b5d4 <__assert_func>
 800a928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a92c:	6006      	str	r6, [r0, #0]
 800a92e:	60c6      	str	r6, [r0, #12]
 800a930:	b13c      	cbz	r4, 800a942 <_Bfree+0x3a>
 800a932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a934:	6862      	ldr	r2, [r4, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a93c:	6021      	str	r1, [r4, #0]
 800a93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	0800bb4e 	.word	0x0800bb4e
 800a948:	0800bbd5 	.word	0x0800bbd5

0800a94c <__multadd>:
 800a94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a950:	690e      	ldr	r6, [r1, #16]
 800a952:	4607      	mov	r7, r0
 800a954:	4698      	mov	r8, r3
 800a956:	460c      	mov	r4, r1
 800a958:	f101 0014 	add.w	r0, r1, #20
 800a95c:	2300      	movs	r3, #0
 800a95e:	6805      	ldr	r5, [r0, #0]
 800a960:	b2a9      	uxth	r1, r5
 800a962:	fb02 8101 	mla	r1, r2, r1, r8
 800a966:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a96a:	0c2d      	lsrs	r5, r5, #16
 800a96c:	fb02 c505 	mla	r5, r2, r5, ip
 800a970:	b289      	uxth	r1, r1
 800a972:	3301      	adds	r3, #1
 800a974:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a978:	429e      	cmp	r6, r3
 800a97a:	f840 1b04 	str.w	r1, [r0], #4
 800a97e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a982:	dcec      	bgt.n	800a95e <__multadd+0x12>
 800a984:	f1b8 0f00 	cmp.w	r8, #0
 800a988:	d022      	beq.n	800a9d0 <__multadd+0x84>
 800a98a:	68a3      	ldr	r3, [r4, #8]
 800a98c:	42b3      	cmp	r3, r6
 800a98e:	dc19      	bgt.n	800a9c4 <__multadd+0x78>
 800a990:	6861      	ldr	r1, [r4, #4]
 800a992:	4638      	mov	r0, r7
 800a994:	3101      	adds	r1, #1
 800a996:	f7ff ff77 	bl	800a888 <_Balloc>
 800a99a:	4605      	mov	r5, r0
 800a99c:	b928      	cbnz	r0, 800a9aa <__multadd+0x5e>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <__multadd+0x8c>)
 800a9a2:	480e      	ldr	r0, [pc, #56]	; (800a9dc <__multadd+0x90>)
 800a9a4:	21b5      	movs	r1, #181	; 0xb5
 800a9a6:	f000 fe15 	bl	800b5d4 <__assert_func>
 800a9aa:	6922      	ldr	r2, [r4, #16]
 800a9ac:	3202      	adds	r2, #2
 800a9ae:	f104 010c 	add.w	r1, r4, #12
 800a9b2:	0092      	lsls	r2, r2, #2
 800a9b4:	300c      	adds	r0, #12
 800a9b6:	f7fe f88c 	bl	8008ad2 <memcpy>
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f7ff ffa3 	bl	800a908 <_Bfree>
 800a9c2:	462c      	mov	r4, r5
 800a9c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	f8c3 8014 	str.w	r8, [r3, #20]
 800a9ce:	6126      	str	r6, [r4, #16]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800bbc4 	.word	0x0800bbc4
 800a9dc:	0800bbd5 	.word	0x0800bbd5

0800a9e0 <__hi0bits>:
 800a9e0:	0c03      	lsrs	r3, r0, #16
 800a9e2:	041b      	lsls	r3, r3, #16
 800a9e4:	b9d3      	cbnz	r3, 800aa1c <__hi0bits+0x3c>
 800a9e6:	0400      	lsls	r0, r0, #16
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9ee:	bf04      	itt	eq
 800a9f0:	0200      	lsleq	r0, r0, #8
 800a9f2:	3308      	addeq	r3, #8
 800a9f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9f8:	bf04      	itt	eq
 800a9fa:	0100      	lsleq	r0, r0, #4
 800a9fc:	3304      	addeq	r3, #4
 800a9fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa02:	bf04      	itt	eq
 800aa04:	0080      	lsleq	r0, r0, #2
 800aa06:	3302      	addeq	r3, #2
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	db05      	blt.n	800aa18 <__hi0bits+0x38>
 800aa0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa10:	f103 0301 	add.w	r3, r3, #1
 800aa14:	bf08      	it	eq
 800aa16:	2320      	moveq	r3, #32
 800aa18:	4618      	mov	r0, r3
 800aa1a:	4770      	bx	lr
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e7e4      	b.n	800a9ea <__hi0bits+0xa>

0800aa20 <__lo0bits>:
 800aa20:	6803      	ldr	r3, [r0, #0]
 800aa22:	f013 0207 	ands.w	r2, r3, #7
 800aa26:	4601      	mov	r1, r0
 800aa28:	d00b      	beq.n	800aa42 <__lo0bits+0x22>
 800aa2a:	07da      	lsls	r2, r3, #31
 800aa2c:	d424      	bmi.n	800aa78 <__lo0bits+0x58>
 800aa2e:	0798      	lsls	r0, r3, #30
 800aa30:	bf49      	itett	mi
 800aa32:	085b      	lsrmi	r3, r3, #1
 800aa34:	089b      	lsrpl	r3, r3, #2
 800aa36:	2001      	movmi	r0, #1
 800aa38:	600b      	strmi	r3, [r1, #0]
 800aa3a:	bf5c      	itt	pl
 800aa3c:	600b      	strpl	r3, [r1, #0]
 800aa3e:	2002      	movpl	r0, #2
 800aa40:	4770      	bx	lr
 800aa42:	b298      	uxth	r0, r3
 800aa44:	b9b0      	cbnz	r0, 800aa74 <__lo0bits+0x54>
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	2010      	movs	r0, #16
 800aa4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa4e:	bf04      	itt	eq
 800aa50:	0a1b      	lsreq	r3, r3, #8
 800aa52:	3008      	addeq	r0, #8
 800aa54:	071a      	lsls	r2, r3, #28
 800aa56:	bf04      	itt	eq
 800aa58:	091b      	lsreq	r3, r3, #4
 800aa5a:	3004      	addeq	r0, #4
 800aa5c:	079a      	lsls	r2, r3, #30
 800aa5e:	bf04      	itt	eq
 800aa60:	089b      	lsreq	r3, r3, #2
 800aa62:	3002      	addeq	r0, #2
 800aa64:	07da      	lsls	r2, r3, #31
 800aa66:	d403      	bmi.n	800aa70 <__lo0bits+0x50>
 800aa68:	085b      	lsrs	r3, r3, #1
 800aa6a:	f100 0001 	add.w	r0, r0, #1
 800aa6e:	d005      	beq.n	800aa7c <__lo0bits+0x5c>
 800aa70:	600b      	str	r3, [r1, #0]
 800aa72:	4770      	bx	lr
 800aa74:	4610      	mov	r0, r2
 800aa76:	e7e8      	b.n	800aa4a <__lo0bits+0x2a>
 800aa78:	2000      	movs	r0, #0
 800aa7a:	4770      	bx	lr
 800aa7c:	2020      	movs	r0, #32
 800aa7e:	4770      	bx	lr

0800aa80 <__i2b>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	460c      	mov	r4, r1
 800aa84:	2101      	movs	r1, #1
 800aa86:	f7ff feff 	bl	800a888 <_Balloc>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	b928      	cbnz	r0, 800aa9a <__i2b+0x1a>
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <__i2b+0x24>)
 800aa90:	4805      	ldr	r0, [pc, #20]	; (800aaa8 <__i2b+0x28>)
 800aa92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa96:	f000 fd9d 	bl	800b5d4 <__assert_func>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	6144      	str	r4, [r0, #20]
 800aa9e:	6103      	str	r3, [r0, #16]
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800bbc4 	.word	0x0800bbc4
 800aaa8:	0800bbd5 	.word	0x0800bbd5

0800aaac <__multiply>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	4614      	mov	r4, r2
 800aab2:	690a      	ldr	r2, [r1, #16]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	bfb8      	it	lt
 800aaba:	460b      	movlt	r3, r1
 800aabc:	460d      	mov	r5, r1
 800aabe:	bfbc      	itt	lt
 800aac0:	4625      	movlt	r5, r4
 800aac2:	461c      	movlt	r4, r3
 800aac4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aac8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aacc:	68ab      	ldr	r3, [r5, #8]
 800aace:	6869      	ldr	r1, [r5, #4]
 800aad0:	eb0a 0709 	add.w	r7, sl, r9
 800aad4:	42bb      	cmp	r3, r7
 800aad6:	b085      	sub	sp, #20
 800aad8:	bfb8      	it	lt
 800aada:	3101      	addlt	r1, #1
 800aadc:	f7ff fed4 	bl	800a888 <_Balloc>
 800aae0:	b930      	cbnz	r0, 800aaf0 <__multiply+0x44>
 800aae2:	4602      	mov	r2, r0
 800aae4:	4b42      	ldr	r3, [pc, #264]	; (800abf0 <__multiply+0x144>)
 800aae6:	4843      	ldr	r0, [pc, #268]	; (800abf4 <__multiply+0x148>)
 800aae8:	f240 115d 	movw	r1, #349	; 0x15d
 800aaec:	f000 fd72 	bl	800b5d4 <__assert_func>
 800aaf0:	f100 0614 	add.w	r6, r0, #20
 800aaf4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aaf8:	4633      	mov	r3, r6
 800aafa:	2200      	movs	r2, #0
 800aafc:	4543      	cmp	r3, r8
 800aafe:	d31e      	bcc.n	800ab3e <__multiply+0x92>
 800ab00:	f105 0c14 	add.w	ip, r5, #20
 800ab04:	f104 0314 	add.w	r3, r4, #20
 800ab08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ab0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ab10:	9202      	str	r2, [sp, #8]
 800ab12:	ebac 0205 	sub.w	r2, ip, r5
 800ab16:	3a15      	subs	r2, #21
 800ab18:	f022 0203 	bic.w	r2, r2, #3
 800ab1c:	3204      	adds	r2, #4
 800ab1e:	f105 0115 	add.w	r1, r5, #21
 800ab22:	458c      	cmp	ip, r1
 800ab24:	bf38      	it	cc
 800ab26:	2204      	movcc	r2, #4
 800ab28:	9201      	str	r2, [sp, #4]
 800ab2a:	9a02      	ldr	r2, [sp, #8]
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d808      	bhi.n	800ab44 <__multiply+0x98>
 800ab32:	2f00      	cmp	r7, #0
 800ab34:	dc55      	bgt.n	800abe2 <__multiply+0x136>
 800ab36:	6107      	str	r7, [r0, #16]
 800ab38:	b005      	add	sp, #20
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	f843 2b04 	str.w	r2, [r3], #4
 800ab42:	e7db      	b.n	800aafc <__multiply+0x50>
 800ab44:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab48:	f1ba 0f00 	cmp.w	sl, #0
 800ab4c:	d020      	beq.n	800ab90 <__multiply+0xe4>
 800ab4e:	f105 0e14 	add.w	lr, r5, #20
 800ab52:	46b1      	mov	r9, r6
 800ab54:	2200      	movs	r2, #0
 800ab56:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ab5a:	f8d9 b000 	ldr.w	fp, [r9]
 800ab5e:	b2a1      	uxth	r1, r4
 800ab60:	fa1f fb8b 	uxth.w	fp, fp
 800ab64:	fb0a b101 	mla	r1, sl, r1, fp
 800ab68:	4411      	add	r1, r2
 800ab6a:	f8d9 2000 	ldr.w	r2, [r9]
 800ab6e:	0c24      	lsrs	r4, r4, #16
 800ab70:	0c12      	lsrs	r2, r2, #16
 800ab72:	fb0a 2404 	mla	r4, sl, r4, r2
 800ab76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ab7a:	b289      	uxth	r1, r1
 800ab7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab80:	45f4      	cmp	ip, lr
 800ab82:	f849 1b04 	str.w	r1, [r9], #4
 800ab86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ab8a:	d8e4      	bhi.n	800ab56 <__multiply+0xaa>
 800ab8c:	9901      	ldr	r1, [sp, #4]
 800ab8e:	5072      	str	r2, [r6, r1]
 800ab90:	9a03      	ldr	r2, [sp, #12]
 800ab92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab96:	3304      	adds	r3, #4
 800ab98:	f1b9 0f00 	cmp.w	r9, #0
 800ab9c:	d01f      	beq.n	800abde <__multiply+0x132>
 800ab9e:	6834      	ldr	r4, [r6, #0]
 800aba0:	f105 0114 	add.w	r1, r5, #20
 800aba4:	46b6      	mov	lr, r6
 800aba6:	f04f 0a00 	mov.w	sl, #0
 800abaa:	880a      	ldrh	r2, [r1, #0]
 800abac:	f8be b002 	ldrh.w	fp, [lr, #2]
 800abb0:	fb09 b202 	mla	r2, r9, r2, fp
 800abb4:	4492      	add	sl, r2
 800abb6:	b2a4      	uxth	r4, r4
 800abb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800abbc:	f84e 4b04 	str.w	r4, [lr], #4
 800abc0:	f851 4b04 	ldr.w	r4, [r1], #4
 800abc4:	f8be 2000 	ldrh.w	r2, [lr]
 800abc8:	0c24      	lsrs	r4, r4, #16
 800abca:	fb09 2404 	mla	r4, r9, r4, r2
 800abce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800abd2:	458c      	cmp	ip, r1
 800abd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abd8:	d8e7      	bhi.n	800abaa <__multiply+0xfe>
 800abda:	9a01      	ldr	r2, [sp, #4]
 800abdc:	50b4      	str	r4, [r6, r2]
 800abde:	3604      	adds	r6, #4
 800abe0:	e7a3      	b.n	800ab2a <__multiply+0x7e>
 800abe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1a5      	bne.n	800ab36 <__multiply+0x8a>
 800abea:	3f01      	subs	r7, #1
 800abec:	e7a1      	b.n	800ab32 <__multiply+0x86>
 800abee:	bf00      	nop
 800abf0:	0800bbc4 	.word	0x0800bbc4
 800abf4:	0800bbd5 	.word	0x0800bbd5

0800abf8 <__pow5mult>:
 800abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abfc:	4615      	mov	r5, r2
 800abfe:	f012 0203 	ands.w	r2, r2, #3
 800ac02:	4606      	mov	r6, r0
 800ac04:	460f      	mov	r7, r1
 800ac06:	d007      	beq.n	800ac18 <__pow5mult+0x20>
 800ac08:	4c25      	ldr	r4, [pc, #148]	; (800aca0 <__pow5mult+0xa8>)
 800ac0a:	3a01      	subs	r2, #1
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac12:	f7ff fe9b 	bl	800a94c <__multadd>
 800ac16:	4607      	mov	r7, r0
 800ac18:	10ad      	asrs	r5, r5, #2
 800ac1a:	d03d      	beq.n	800ac98 <__pow5mult+0xa0>
 800ac1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac1e:	b97c      	cbnz	r4, 800ac40 <__pow5mult+0x48>
 800ac20:	2010      	movs	r0, #16
 800ac22:	f7ff fe1d 	bl	800a860 <malloc>
 800ac26:	4602      	mov	r2, r0
 800ac28:	6270      	str	r0, [r6, #36]	; 0x24
 800ac2a:	b928      	cbnz	r0, 800ac38 <__pow5mult+0x40>
 800ac2c:	4b1d      	ldr	r3, [pc, #116]	; (800aca4 <__pow5mult+0xac>)
 800ac2e:	481e      	ldr	r0, [pc, #120]	; (800aca8 <__pow5mult+0xb0>)
 800ac30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac34:	f000 fcce 	bl	800b5d4 <__assert_func>
 800ac38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac3c:	6004      	str	r4, [r0, #0]
 800ac3e:	60c4      	str	r4, [r0, #12]
 800ac40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac48:	b94c      	cbnz	r4, 800ac5e <__pow5mult+0x66>
 800ac4a:	f240 2171 	movw	r1, #625	; 0x271
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f7ff ff16 	bl	800aa80 <__i2b>
 800ac54:	2300      	movs	r3, #0
 800ac56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	f04f 0900 	mov.w	r9, #0
 800ac62:	07eb      	lsls	r3, r5, #31
 800ac64:	d50a      	bpl.n	800ac7c <__pow5mult+0x84>
 800ac66:	4639      	mov	r1, r7
 800ac68:	4622      	mov	r2, r4
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ff1e 	bl	800aaac <__multiply>
 800ac70:	4639      	mov	r1, r7
 800ac72:	4680      	mov	r8, r0
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7ff fe47 	bl	800a908 <_Bfree>
 800ac7a:	4647      	mov	r7, r8
 800ac7c:	106d      	asrs	r5, r5, #1
 800ac7e:	d00b      	beq.n	800ac98 <__pow5mult+0xa0>
 800ac80:	6820      	ldr	r0, [r4, #0]
 800ac82:	b938      	cbnz	r0, 800ac94 <__pow5mult+0x9c>
 800ac84:	4622      	mov	r2, r4
 800ac86:	4621      	mov	r1, r4
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f7ff ff0f 	bl	800aaac <__multiply>
 800ac8e:	6020      	str	r0, [r4, #0]
 800ac90:	f8c0 9000 	str.w	r9, [r0]
 800ac94:	4604      	mov	r4, r0
 800ac96:	e7e4      	b.n	800ac62 <__pow5mult+0x6a>
 800ac98:	4638      	mov	r0, r7
 800ac9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9e:	bf00      	nop
 800aca0:	0800bd28 	.word	0x0800bd28
 800aca4:	0800bb4e 	.word	0x0800bb4e
 800aca8:	0800bbd5 	.word	0x0800bbd5

0800acac <__lshift>:
 800acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	6849      	ldr	r1, [r1, #4]
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acba:	68a3      	ldr	r3, [r4, #8]
 800acbc:	4607      	mov	r7, r0
 800acbe:	4691      	mov	r9, r2
 800acc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acc4:	f108 0601 	add.w	r6, r8, #1
 800acc8:	42b3      	cmp	r3, r6
 800acca:	db0b      	blt.n	800ace4 <__lshift+0x38>
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff fddb 	bl	800a888 <_Balloc>
 800acd2:	4605      	mov	r5, r0
 800acd4:	b948      	cbnz	r0, 800acea <__lshift+0x3e>
 800acd6:	4602      	mov	r2, r0
 800acd8:	4b28      	ldr	r3, [pc, #160]	; (800ad7c <__lshift+0xd0>)
 800acda:	4829      	ldr	r0, [pc, #164]	; (800ad80 <__lshift+0xd4>)
 800acdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ace0:	f000 fc78 	bl	800b5d4 <__assert_func>
 800ace4:	3101      	adds	r1, #1
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	e7ee      	b.n	800acc8 <__lshift+0x1c>
 800acea:	2300      	movs	r3, #0
 800acec:	f100 0114 	add.w	r1, r0, #20
 800acf0:	f100 0210 	add.w	r2, r0, #16
 800acf4:	4618      	mov	r0, r3
 800acf6:	4553      	cmp	r3, sl
 800acf8:	db33      	blt.n	800ad62 <__lshift+0xb6>
 800acfa:	6920      	ldr	r0, [r4, #16]
 800acfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad00:	f104 0314 	add.w	r3, r4, #20
 800ad04:	f019 091f 	ands.w	r9, r9, #31
 800ad08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad10:	d02b      	beq.n	800ad6a <__lshift+0xbe>
 800ad12:	f1c9 0e20 	rsb	lr, r9, #32
 800ad16:	468a      	mov	sl, r1
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6818      	ldr	r0, [r3, #0]
 800ad1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ad20:	4302      	orrs	r2, r0
 800ad22:	f84a 2b04 	str.w	r2, [sl], #4
 800ad26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad2a:	459c      	cmp	ip, r3
 800ad2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad30:	d8f3      	bhi.n	800ad1a <__lshift+0x6e>
 800ad32:	ebac 0304 	sub.w	r3, ip, r4
 800ad36:	3b15      	subs	r3, #21
 800ad38:	f023 0303 	bic.w	r3, r3, #3
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	f104 0015 	add.w	r0, r4, #21
 800ad42:	4584      	cmp	ip, r0
 800ad44:	bf38      	it	cc
 800ad46:	2304      	movcc	r3, #4
 800ad48:	50ca      	str	r2, [r1, r3]
 800ad4a:	b10a      	cbz	r2, 800ad50 <__lshift+0xa4>
 800ad4c:	f108 0602 	add.w	r6, r8, #2
 800ad50:	3e01      	subs	r6, #1
 800ad52:	4638      	mov	r0, r7
 800ad54:	612e      	str	r6, [r5, #16]
 800ad56:	4621      	mov	r1, r4
 800ad58:	f7ff fdd6 	bl	800a908 <_Bfree>
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad66:	3301      	adds	r3, #1
 800ad68:	e7c5      	b.n	800acf6 <__lshift+0x4a>
 800ad6a:	3904      	subs	r1, #4
 800ad6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad74:	459c      	cmp	ip, r3
 800ad76:	d8f9      	bhi.n	800ad6c <__lshift+0xc0>
 800ad78:	e7ea      	b.n	800ad50 <__lshift+0xa4>
 800ad7a:	bf00      	nop
 800ad7c:	0800bbc4 	.word	0x0800bbc4
 800ad80:	0800bbd5 	.word	0x0800bbd5

0800ad84 <__mcmp>:
 800ad84:	b530      	push	{r4, r5, lr}
 800ad86:	6902      	ldr	r2, [r0, #16]
 800ad88:	690c      	ldr	r4, [r1, #16]
 800ad8a:	1b12      	subs	r2, r2, r4
 800ad8c:	d10e      	bne.n	800adac <__mcmp+0x28>
 800ad8e:	f100 0314 	add.w	r3, r0, #20
 800ad92:	3114      	adds	r1, #20
 800ad94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ada0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ada4:	42a5      	cmp	r5, r4
 800ada6:	d003      	beq.n	800adb0 <__mcmp+0x2c>
 800ada8:	d305      	bcc.n	800adb6 <__mcmp+0x32>
 800adaa:	2201      	movs	r2, #1
 800adac:	4610      	mov	r0, r2
 800adae:	bd30      	pop	{r4, r5, pc}
 800adb0:	4283      	cmp	r3, r0
 800adb2:	d3f3      	bcc.n	800ad9c <__mcmp+0x18>
 800adb4:	e7fa      	b.n	800adac <__mcmp+0x28>
 800adb6:	f04f 32ff 	mov.w	r2, #4294967295
 800adba:	e7f7      	b.n	800adac <__mcmp+0x28>

0800adbc <__mdiff>:
 800adbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	460c      	mov	r4, r1
 800adc2:	4606      	mov	r6, r0
 800adc4:	4611      	mov	r1, r2
 800adc6:	4620      	mov	r0, r4
 800adc8:	4617      	mov	r7, r2
 800adca:	f7ff ffdb 	bl	800ad84 <__mcmp>
 800adce:	1e05      	subs	r5, r0, #0
 800add0:	d110      	bne.n	800adf4 <__mdiff+0x38>
 800add2:	4629      	mov	r1, r5
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff fd57 	bl	800a888 <_Balloc>
 800adda:	b930      	cbnz	r0, 800adea <__mdiff+0x2e>
 800addc:	4b39      	ldr	r3, [pc, #228]	; (800aec4 <__mdiff+0x108>)
 800adde:	4602      	mov	r2, r0
 800ade0:	f240 2132 	movw	r1, #562	; 0x232
 800ade4:	4838      	ldr	r0, [pc, #224]	; (800aec8 <__mdiff+0x10c>)
 800ade6:	f000 fbf5 	bl	800b5d4 <__assert_func>
 800adea:	2301      	movs	r3, #1
 800adec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	bfa4      	itt	ge
 800adf6:	463b      	movge	r3, r7
 800adf8:	4627      	movge	r7, r4
 800adfa:	4630      	mov	r0, r6
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	bfa6      	itte	ge
 800ae00:	461c      	movge	r4, r3
 800ae02:	2500      	movge	r5, #0
 800ae04:	2501      	movlt	r5, #1
 800ae06:	f7ff fd3f 	bl	800a888 <_Balloc>
 800ae0a:	b920      	cbnz	r0, 800ae16 <__mdiff+0x5a>
 800ae0c:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <__mdiff+0x108>)
 800ae0e:	4602      	mov	r2, r0
 800ae10:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae14:	e7e6      	b.n	800ade4 <__mdiff+0x28>
 800ae16:	693e      	ldr	r6, [r7, #16]
 800ae18:	60c5      	str	r5, [r0, #12]
 800ae1a:	6925      	ldr	r5, [r4, #16]
 800ae1c:	f107 0114 	add.w	r1, r7, #20
 800ae20:	f104 0914 	add.w	r9, r4, #20
 800ae24:	f100 0e14 	add.w	lr, r0, #20
 800ae28:	f107 0210 	add.w	r2, r7, #16
 800ae2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ae30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ae34:	46f2      	mov	sl, lr
 800ae36:	2700      	movs	r7, #0
 800ae38:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae40:	fa1f f883 	uxth.w	r8, r3
 800ae44:	fa17 f78b 	uxtah	r7, r7, fp
 800ae48:	0c1b      	lsrs	r3, r3, #16
 800ae4a:	eba7 0808 	sub.w	r8, r7, r8
 800ae4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae56:	fa1f f888 	uxth.w	r8, r8
 800ae5a:	141f      	asrs	r7, r3, #16
 800ae5c:	454d      	cmp	r5, r9
 800ae5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae62:	f84a 3b04 	str.w	r3, [sl], #4
 800ae66:	d8e7      	bhi.n	800ae38 <__mdiff+0x7c>
 800ae68:	1b2b      	subs	r3, r5, r4
 800ae6a:	3b15      	subs	r3, #21
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	3304      	adds	r3, #4
 800ae72:	3415      	adds	r4, #21
 800ae74:	42a5      	cmp	r5, r4
 800ae76:	bf38      	it	cc
 800ae78:	2304      	movcc	r3, #4
 800ae7a:	4419      	add	r1, r3
 800ae7c:	4473      	add	r3, lr
 800ae7e:	469e      	mov	lr, r3
 800ae80:	460d      	mov	r5, r1
 800ae82:	4565      	cmp	r5, ip
 800ae84:	d30e      	bcc.n	800aea4 <__mdiff+0xe8>
 800ae86:	f10c 0203 	add.w	r2, ip, #3
 800ae8a:	1a52      	subs	r2, r2, r1
 800ae8c:	f022 0203 	bic.w	r2, r2, #3
 800ae90:	3903      	subs	r1, #3
 800ae92:	458c      	cmp	ip, r1
 800ae94:	bf38      	it	cc
 800ae96:	2200      	movcc	r2, #0
 800ae98:	441a      	add	r2, r3
 800ae9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae9e:	b17b      	cbz	r3, 800aec0 <__mdiff+0x104>
 800aea0:	6106      	str	r6, [r0, #16]
 800aea2:	e7a5      	b.n	800adf0 <__mdiff+0x34>
 800aea4:	f855 8b04 	ldr.w	r8, [r5], #4
 800aea8:	fa17 f488 	uxtah	r4, r7, r8
 800aeac:	1422      	asrs	r2, r4, #16
 800aeae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aeb2:	b2a4      	uxth	r4, r4
 800aeb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aeb8:	f84e 4b04 	str.w	r4, [lr], #4
 800aebc:	1417      	asrs	r7, r2, #16
 800aebe:	e7e0      	b.n	800ae82 <__mdiff+0xc6>
 800aec0:	3e01      	subs	r6, #1
 800aec2:	e7ea      	b.n	800ae9a <__mdiff+0xde>
 800aec4:	0800bbc4 	.word	0x0800bbc4
 800aec8:	0800bbd5 	.word	0x0800bbd5

0800aecc <__d2b>:
 800aecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	4689      	mov	r9, r1
 800aed2:	2101      	movs	r1, #1
 800aed4:	ec57 6b10 	vmov	r6, r7, d0
 800aed8:	4690      	mov	r8, r2
 800aeda:	f7ff fcd5 	bl	800a888 <_Balloc>
 800aede:	4604      	mov	r4, r0
 800aee0:	b930      	cbnz	r0, 800aef0 <__d2b+0x24>
 800aee2:	4602      	mov	r2, r0
 800aee4:	4b25      	ldr	r3, [pc, #148]	; (800af7c <__d2b+0xb0>)
 800aee6:	4826      	ldr	r0, [pc, #152]	; (800af80 <__d2b+0xb4>)
 800aee8:	f240 310a 	movw	r1, #778	; 0x30a
 800aeec:	f000 fb72 	bl	800b5d4 <__assert_func>
 800aef0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aef4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aef8:	bb35      	cbnz	r5, 800af48 <__d2b+0x7c>
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	d028      	beq.n	800af52 <__d2b+0x86>
 800af00:	4668      	mov	r0, sp
 800af02:	9600      	str	r6, [sp, #0]
 800af04:	f7ff fd8c 	bl	800aa20 <__lo0bits>
 800af08:	9900      	ldr	r1, [sp, #0]
 800af0a:	b300      	cbz	r0, 800af4e <__d2b+0x82>
 800af0c:	9a01      	ldr	r2, [sp, #4]
 800af0e:	f1c0 0320 	rsb	r3, r0, #32
 800af12:	fa02 f303 	lsl.w	r3, r2, r3
 800af16:	430b      	orrs	r3, r1
 800af18:	40c2      	lsrs	r2, r0
 800af1a:	6163      	str	r3, [r4, #20]
 800af1c:	9201      	str	r2, [sp, #4]
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	61a3      	str	r3, [r4, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	bf14      	ite	ne
 800af26:	2202      	movne	r2, #2
 800af28:	2201      	moveq	r2, #1
 800af2a:	6122      	str	r2, [r4, #16]
 800af2c:	b1d5      	cbz	r5, 800af64 <__d2b+0x98>
 800af2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af32:	4405      	add	r5, r0
 800af34:	f8c9 5000 	str.w	r5, [r9]
 800af38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af3c:	f8c8 0000 	str.w	r0, [r8]
 800af40:	4620      	mov	r0, r4
 800af42:	b003      	add	sp, #12
 800af44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af4c:	e7d5      	b.n	800aefa <__d2b+0x2e>
 800af4e:	6161      	str	r1, [r4, #20]
 800af50:	e7e5      	b.n	800af1e <__d2b+0x52>
 800af52:	a801      	add	r0, sp, #4
 800af54:	f7ff fd64 	bl	800aa20 <__lo0bits>
 800af58:	9b01      	ldr	r3, [sp, #4]
 800af5a:	6163      	str	r3, [r4, #20]
 800af5c:	2201      	movs	r2, #1
 800af5e:	6122      	str	r2, [r4, #16]
 800af60:	3020      	adds	r0, #32
 800af62:	e7e3      	b.n	800af2c <__d2b+0x60>
 800af64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af6c:	f8c9 0000 	str.w	r0, [r9]
 800af70:	6918      	ldr	r0, [r3, #16]
 800af72:	f7ff fd35 	bl	800a9e0 <__hi0bits>
 800af76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af7a:	e7df      	b.n	800af3c <__d2b+0x70>
 800af7c:	0800bbc4 	.word	0x0800bbc4
 800af80:	0800bbd5 	.word	0x0800bbd5

0800af84 <_calloc_r>:
 800af84:	b513      	push	{r0, r1, r4, lr}
 800af86:	434a      	muls	r2, r1
 800af88:	4611      	mov	r1, r2
 800af8a:	9201      	str	r2, [sp, #4]
 800af8c:	f7fd fdb8 	bl	8008b00 <_malloc_r>
 800af90:	4604      	mov	r4, r0
 800af92:	b118      	cbz	r0, 800af9c <_calloc_r+0x18>
 800af94:	9a01      	ldr	r2, [sp, #4]
 800af96:	2100      	movs	r1, #0
 800af98:	f7fd fda9 	bl	8008aee <memset>
 800af9c:	4620      	mov	r0, r4
 800af9e:	b002      	add	sp, #8
 800afa0:	bd10      	pop	{r4, pc}
	...

0800afa4 <_free_r>:
 800afa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afa6:	2900      	cmp	r1, #0
 800afa8:	d048      	beq.n	800b03c <_free_r+0x98>
 800afaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afae:	9001      	str	r0, [sp, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f1a1 0404 	sub.w	r4, r1, #4
 800afb6:	bfb8      	it	lt
 800afb8:	18e4      	addlt	r4, r4, r3
 800afba:	f7ff fc59 	bl	800a870 <__malloc_lock>
 800afbe:	4a20      	ldr	r2, [pc, #128]	; (800b040 <_free_r+0x9c>)
 800afc0:	9801      	ldr	r0, [sp, #4]
 800afc2:	6813      	ldr	r3, [r2, #0]
 800afc4:	4615      	mov	r5, r2
 800afc6:	b933      	cbnz	r3, 800afd6 <_free_r+0x32>
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	6014      	str	r4, [r2, #0]
 800afcc:	b003      	add	sp, #12
 800afce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afd2:	f7ff bc53 	b.w	800a87c <__malloc_unlock>
 800afd6:	42a3      	cmp	r3, r4
 800afd8:	d90b      	bls.n	800aff2 <_free_r+0x4e>
 800afda:	6821      	ldr	r1, [r4, #0]
 800afdc:	1862      	adds	r2, r4, r1
 800afde:	4293      	cmp	r3, r2
 800afe0:	bf04      	itt	eq
 800afe2:	681a      	ldreq	r2, [r3, #0]
 800afe4:	685b      	ldreq	r3, [r3, #4]
 800afe6:	6063      	str	r3, [r4, #4]
 800afe8:	bf04      	itt	eq
 800afea:	1852      	addeq	r2, r2, r1
 800afec:	6022      	streq	r2, [r4, #0]
 800afee:	602c      	str	r4, [r5, #0]
 800aff0:	e7ec      	b.n	800afcc <_free_r+0x28>
 800aff2:	461a      	mov	r2, r3
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	b10b      	cbz	r3, 800affc <_free_r+0x58>
 800aff8:	42a3      	cmp	r3, r4
 800affa:	d9fa      	bls.n	800aff2 <_free_r+0x4e>
 800affc:	6811      	ldr	r1, [r2, #0]
 800affe:	1855      	adds	r5, r2, r1
 800b000:	42a5      	cmp	r5, r4
 800b002:	d10b      	bne.n	800b01c <_free_r+0x78>
 800b004:	6824      	ldr	r4, [r4, #0]
 800b006:	4421      	add	r1, r4
 800b008:	1854      	adds	r4, r2, r1
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	6011      	str	r1, [r2, #0]
 800b00e:	d1dd      	bne.n	800afcc <_free_r+0x28>
 800b010:	681c      	ldr	r4, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	6053      	str	r3, [r2, #4]
 800b016:	4421      	add	r1, r4
 800b018:	6011      	str	r1, [r2, #0]
 800b01a:	e7d7      	b.n	800afcc <_free_r+0x28>
 800b01c:	d902      	bls.n	800b024 <_free_r+0x80>
 800b01e:	230c      	movs	r3, #12
 800b020:	6003      	str	r3, [r0, #0]
 800b022:	e7d3      	b.n	800afcc <_free_r+0x28>
 800b024:	6825      	ldr	r5, [r4, #0]
 800b026:	1961      	adds	r1, r4, r5
 800b028:	428b      	cmp	r3, r1
 800b02a:	bf04      	itt	eq
 800b02c:	6819      	ldreq	r1, [r3, #0]
 800b02e:	685b      	ldreq	r3, [r3, #4]
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	bf04      	itt	eq
 800b034:	1949      	addeq	r1, r1, r5
 800b036:	6021      	streq	r1, [r4, #0]
 800b038:	6054      	str	r4, [r2, #4]
 800b03a:	e7c7      	b.n	800afcc <_free_r+0x28>
 800b03c:	b003      	add	sp, #12
 800b03e:	bd30      	pop	{r4, r5, pc}
 800b040:	20004e88 	.word	0x20004e88

0800b044 <__ssputs_r>:
 800b044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	688e      	ldr	r6, [r1, #8]
 800b04a:	429e      	cmp	r6, r3
 800b04c:	4682      	mov	sl, r0
 800b04e:	460c      	mov	r4, r1
 800b050:	4690      	mov	r8, r2
 800b052:	461f      	mov	r7, r3
 800b054:	d838      	bhi.n	800b0c8 <__ssputs_r+0x84>
 800b056:	898a      	ldrh	r2, [r1, #12]
 800b058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b05c:	d032      	beq.n	800b0c4 <__ssputs_r+0x80>
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	6909      	ldr	r1, [r1, #16]
 800b062:	eba5 0901 	sub.w	r9, r5, r1
 800b066:	6965      	ldr	r5, [r4, #20]
 800b068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b06c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b070:	3301      	adds	r3, #1
 800b072:	444b      	add	r3, r9
 800b074:	106d      	asrs	r5, r5, #1
 800b076:	429d      	cmp	r5, r3
 800b078:	bf38      	it	cc
 800b07a:	461d      	movcc	r5, r3
 800b07c:	0553      	lsls	r3, r2, #21
 800b07e:	d531      	bpl.n	800b0e4 <__ssputs_r+0xa0>
 800b080:	4629      	mov	r1, r5
 800b082:	f7fd fd3d 	bl	8008b00 <_malloc_r>
 800b086:	4606      	mov	r6, r0
 800b088:	b950      	cbnz	r0, 800b0a0 <__ssputs_r+0x5c>
 800b08a:	230c      	movs	r3, #12
 800b08c:	f8ca 3000 	str.w	r3, [sl]
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b096:	81a3      	strh	r3, [r4, #12]
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a0:	6921      	ldr	r1, [r4, #16]
 800b0a2:	464a      	mov	r2, r9
 800b0a4:	f7fd fd15 	bl	8008ad2 <memcpy>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	6126      	str	r6, [r4, #16]
 800b0b6:	6165      	str	r5, [r4, #20]
 800b0b8:	444e      	add	r6, r9
 800b0ba:	eba5 0509 	sub.w	r5, r5, r9
 800b0be:	6026      	str	r6, [r4, #0]
 800b0c0:	60a5      	str	r5, [r4, #8]
 800b0c2:	463e      	mov	r6, r7
 800b0c4:	42be      	cmp	r6, r7
 800b0c6:	d900      	bls.n	800b0ca <__ssputs_r+0x86>
 800b0c8:	463e      	mov	r6, r7
 800b0ca:	4632      	mov	r2, r6
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	4641      	mov	r1, r8
 800b0d0:	f000 fae4 	bl	800b69c <memmove>
 800b0d4:	68a3      	ldr	r3, [r4, #8]
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	1b9b      	subs	r3, r3, r6
 800b0da:	4432      	add	r2, r6
 800b0dc:	60a3      	str	r3, [r4, #8]
 800b0de:	6022      	str	r2, [r4, #0]
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e7db      	b.n	800b09c <__ssputs_r+0x58>
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	f000 faf3 	bl	800b6d0 <_realloc_r>
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d1e1      	bne.n	800b0b4 <__ssputs_r+0x70>
 800b0f0:	6921      	ldr	r1, [r4, #16]
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	f7ff ff56 	bl	800afa4 <_free_r>
 800b0f8:	e7c7      	b.n	800b08a <__ssputs_r+0x46>
	...

0800b0fc <_svfiprintf_r>:
 800b0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	4698      	mov	r8, r3
 800b102:	898b      	ldrh	r3, [r1, #12]
 800b104:	061b      	lsls	r3, r3, #24
 800b106:	b09d      	sub	sp, #116	; 0x74
 800b108:	4607      	mov	r7, r0
 800b10a:	460d      	mov	r5, r1
 800b10c:	4614      	mov	r4, r2
 800b10e:	d50e      	bpl.n	800b12e <_svfiprintf_r+0x32>
 800b110:	690b      	ldr	r3, [r1, #16]
 800b112:	b963      	cbnz	r3, 800b12e <_svfiprintf_r+0x32>
 800b114:	2140      	movs	r1, #64	; 0x40
 800b116:	f7fd fcf3 	bl	8008b00 <_malloc_r>
 800b11a:	6028      	str	r0, [r5, #0]
 800b11c:	6128      	str	r0, [r5, #16]
 800b11e:	b920      	cbnz	r0, 800b12a <_svfiprintf_r+0x2e>
 800b120:	230c      	movs	r3, #12
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	f04f 30ff 	mov.w	r0, #4294967295
 800b128:	e0d1      	b.n	800b2ce <_svfiprintf_r+0x1d2>
 800b12a:	2340      	movs	r3, #64	; 0x40
 800b12c:	616b      	str	r3, [r5, #20]
 800b12e:	2300      	movs	r3, #0
 800b130:	9309      	str	r3, [sp, #36]	; 0x24
 800b132:	2320      	movs	r3, #32
 800b134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b138:	f8cd 800c 	str.w	r8, [sp, #12]
 800b13c:	2330      	movs	r3, #48	; 0x30
 800b13e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2e8 <_svfiprintf_r+0x1ec>
 800b142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b146:	f04f 0901 	mov.w	r9, #1
 800b14a:	4623      	mov	r3, r4
 800b14c:	469a      	mov	sl, r3
 800b14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b152:	b10a      	cbz	r2, 800b158 <_svfiprintf_r+0x5c>
 800b154:	2a25      	cmp	r2, #37	; 0x25
 800b156:	d1f9      	bne.n	800b14c <_svfiprintf_r+0x50>
 800b158:	ebba 0b04 	subs.w	fp, sl, r4
 800b15c:	d00b      	beq.n	800b176 <_svfiprintf_r+0x7a>
 800b15e:	465b      	mov	r3, fp
 800b160:	4622      	mov	r2, r4
 800b162:	4629      	mov	r1, r5
 800b164:	4638      	mov	r0, r7
 800b166:	f7ff ff6d 	bl	800b044 <__ssputs_r>
 800b16a:	3001      	adds	r0, #1
 800b16c:	f000 80aa 	beq.w	800b2c4 <_svfiprintf_r+0x1c8>
 800b170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b172:	445a      	add	r2, fp
 800b174:	9209      	str	r2, [sp, #36]	; 0x24
 800b176:	f89a 3000 	ldrb.w	r3, [sl]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 80a2 	beq.w	800b2c4 <_svfiprintf_r+0x1c8>
 800b180:	2300      	movs	r3, #0
 800b182:	f04f 32ff 	mov.w	r2, #4294967295
 800b186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b18a:	f10a 0a01 	add.w	sl, sl, #1
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	9307      	str	r3, [sp, #28]
 800b192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b196:	931a      	str	r3, [sp, #104]	; 0x68
 800b198:	4654      	mov	r4, sl
 800b19a:	2205      	movs	r2, #5
 800b19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a0:	4851      	ldr	r0, [pc, #324]	; (800b2e8 <_svfiprintf_r+0x1ec>)
 800b1a2:	f7f5 f825 	bl	80001f0 <memchr>
 800b1a6:	9a04      	ldr	r2, [sp, #16]
 800b1a8:	b9d8      	cbnz	r0, 800b1e2 <_svfiprintf_r+0xe6>
 800b1aa:	06d0      	lsls	r0, r2, #27
 800b1ac:	bf44      	itt	mi
 800b1ae:	2320      	movmi	r3, #32
 800b1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b4:	0711      	lsls	r1, r2, #28
 800b1b6:	bf44      	itt	mi
 800b1b8:	232b      	movmi	r3, #43	; 0x2b
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c4:	d015      	beq.n	800b1f2 <_svfiprintf_r+0xf6>
 800b1c6:	9a07      	ldr	r2, [sp, #28]
 800b1c8:	4654      	mov	r4, sl
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	f04f 0c0a 	mov.w	ip, #10
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d6:	3b30      	subs	r3, #48	; 0x30
 800b1d8:	2b09      	cmp	r3, #9
 800b1da:	d94e      	bls.n	800b27a <_svfiprintf_r+0x17e>
 800b1dc:	b1b0      	cbz	r0, 800b20c <_svfiprintf_r+0x110>
 800b1de:	9207      	str	r2, [sp, #28]
 800b1e0:	e014      	b.n	800b20c <_svfiprintf_r+0x110>
 800b1e2:	eba0 0308 	sub.w	r3, r0, r8
 800b1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	46a2      	mov	sl, r4
 800b1f0:	e7d2      	b.n	800b198 <_svfiprintf_r+0x9c>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	1d19      	adds	r1, r3, #4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	9103      	str	r1, [sp, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfbb      	ittet	lt
 800b1fe:	425b      	neglt	r3, r3
 800b200:	f042 0202 	orrlt.w	r2, r2, #2
 800b204:	9307      	strge	r3, [sp, #28]
 800b206:	9307      	strlt	r3, [sp, #28]
 800b208:	bfb8      	it	lt
 800b20a:	9204      	strlt	r2, [sp, #16]
 800b20c:	7823      	ldrb	r3, [r4, #0]
 800b20e:	2b2e      	cmp	r3, #46	; 0x2e
 800b210:	d10c      	bne.n	800b22c <_svfiprintf_r+0x130>
 800b212:	7863      	ldrb	r3, [r4, #1]
 800b214:	2b2a      	cmp	r3, #42	; 0x2a
 800b216:	d135      	bne.n	800b284 <_svfiprintf_r+0x188>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	1d1a      	adds	r2, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	9203      	str	r2, [sp, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfb8      	it	lt
 800b224:	f04f 33ff 	movlt.w	r3, #4294967295
 800b228:	3402      	adds	r4, #2
 800b22a:	9305      	str	r3, [sp, #20]
 800b22c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2f8 <_svfiprintf_r+0x1fc>
 800b230:	7821      	ldrb	r1, [r4, #0]
 800b232:	2203      	movs	r2, #3
 800b234:	4650      	mov	r0, sl
 800b236:	f7f4 ffdb 	bl	80001f0 <memchr>
 800b23a:	b140      	cbz	r0, 800b24e <_svfiprintf_r+0x152>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	eba0 000a 	sub.w	r0, r0, sl
 800b242:	fa03 f000 	lsl.w	r0, r3, r0
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	4303      	orrs	r3, r0
 800b24a:	3401      	adds	r4, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b252:	4826      	ldr	r0, [pc, #152]	; (800b2ec <_svfiprintf_r+0x1f0>)
 800b254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b258:	2206      	movs	r2, #6
 800b25a:	f7f4 ffc9 	bl	80001f0 <memchr>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d038      	beq.n	800b2d4 <_svfiprintf_r+0x1d8>
 800b262:	4b23      	ldr	r3, [pc, #140]	; (800b2f0 <_svfiprintf_r+0x1f4>)
 800b264:	bb1b      	cbnz	r3, 800b2ae <_svfiprintf_r+0x1b2>
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	3307      	adds	r3, #7
 800b26a:	f023 0307 	bic.w	r3, r3, #7
 800b26e:	3308      	adds	r3, #8
 800b270:	9303      	str	r3, [sp, #12]
 800b272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b274:	4433      	add	r3, r6
 800b276:	9309      	str	r3, [sp, #36]	; 0x24
 800b278:	e767      	b.n	800b14a <_svfiprintf_r+0x4e>
 800b27a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b27e:	460c      	mov	r4, r1
 800b280:	2001      	movs	r0, #1
 800b282:	e7a5      	b.n	800b1d0 <_svfiprintf_r+0xd4>
 800b284:	2300      	movs	r3, #0
 800b286:	3401      	adds	r4, #1
 800b288:	9305      	str	r3, [sp, #20]
 800b28a:	4619      	mov	r1, r3
 800b28c:	f04f 0c0a 	mov.w	ip, #10
 800b290:	4620      	mov	r0, r4
 800b292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b296:	3a30      	subs	r2, #48	; 0x30
 800b298:	2a09      	cmp	r2, #9
 800b29a:	d903      	bls.n	800b2a4 <_svfiprintf_r+0x1a8>
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d0c5      	beq.n	800b22c <_svfiprintf_r+0x130>
 800b2a0:	9105      	str	r1, [sp, #20]
 800b2a2:	e7c3      	b.n	800b22c <_svfiprintf_r+0x130>
 800b2a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e7f0      	b.n	800b290 <_svfiprintf_r+0x194>
 800b2ae:	ab03      	add	r3, sp, #12
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <_svfiprintf_r+0x1f8>)
 800b2b6:	a904      	add	r1, sp, #16
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7fd fd1b 	bl	8008cf4 <_printf_float>
 800b2be:	1c42      	adds	r2, r0, #1
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	d1d6      	bne.n	800b272 <_svfiprintf_r+0x176>
 800b2c4:	89ab      	ldrh	r3, [r5, #12]
 800b2c6:	065b      	lsls	r3, r3, #25
 800b2c8:	f53f af2c 	bmi.w	800b124 <_svfiprintf_r+0x28>
 800b2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ce:	b01d      	add	sp, #116	; 0x74
 800b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d4:	ab03      	add	r3, sp, #12
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	462a      	mov	r2, r5
 800b2da:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <_svfiprintf_r+0x1f8>)
 800b2dc:	a904      	add	r1, sp, #16
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7fd ffac 	bl	800923c <_printf_i>
 800b2e4:	e7eb      	b.n	800b2be <_svfiprintf_r+0x1c2>
 800b2e6:	bf00      	nop
 800b2e8:	0800bd34 	.word	0x0800bd34
 800b2ec:	0800bd3e 	.word	0x0800bd3e
 800b2f0:	08008cf5 	.word	0x08008cf5
 800b2f4:	0800b045 	.word	0x0800b045
 800b2f8:	0800bd3a 	.word	0x0800bd3a

0800b2fc <__sfputc_r>:
 800b2fc:	6893      	ldr	r3, [r2, #8]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	b410      	push	{r4}
 800b304:	6093      	str	r3, [r2, #8]
 800b306:	da08      	bge.n	800b31a <__sfputc_r+0x1e>
 800b308:	6994      	ldr	r4, [r2, #24]
 800b30a:	42a3      	cmp	r3, r4
 800b30c:	db01      	blt.n	800b312 <__sfputc_r+0x16>
 800b30e:	290a      	cmp	r1, #10
 800b310:	d103      	bne.n	800b31a <__sfputc_r+0x1e>
 800b312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b316:	f7fe ba0b 	b.w	8009730 <__swbuf_r>
 800b31a:	6813      	ldr	r3, [r2, #0]
 800b31c:	1c58      	adds	r0, r3, #1
 800b31e:	6010      	str	r0, [r2, #0]
 800b320:	7019      	strb	r1, [r3, #0]
 800b322:	4608      	mov	r0, r1
 800b324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <__sfputs_r>:
 800b32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32c:	4606      	mov	r6, r0
 800b32e:	460f      	mov	r7, r1
 800b330:	4614      	mov	r4, r2
 800b332:	18d5      	adds	r5, r2, r3
 800b334:	42ac      	cmp	r4, r5
 800b336:	d101      	bne.n	800b33c <__sfputs_r+0x12>
 800b338:	2000      	movs	r0, #0
 800b33a:	e007      	b.n	800b34c <__sfputs_r+0x22>
 800b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b340:	463a      	mov	r2, r7
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ffda 	bl	800b2fc <__sfputc_r>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d1f3      	bne.n	800b334 <__sfputs_r+0xa>
 800b34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b350 <_vfiprintf_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	460d      	mov	r5, r1
 800b356:	b09d      	sub	sp, #116	; 0x74
 800b358:	4614      	mov	r4, r2
 800b35a:	4698      	mov	r8, r3
 800b35c:	4606      	mov	r6, r0
 800b35e:	b118      	cbz	r0, 800b368 <_vfiprintf_r+0x18>
 800b360:	6983      	ldr	r3, [r0, #24]
 800b362:	b90b      	cbnz	r3, 800b368 <_vfiprintf_r+0x18>
 800b364:	f7fd faf0 	bl	8008948 <__sinit>
 800b368:	4b89      	ldr	r3, [pc, #548]	; (800b590 <_vfiprintf_r+0x240>)
 800b36a:	429d      	cmp	r5, r3
 800b36c:	d11b      	bne.n	800b3a6 <_vfiprintf_r+0x56>
 800b36e:	6875      	ldr	r5, [r6, #4]
 800b370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b372:	07d9      	lsls	r1, r3, #31
 800b374:	d405      	bmi.n	800b382 <_vfiprintf_r+0x32>
 800b376:	89ab      	ldrh	r3, [r5, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d402      	bmi.n	800b382 <_vfiprintf_r+0x32>
 800b37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b37e:	f7fd fba6 	bl	8008ace <__retarget_lock_acquire_recursive>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	071b      	lsls	r3, r3, #28
 800b386:	d501      	bpl.n	800b38c <_vfiprintf_r+0x3c>
 800b388:	692b      	ldr	r3, [r5, #16]
 800b38a:	b9eb      	cbnz	r3, 800b3c8 <_vfiprintf_r+0x78>
 800b38c:	4629      	mov	r1, r5
 800b38e:	4630      	mov	r0, r6
 800b390:	f7fe fa32 	bl	80097f8 <__swsetup_r>
 800b394:	b1c0      	cbz	r0, 800b3c8 <_vfiprintf_r+0x78>
 800b396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b398:	07dc      	lsls	r4, r3, #31
 800b39a:	d50e      	bpl.n	800b3ba <_vfiprintf_r+0x6a>
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	b01d      	add	sp, #116	; 0x74
 800b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a6:	4b7b      	ldr	r3, [pc, #492]	; (800b594 <_vfiprintf_r+0x244>)
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	d101      	bne.n	800b3b0 <_vfiprintf_r+0x60>
 800b3ac:	68b5      	ldr	r5, [r6, #8]
 800b3ae:	e7df      	b.n	800b370 <_vfiprintf_r+0x20>
 800b3b0:	4b79      	ldr	r3, [pc, #484]	; (800b598 <_vfiprintf_r+0x248>)
 800b3b2:	429d      	cmp	r5, r3
 800b3b4:	bf08      	it	eq
 800b3b6:	68f5      	ldreq	r5, [r6, #12]
 800b3b8:	e7da      	b.n	800b370 <_vfiprintf_r+0x20>
 800b3ba:	89ab      	ldrh	r3, [r5, #12]
 800b3bc:	0598      	lsls	r0, r3, #22
 800b3be:	d4ed      	bmi.n	800b39c <_vfiprintf_r+0x4c>
 800b3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c2:	f7fd fb85 	bl	8008ad0 <__retarget_lock_release_recursive>
 800b3c6:	e7e9      	b.n	800b39c <_vfiprintf_r+0x4c>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b3cc:	2320      	movs	r3, #32
 800b3ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3d6:	2330      	movs	r3, #48	; 0x30
 800b3d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b59c <_vfiprintf_r+0x24c>
 800b3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e0:	f04f 0901 	mov.w	r9, #1
 800b3e4:	4623      	mov	r3, r4
 800b3e6:	469a      	mov	sl, r3
 800b3e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3ec:	b10a      	cbz	r2, 800b3f2 <_vfiprintf_r+0xa2>
 800b3ee:	2a25      	cmp	r2, #37	; 0x25
 800b3f0:	d1f9      	bne.n	800b3e6 <_vfiprintf_r+0x96>
 800b3f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f6:	d00b      	beq.n	800b410 <_vfiprintf_r+0xc0>
 800b3f8:	465b      	mov	r3, fp
 800b3fa:	4622      	mov	r2, r4
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7ff ff93 	bl	800b32a <__sfputs_r>
 800b404:	3001      	adds	r0, #1
 800b406:	f000 80aa 	beq.w	800b55e <_vfiprintf_r+0x20e>
 800b40a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b40c:	445a      	add	r2, fp
 800b40e:	9209      	str	r2, [sp, #36]	; 0x24
 800b410:	f89a 3000 	ldrb.w	r3, [sl]
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80a2 	beq.w	800b55e <_vfiprintf_r+0x20e>
 800b41a:	2300      	movs	r3, #0
 800b41c:	f04f 32ff 	mov.w	r2, #4294967295
 800b420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b424:	f10a 0a01 	add.w	sl, sl, #1
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	9307      	str	r3, [sp, #28]
 800b42c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b430:	931a      	str	r3, [sp, #104]	; 0x68
 800b432:	4654      	mov	r4, sl
 800b434:	2205      	movs	r2, #5
 800b436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43a:	4858      	ldr	r0, [pc, #352]	; (800b59c <_vfiprintf_r+0x24c>)
 800b43c:	f7f4 fed8 	bl	80001f0 <memchr>
 800b440:	9a04      	ldr	r2, [sp, #16]
 800b442:	b9d8      	cbnz	r0, 800b47c <_vfiprintf_r+0x12c>
 800b444:	06d1      	lsls	r1, r2, #27
 800b446:	bf44      	itt	mi
 800b448:	2320      	movmi	r3, #32
 800b44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b44e:	0713      	lsls	r3, r2, #28
 800b450:	bf44      	itt	mi
 800b452:	232b      	movmi	r3, #43	; 0x2b
 800b454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b458:	f89a 3000 	ldrb.w	r3, [sl]
 800b45c:	2b2a      	cmp	r3, #42	; 0x2a
 800b45e:	d015      	beq.n	800b48c <_vfiprintf_r+0x13c>
 800b460:	9a07      	ldr	r2, [sp, #28]
 800b462:	4654      	mov	r4, sl
 800b464:	2000      	movs	r0, #0
 800b466:	f04f 0c0a 	mov.w	ip, #10
 800b46a:	4621      	mov	r1, r4
 800b46c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b470:	3b30      	subs	r3, #48	; 0x30
 800b472:	2b09      	cmp	r3, #9
 800b474:	d94e      	bls.n	800b514 <_vfiprintf_r+0x1c4>
 800b476:	b1b0      	cbz	r0, 800b4a6 <_vfiprintf_r+0x156>
 800b478:	9207      	str	r2, [sp, #28]
 800b47a:	e014      	b.n	800b4a6 <_vfiprintf_r+0x156>
 800b47c:	eba0 0308 	sub.w	r3, r0, r8
 800b480:	fa09 f303 	lsl.w	r3, r9, r3
 800b484:	4313      	orrs	r3, r2
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	46a2      	mov	sl, r4
 800b48a:	e7d2      	b.n	800b432 <_vfiprintf_r+0xe2>
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	1d19      	adds	r1, r3, #4
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	9103      	str	r1, [sp, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	bfbb      	ittet	lt
 800b498:	425b      	neglt	r3, r3
 800b49a:	f042 0202 	orrlt.w	r2, r2, #2
 800b49e:	9307      	strge	r3, [sp, #28]
 800b4a0:	9307      	strlt	r3, [sp, #28]
 800b4a2:	bfb8      	it	lt
 800b4a4:	9204      	strlt	r2, [sp, #16]
 800b4a6:	7823      	ldrb	r3, [r4, #0]
 800b4a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4aa:	d10c      	bne.n	800b4c6 <_vfiprintf_r+0x176>
 800b4ac:	7863      	ldrb	r3, [r4, #1]
 800b4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b0:	d135      	bne.n	800b51e <_vfiprintf_r+0x1ce>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	9203      	str	r2, [sp, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	bfb8      	it	lt
 800b4be:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c2:	3402      	adds	r4, #2
 800b4c4:	9305      	str	r3, [sp, #20]
 800b4c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5ac <_vfiprintf_r+0x25c>
 800b4ca:	7821      	ldrb	r1, [r4, #0]
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	4650      	mov	r0, sl
 800b4d0:	f7f4 fe8e 	bl	80001f0 <memchr>
 800b4d4:	b140      	cbz	r0, 800b4e8 <_vfiprintf_r+0x198>
 800b4d6:	2340      	movs	r3, #64	; 0x40
 800b4d8:	eba0 000a 	sub.w	r0, r0, sl
 800b4dc:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e0:	9b04      	ldr	r3, [sp, #16]
 800b4e2:	4303      	orrs	r3, r0
 800b4e4:	3401      	adds	r4, #1
 800b4e6:	9304      	str	r3, [sp, #16]
 800b4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ec:	482c      	ldr	r0, [pc, #176]	; (800b5a0 <_vfiprintf_r+0x250>)
 800b4ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f2:	2206      	movs	r2, #6
 800b4f4:	f7f4 fe7c 	bl	80001f0 <memchr>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d03f      	beq.n	800b57c <_vfiprintf_r+0x22c>
 800b4fc:	4b29      	ldr	r3, [pc, #164]	; (800b5a4 <_vfiprintf_r+0x254>)
 800b4fe:	bb1b      	cbnz	r3, 800b548 <_vfiprintf_r+0x1f8>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	3307      	adds	r3, #7
 800b504:	f023 0307 	bic.w	r3, r3, #7
 800b508:	3308      	adds	r3, #8
 800b50a:	9303      	str	r3, [sp, #12]
 800b50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50e:	443b      	add	r3, r7
 800b510:	9309      	str	r3, [sp, #36]	; 0x24
 800b512:	e767      	b.n	800b3e4 <_vfiprintf_r+0x94>
 800b514:	fb0c 3202 	mla	r2, ip, r2, r3
 800b518:	460c      	mov	r4, r1
 800b51a:	2001      	movs	r0, #1
 800b51c:	e7a5      	b.n	800b46a <_vfiprintf_r+0x11a>
 800b51e:	2300      	movs	r3, #0
 800b520:	3401      	adds	r4, #1
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	4619      	mov	r1, r3
 800b526:	f04f 0c0a 	mov.w	ip, #10
 800b52a:	4620      	mov	r0, r4
 800b52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b530:	3a30      	subs	r2, #48	; 0x30
 800b532:	2a09      	cmp	r2, #9
 800b534:	d903      	bls.n	800b53e <_vfiprintf_r+0x1ee>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0c5      	beq.n	800b4c6 <_vfiprintf_r+0x176>
 800b53a:	9105      	str	r1, [sp, #20]
 800b53c:	e7c3      	b.n	800b4c6 <_vfiprintf_r+0x176>
 800b53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b542:	4604      	mov	r4, r0
 800b544:	2301      	movs	r3, #1
 800b546:	e7f0      	b.n	800b52a <_vfiprintf_r+0x1da>
 800b548:	ab03      	add	r3, sp, #12
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	462a      	mov	r2, r5
 800b54e:	4b16      	ldr	r3, [pc, #88]	; (800b5a8 <_vfiprintf_r+0x258>)
 800b550:	a904      	add	r1, sp, #16
 800b552:	4630      	mov	r0, r6
 800b554:	f7fd fbce 	bl	8008cf4 <_printf_float>
 800b558:	4607      	mov	r7, r0
 800b55a:	1c78      	adds	r0, r7, #1
 800b55c:	d1d6      	bne.n	800b50c <_vfiprintf_r+0x1bc>
 800b55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b560:	07d9      	lsls	r1, r3, #31
 800b562:	d405      	bmi.n	800b570 <_vfiprintf_r+0x220>
 800b564:	89ab      	ldrh	r3, [r5, #12]
 800b566:	059a      	lsls	r2, r3, #22
 800b568:	d402      	bmi.n	800b570 <_vfiprintf_r+0x220>
 800b56a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b56c:	f7fd fab0 	bl	8008ad0 <__retarget_lock_release_recursive>
 800b570:	89ab      	ldrh	r3, [r5, #12]
 800b572:	065b      	lsls	r3, r3, #25
 800b574:	f53f af12 	bmi.w	800b39c <_vfiprintf_r+0x4c>
 800b578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57a:	e711      	b.n	800b3a0 <_vfiprintf_r+0x50>
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <_vfiprintf_r+0x258>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4630      	mov	r0, r6
 800b588:	f7fd fe58 	bl	800923c <_printf_i>
 800b58c:	e7e4      	b.n	800b558 <_vfiprintf_r+0x208>
 800b58e:	bf00      	nop
 800b590:	0800b9c8 	.word	0x0800b9c8
 800b594:	0800b9e8 	.word	0x0800b9e8
 800b598:	0800b9a8 	.word	0x0800b9a8
 800b59c:	0800bd34 	.word	0x0800bd34
 800b5a0:	0800bd3e 	.word	0x0800bd3e
 800b5a4:	08008cf5 	.word	0x08008cf5
 800b5a8:	0800b32b 	.word	0x0800b32b
 800b5ac:	0800bd3a 	.word	0x0800bd3a

0800b5b0 <_read_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4d07      	ldr	r5, [pc, #28]	; (800b5d0 <_read_r+0x20>)
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	4608      	mov	r0, r1
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	602a      	str	r2, [r5, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	f7f6 ff3c 	bl	800243c <_read>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	d102      	bne.n	800b5ce <_read_r+0x1e>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	b103      	cbz	r3, 800b5ce <_read_r+0x1e>
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	bd38      	pop	{r3, r4, r5, pc}
 800b5d0:	200053e4 	.word	0x200053e4

0800b5d4 <__assert_func>:
 800b5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5d6:	4614      	mov	r4, r2
 800b5d8:	461a      	mov	r2, r3
 800b5da:	4b09      	ldr	r3, [pc, #36]	; (800b600 <__assert_func+0x2c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4605      	mov	r5, r0
 800b5e0:	68d8      	ldr	r0, [r3, #12]
 800b5e2:	b14c      	cbz	r4, 800b5f8 <__assert_func+0x24>
 800b5e4:	4b07      	ldr	r3, [pc, #28]	; (800b604 <__assert_func+0x30>)
 800b5e6:	9100      	str	r1, [sp, #0]
 800b5e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5ec:	4906      	ldr	r1, [pc, #24]	; (800b608 <__assert_func+0x34>)
 800b5ee:	462b      	mov	r3, r5
 800b5f0:	f000 f80e 	bl	800b610 <fiprintf>
 800b5f4:	f000 f89f 	bl	800b736 <abort>
 800b5f8:	4b04      	ldr	r3, [pc, #16]	; (800b60c <__assert_func+0x38>)
 800b5fa:	461c      	mov	r4, r3
 800b5fc:	e7f3      	b.n	800b5e6 <__assert_func+0x12>
 800b5fe:	bf00      	nop
 800b600:	200000dc 	.word	0x200000dc
 800b604:	0800bd45 	.word	0x0800bd45
 800b608:	0800bd52 	.word	0x0800bd52
 800b60c:	0800bd80 	.word	0x0800bd80

0800b610 <fiprintf>:
 800b610:	b40e      	push	{r1, r2, r3}
 800b612:	b503      	push	{r0, r1, lr}
 800b614:	4601      	mov	r1, r0
 800b616:	ab03      	add	r3, sp, #12
 800b618:	4805      	ldr	r0, [pc, #20]	; (800b630 <fiprintf+0x20>)
 800b61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61e:	6800      	ldr	r0, [r0, #0]
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	f7ff fe95 	bl	800b350 <_vfiprintf_r>
 800b626:	b002      	add	sp, #8
 800b628:	f85d eb04 	ldr.w	lr, [sp], #4
 800b62c:	b003      	add	sp, #12
 800b62e:	4770      	bx	lr
 800b630:	200000dc 	.word	0x200000dc

0800b634 <_fstat_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	; (800b654 <_fstat_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f6 ff40 	bl	80024c6 <_fstat>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_fstat_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_fstat_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	200053e4 	.word	0x200053e4

0800b658 <_isatty_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	; (800b674 <_isatty_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f6 ff3f 	bl	80024e6 <_isatty>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_isatty_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_isatty_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	200053e4 	.word	0x200053e4

0800b678 <__ascii_mbtowc>:
 800b678:	b082      	sub	sp, #8
 800b67a:	b901      	cbnz	r1, 800b67e <__ascii_mbtowc+0x6>
 800b67c:	a901      	add	r1, sp, #4
 800b67e:	b142      	cbz	r2, 800b692 <__ascii_mbtowc+0x1a>
 800b680:	b14b      	cbz	r3, 800b696 <__ascii_mbtowc+0x1e>
 800b682:	7813      	ldrb	r3, [r2, #0]
 800b684:	600b      	str	r3, [r1, #0]
 800b686:	7812      	ldrb	r2, [r2, #0]
 800b688:	1e10      	subs	r0, r2, #0
 800b68a:	bf18      	it	ne
 800b68c:	2001      	movne	r0, #1
 800b68e:	b002      	add	sp, #8
 800b690:	4770      	bx	lr
 800b692:	4610      	mov	r0, r2
 800b694:	e7fb      	b.n	800b68e <__ascii_mbtowc+0x16>
 800b696:	f06f 0001 	mvn.w	r0, #1
 800b69a:	e7f8      	b.n	800b68e <__ascii_mbtowc+0x16>

0800b69c <memmove>:
 800b69c:	4288      	cmp	r0, r1
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	eb01 0402 	add.w	r4, r1, r2
 800b6a4:	d902      	bls.n	800b6ac <memmove+0x10>
 800b6a6:	4284      	cmp	r4, r0
 800b6a8:	4623      	mov	r3, r4
 800b6aa:	d807      	bhi.n	800b6bc <memmove+0x20>
 800b6ac:	1e43      	subs	r3, r0, #1
 800b6ae:	42a1      	cmp	r1, r4
 800b6b0:	d008      	beq.n	800b6c4 <memmove+0x28>
 800b6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ba:	e7f8      	b.n	800b6ae <memmove+0x12>
 800b6bc:	4402      	add	r2, r0
 800b6be:	4601      	mov	r1, r0
 800b6c0:	428a      	cmp	r2, r1
 800b6c2:	d100      	bne.n	800b6c6 <memmove+0x2a>
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ce:	e7f7      	b.n	800b6c0 <memmove+0x24>

0800b6d0 <_realloc_r>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	460e      	mov	r6, r1
 800b6d8:	b921      	cbnz	r1, 800b6e4 <_realloc_r+0x14>
 800b6da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6de:	4611      	mov	r1, r2
 800b6e0:	f7fd ba0e 	b.w	8008b00 <_malloc_r>
 800b6e4:	b922      	cbnz	r2, 800b6f0 <_realloc_r+0x20>
 800b6e6:	f7ff fc5d 	bl	800afa4 <_free_r>
 800b6ea:	4625      	mov	r5, r4
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f0:	f000 f828 	bl	800b744 <_malloc_usable_size_r>
 800b6f4:	42a0      	cmp	r0, r4
 800b6f6:	d20f      	bcs.n	800b718 <_realloc_r+0x48>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	f7fd fa00 	bl	8008b00 <_malloc_r>
 800b700:	4605      	mov	r5, r0
 800b702:	2800      	cmp	r0, #0
 800b704:	d0f2      	beq.n	800b6ec <_realloc_r+0x1c>
 800b706:	4631      	mov	r1, r6
 800b708:	4622      	mov	r2, r4
 800b70a:	f7fd f9e2 	bl	8008ad2 <memcpy>
 800b70e:	4631      	mov	r1, r6
 800b710:	4638      	mov	r0, r7
 800b712:	f7ff fc47 	bl	800afa4 <_free_r>
 800b716:	e7e9      	b.n	800b6ec <_realloc_r+0x1c>
 800b718:	4635      	mov	r5, r6
 800b71a:	e7e7      	b.n	800b6ec <_realloc_r+0x1c>

0800b71c <__ascii_wctomb>:
 800b71c:	b149      	cbz	r1, 800b732 <__ascii_wctomb+0x16>
 800b71e:	2aff      	cmp	r2, #255	; 0xff
 800b720:	bf85      	ittet	hi
 800b722:	238a      	movhi	r3, #138	; 0x8a
 800b724:	6003      	strhi	r3, [r0, #0]
 800b726:	700a      	strbls	r2, [r1, #0]
 800b728:	f04f 30ff 	movhi.w	r0, #4294967295
 800b72c:	bf98      	it	ls
 800b72e:	2001      	movls	r0, #1
 800b730:	4770      	bx	lr
 800b732:	4608      	mov	r0, r1
 800b734:	4770      	bx	lr

0800b736 <abort>:
 800b736:	b508      	push	{r3, lr}
 800b738:	2006      	movs	r0, #6
 800b73a:	f000 f833 	bl	800b7a4 <raise>
 800b73e:	2001      	movs	r0, #1
 800b740:	f7f6 fe72 	bl	8002428 <_exit>

0800b744 <_malloc_usable_size_r>:
 800b744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b748:	1f18      	subs	r0, r3, #4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfbc      	itt	lt
 800b74e:	580b      	ldrlt	r3, [r1, r0]
 800b750:	18c0      	addlt	r0, r0, r3
 800b752:	4770      	bx	lr

0800b754 <_raise_r>:
 800b754:	291f      	cmp	r1, #31
 800b756:	b538      	push	{r3, r4, r5, lr}
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	d904      	bls.n	800b768 <_raise_r+0x14>
 800b75e:	2316      	movs	r3, #22
 800b760:	6003      	str	r3, [r0, #0]
 800b762:	f04f 30ff 	mov.w	r0, #4294967295
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b76a:	b112      	cbz	r2, 800b772 <_raise_r+0x1e>
 800b76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b770:	b94b      	cbnz	r3, 800b786 <_raise_r+0x32>
 800b772:	4620      	mov	r0, r4
 800b774:	f000 f830 	bl	800b7d8 <_getpid_r>
 800b778:	462a      	mov	r2, r5
 800b77a:	4601      	mov	r1, r0
 800b77c:	4620      	mov	r0, r4
 800b77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b782:	f000 b817 	b.w	800b7b4 <_kill_r>
 800b786:	2b01      	cmp	r3, #1
 800b788:	d00a      	beq.n	800b7a0 <_raise_r+0x4c>
 800b78a:	1c59      	adds	r1, r3, #1
 800b78c:	d103      	bne.n	800b796 <_raise_r+0x42>
 800b78e:	2316      	movs	r3, #22
 800b790:	6003      	str	r3, [r0, #0]
 800b792:	2001      	movs	r0, #1
 800b794:	e7e7      	b.n	800b766 <_raise_r+0x12>
 800b796:	2400      	movs	r4, #0
 800b798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b79c:	4628      	mov	r0, r5
 800b79e:	4798      	blx	r3
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e7e0      	b.n	800b766 <_raise_r+0x12>

0800b7a4 <raise>:
 800b7a4:	4b02      	ldr	r3, [pc, #8]	; (800b7b0 <raise+0xc>)
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	6818      	ldr	r0, [r3, #0]
 800b7aa:	f7ff bfd3 	b.w	800b754 <_raise_r>
 800b7ae:	bf00      	nop
 800b7b0:	200000dc 	.word	0x200000dc

0800b7b4 <_kill_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4d07      	ldr	r5, [pc, #28]	; (800b7d4 <_kill_r+0x20>)
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	4611      	mov	r1, r2
 800b7c0:	602b      	str	r3, [r5, #0]
 800b7c2:	f7f6 fe21 	bl	8002408 <_kill>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	d102      	bne.n	800b7d0 <_kill_r+0x1c>
 800b7ca:	682b      	ldr	r3, [r5, #0]
 800b7cc:	b103      	cbz	r3, 800b7d0 <_kill_r+0x1c>
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200053e4 	.word	0x200053e4

0800b7d8 <_getpid_r>:
 800b7d8:	f7f6 be0e 	b.w	80023f8 <_getpid>

0800b7dc <_init>:
 800b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7de:	bf00      	nop
 800b7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e2:	bc08      	pop	{r3}
 800b7e4:	469e      	mov	lr, r3
 800b7e6:	4770      	bx	lr

0800b7e8 <_fini>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	bf00      	nop
 800b7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ee:	bc08      	pop	{r3}
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	4770      	bx	lr
